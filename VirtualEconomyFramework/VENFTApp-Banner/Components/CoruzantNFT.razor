@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@inject IJSRuntime jsRuntime

<div class="card" style="margin-left:10px; margin-top:10px;min-width:250px; width:250px; max-width:250px; min-height:400px; max-height:600px;">
    <div class="card-header" style="padding: 0px;">
        <div class="row" style="max-width: 250px;height:200px;margin: 0px;">
            <div class="col d-flex justify-content-center align-items-center" style="padding: 0px;">

                @switch (nft.Type)
                {
                    case NFTTypes.CoruzantProfile:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                            </Spin>
                        }
                        break;
                    case NFTTypes.CoruzantArticle:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                            </Spin>
                        }
                        break;
                    case NFTTypes.CoruzantPodcast:
                        var tnft = nft as CoruzantArticleNFT;
                        @if (!string.IsNullOrEmpty(tnft.PodcastLink) || !string.IsNullOrEmpty(tnft.ImageLink))
                        {
                            @if (!string.IsNullOrEmpty(tnft.PodcastLink))
                            {
                                <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                    <source src="@tnft.PodcastLink" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(nft.ImageLink))
                                {
                                    <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                }
                            }
                        }
                        else
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                            </Spin>
                        }
                        break;
                }
            </div>
        </div>
    </div>

    <div class="card-body d-flex justify-content-center align-items-end @NFTCheckedBgColor">
        <span class="badge badge-primary" style="position: absolute;right: 190px;top: 207px;">Coruzant</span>
        @switch (nft.Type)
        {
            case NFTTypes.CoruzantProfile:
                <span class="badge badge-primary" style="position: absolute;right: 7px;top: 207px;">Profile</span>
                break;
            case NFTTypes.CoruzantArticle:
                <span class="badge badge-secondary" style="position: absolute;right: 7px;top: 207px;">Arcticle</span>
                break;
            case NFTTypes.CoruzantPodcast:
                <span class="badge badge-info" style="position: absolute;right: 7px;top: 207px;">Podcast</span>
                break;
        }

        <div class="row" style="margin: 0px;">
            <div class="col" style="padding: 0px;">
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (nft.Name.Length > 20)
                        {
                            <h6 class="text-center">@nft.Name.Substring(0, 19) ...</h6>
                        }
                        else
                        {
                            if (nft.Type == NFTTypes.CoruzantProfile)
                            {
                                var pnft = nft as CoruzantProfileNFT;
                                <h6 class="text-center">@pnft.Name @pnft.Surname</h6>
                            }
                            else
                            {
                                <h6 class="text-center">@nft.Name</h6>
                            }
                        }
                    </div>
                </div>
                @if (nft.Type != NFTTypes.CoruzantProfile)
                {
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Author))
                            {
                                @if (nft.Author.Length > 30)
                                {
                                    <small class="text-center">@nft.Author.Substring(0, 29) ...</small>
                                }
                                else
                                {
                                    <small class="text-center">@nft.Author</small>
                                }
                            }
                        </div>
                    </div>
                }
                else
                {
                    var pnft = nft as CoruzantProfileNFT;
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (pnft.WorkingPosition.Length > 50)
                            {
                                <small class="text-center">@pnft.WorkingPosition.Substring(0, 49) ...</small>
                            }
                            else
                            {
                                <small class="text-center">@pnft.WorkingPosition</small>
                            }
                        </div>
                    </div>
                }
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (nft.Description.Length > 80)
                        {
                            <small>@nft.Description.Substring(0, 79) ...</small>
                        }
                        else
                        {
                            <small>@nft.Description</small>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!--
        <div class="row">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <VENFTApp_Blazor.Components.NFTThumbnail Name="nft.Name" Type="nft.Type" Author="nft.Author" Description="nft.Description" />
            </div>
        </div>
        -->
    </div>
    @if (!HideButtons)
    {
        <div class="card-footer d-flex justify-content-center align-items-center">
            <small class="text-muted">
                <div class="row d-flex justify-content-center align-items-center">
                    <div class="col d-flex w-auto">
                        <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 40px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                            <i class="oi oi-info" style="font-size:12px;"></i>
                        </button>
                    </div>
                </div>
            </small>
        </div>
    }
</div>

<Modal Title="NFT Details"
       Visible="@nftDetailsVisible"
       OnOk="@CloseNFTDetails"
       OnCancel="@CloseNFTDetails">
    <CoruzantNFTDetails UtxoIndex="@nft.UtxoIndex"
                        Utxo="@nftDetailsUtxo"
                        OwnNFT="@OwnNFT"
                        Address="@Address"
                        SubAccount="@SubAccount" />
</Modal>

<Modal Title="NFT"
       Style="min-height:200px; min-width:200px;"
       Visible="@modalWithImageVisible"
       OnOk="@modalWithImageClose"
       OnCancel="@modalWithImageClose">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <img class="card-img-top" src="@modalWithImageLink" style="min-height:100px; height:auto; min-width:200px; width:auto;" />
        </div>
    </div>
    @if (nft.Type == NFTTypes.CoruzantProfile)
    {
        var pnft = nft as CoruzantProfileNFT;
        <div class="row text-center" style="margin: 0px;">
            <div class="col text-center" style="padding: 0px;">
                <span class="text-center">@pnft.Name @pnft.Surname</span>
            </div>
        </div>
        <div class="row text-center" style="margin: 0px;">
            <div class="col text-center" style="padding: 0px;">
                <small class="text-center">@pnft.WorkingPosition</small>
            </div>
        </div>
        <div class="row text-center">
            <div class="col d-flex justify-content-center align-items-center">
                <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 100px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                    Read more
                </button>
            </div>
        </div>
    }
    @if (nft.Type == NFTTypes.CoruzantArticle)
    {
        var anft = nft as CoruzantArticleNFT;
        <div class="row text-center" style="margin: 0px;">
            <div class="col text-center" style="padding: 0px;">
                <span class="text-center">@anft.Name</span>
            </div>
        </div>
        <div class="row text-center" style="margin: 0px;">
            <div class="col text-center" style="padding: 0px;">
                <small class="text-center">@anft.Description</small>
            </div>
        </div>
        <div class="row text-center">
            <div class="col d-flex justify-content-center align-items-center">
                <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 100px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                    Read more
                </button>
            </div>
        </div>
    }
</Modal>

@code {


    bool shareNFTVisible = false;
    string shareNFTUtxo = string.Empty;

    string nftDetailsUtxo = string.Empty;
    bool nftDetailsVisible = false;

    string modalWithImageLink = string.Empty;
    bool modalWithImageVisible = false;

    [Parameter]
    public bool HideButtons { get; set; } = false;

    [Parameter]
    public bool SubAccount { get; set; } = false;

    bool NFTChecked { get; set; } = false;
    string NFTCheckedBgColor { get; set; } = string.Empty;

    private INFT AuthorProfileNFT = new CoruzantProfileNFT("");

    private string _nftImageTitle = "NFT"; // todo connect to UI - now throw exception on first load
    public string nftImageTitle
    {
        get
        {
            if (nft != null)
            {
                if (nft.Type == NFTTypes.CoruzantProfile)
                    return (nft as CoruzantProfileNFT).Name + (nft as CoruzantProfileNFT).Surname;
                if (nft.Type == NFTTypes.CoruzantArticle)
                    return (nft as CoruzantProfileNFT).Name;
            }
            return _nftImageTitle;
        }
    }

    private INFT nft = new CoruzantProfileNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => nft;
        set
        {
            if (value != null && value.Utxo != nft.Utxo)
            {
                nft = value;
                TryToLoadProfile();
                StateHasChanged();
            }
        }
    }

    string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                _address = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    private async Task TryToLoadProfile()
    {
        if (nft.Type == NFTTypes.CoruzantArticle)
        {
            var NFT = nft as CoruzantArticleNFT;
            if (!string.IsNullOrEmpty(NFT.AuthorProfileUtxo) && NFT.AuthorProfileUtxo != AuthorProfileNFT.Utxo)
            {
                AuthorProfileNFT = await NFTFactory.GetNFT(CoruzantNFTHelpers.CoruzantTokenId, NFT.AuthorProfileUtxo, 0, 0, true, true, NFTTypes.CoruzantProfile);
            }
        }
    }

    private async Task CloseNFTDetails(MouseEventArgs e)
    {
        await nft.StopRefreshingData();
        nftDetailsVisible = false;
    }

    private async Task ShowShareNFT(string utxo)
    {
        shareNFTUtxo = "https://nft.ve-nft.com/?txid=" + utxo;
        shareNFTVisible = true;
    }

    private async Task CloseShareNFT(MouseEventArgs e)
    {
        shareNFTVisible = false;
    }

    private async Task ShowNFTDetails(string utxo)
    {
        nftDetailsUtxo = utxo;
        modalWithImageVisible = false;
        StateHasChanged();
        nftDetailsVisible = true;
        StateHasChanged();
    }

    public async Task OpenModalWithImage(string url)
    {
        modalWithImageVisible = true;
        modalWithImageLink = url;
        StateHasChanged();
    }

    public async Task modalWithImageClose(MouseEventArgs e)
    {
        modalWithImageVisible = false;
        StateHasChanged();
    }
}
