@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using Newtonsoft.Json

<div class="row">
    <div class="col">
        <Spin Tip="Loading..." Spinning="@loading">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Name: @NFT.Name</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Author: @NFT.Author</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Description: @NFT.Description</span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(NFT.Link) && NFT.Type != NFTTypes.Music)
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="@NFT.Link" target="_blank">Connected Link</a>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(NFT.NFTOriginTxId))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="https://explorer.nebl.io/tx/@NFT.NFTOriginTxId" target="_blank">Mint Tx In Explorer</a>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(NFT.Utxo))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="https://explorer.nebl.io/tx/@NFT.Utxo" target="_blank">Tx In Explorer</a>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Confirmations: @NFT.TxDetails.Confirmations.ToString()</span>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <a href="@NFT.ImageLink" target="_blank">
                        @if (NFT.Type == NFTTypes.Music)
                        {
                            @if (!string.IsNullOrEmpty(NFT.Link))
                            { 
                                <video controls="" autoplay="" name="media" title="@NFT.Name">
                                    <source src="@NFT.Link" type="audio/mpeg">
                                </video>
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true" >
                                    <div style="width:100px; height:50px;"></div>
                                </Spin>
                            }
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(NFT.ImageLink))
                            {
                                <img src="@NFT.ImageLink" style="min-height:50px; max-height:150px; width:auto;" />
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <img src="@NFT.ImageLink" style="min-height:100px; max-height:150px; width:auto; min-width:50px; max-width:250px;" />
                                </Spin>
                            }
                        }
                    </a>
                </div>
            </div>
            <NFTHistory Utxo="@NFT.Utxo" />
        </Spin>
    </div>
</div>

@code {

    private INFT NFT { get; set; } = new ImageNFT("");

    private string _utxo = string.Empty;
    [Parameter]
    public string Utxo
    {
        get => _utxo;
        set
        {
            if (!string.IsNullOrEmpty(value) && _utxo != value)
            {
                _utxo = value;
                Load();
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    bool setPriceNFTDialogVisible = false;
    bool loading = false;
    bool copyTextButtonCoppied = false;

    string status = string.Empty;
    private string songName = string.Empty;

    protected override Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(_utxo))
            Load();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (NFT.Type == NFTTypes.Music && !string.IsNullOrEmpty(NFT.Name) && NFT.Name != songName)
        {
            songName = NFT.Name;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        loading = true;
        StateHasChanged();
        NFT.TxDataRefreshed -= TxDataRefreshedHandler;
        await NFT.StopRefreshingData();
        if (NFT.Type !=  NFTTypes.Music)
            NFT = await NFTFactory.GetNFT(NFTHelpers.TokenId, _utxo);
        else
            NFT = await NFTFactory.GetNFT(NFTHelpers.TokenId, _utxo, 0, true);

        if (NFT == null)
            return;

        await NFT.StartRefreshingTxData();
        NFT.TxDataRefreshed += TxDataRefreshedHandler;
        loading = false;
        StateHasChanged();
    }

    private void TxDataRefreshedHandler(object sender, GetTransactionInfoResponse info)
    {
        StateHasChanged();
    }
}
