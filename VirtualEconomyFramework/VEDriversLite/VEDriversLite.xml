<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VEDriversLite</name>
    </assembly>
    <members>
        <member name="P:VEDriversLite.DogeAccount.Address">
            <summary>
            Doge Address hash
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.Secret">
            <summary>
            Loaded Secret, NBitcoin Class which carry Public Key and Private Key
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.TotalBalance">
            <summary>
            Total actual balance based on Utxos. This means sum of spendable and unconfirmed balances.
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.TotalSpendableBalance">
            <summary>
            Total spendable balance based on Utxos.
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.TotalUnconfirmedBalance">
            <summary>
            Total balance which is now unconfirmed based on Utxos.
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.Utxos">
            <summary>
            Actual list of all Utxos on this address.
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.SentTransactions">
            <summary>
            Actual list of last 100 Spended transactions on this address.
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.ReceivedTransactions">
            <summary>
            Actual list of last 100 Received transactions on this address.
            </summary>
        </member>
        <member name="E:VEDriversLite.DogeAccount.Refreshed">
            <summary>
            This event is called whenever info about the address is reloaded. It is periodic event.
            </summary>
        </member>
        <member name="E:VEDriversLite.DogeAccount.NewEventInfo">
            <summary>
            This event is called whenever some important thing happen. You can obtain success, error and info messages.
            </summary>
        </member>
        <member name="P:VEDriversLite.DogeAccount.AccountKey">
            <summary>
            Carrier for encrypted private key from storage and its password.
            </summary>
        </member>
        <member name="M:VEDriversLite.DogeAccount.IsLocked">
            <summary>
            This function will check if the account is locked or unlocked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.InvokeSendPaymentSuccessEvent(System.String,System.String)">
            <summary>
            Invoke Success message info event
            </summary>
            <param name="txid">new tx id hash</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.InvokeAccountLockedEvent(System.String)">
            <summary>
            Invoke Error message because account is locked
            </summary>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.InvokeErrorDuringSendEvent(System.String,System.String)">
            <summary>
            Invoke Error message which occured during sending of the transaction
            </summary>
            <param name="errorMessage">Error message content</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.InvokeErrorEvent(System.String,System.String)">
            <summary>
            Invoke Common Error message
            </summary>
            <param name="errorMessage">Error message content</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.CreateNewAccount(System.String,System.Boolean)">
            <summary>
            This function will create new account - Doge address and its Private key.
            </summary>
            <param name="password">Input password, which will encrypt the Private key</param>
            <param name="saveToFile">if you want to save it to the file (dont work in the WASM) set this. It will save to root exe path as key.txt</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.LoadAccount(System.String)">
            <summary>
            Load account from "key.txt" file placed in the root exe directory. Doesnt work in WABS
            </summary>
            <param name="password">Passwotd to decrypt the loaded private key</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.LoadAccount(System.String,System.String,System.String)">
            <summary>
            Load account from password, input encrypted private key and address.
            It expect the private key is encrypted by the password.
            It uses AES encryption
            </summary>
            <param name="password"></param>
            <param name="encryptedKey"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.StartRefreshingData(System.Int32)">
            <summary>
            This function will load the actual data and then run the task which periodically refresh this data.
            It doesnt have cancellation now!
            </summary>
            <param name="interval">Default interval is 3000 = 3 seconds</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.ReloadUtxos">
            <summary>
            Reload address Utxos list. It will sort descending the utxos based on the utxos number of confirmations.
            Smallest number of confirmations leads to newest transations
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.GetListOfSentTransactions">
            <summary>
            This function will get list of spended transaction
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.GetListOfReceivedTransactions">
            <summary>
            This function will get list of received transaction
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.CheckSpendableDoge(System.Double)">
            <summary>
            This function will check if there is some spendable doge of specific amount and returns list of the utxos for the transaction
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.SendPayment(System.String,System.Double,System.String)">
            <summary>
            Send Doge payment
            </summary>
            <param name="receiver">Receiver Doge Address</param>
            <param name="amount">Ammount in Doge</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.BuyNFT(System.String,System.String,VEDriversLite.NFT.INFT)">
            <summary>
            Send Doge payment
            </summary>
            <param name="receiver">Receiver Doge Address</param>
            <param name="amount">Ammount in Doge</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.SignMessage(System.String)">
            <summary>
            Sign custom message with use of account Private Key
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAccount.VerifyMessage(System.String,System.String,System.String)">
            <summary>
            Verify message which was signed by some address.
            </summary>
            <param name="message">Input message</param>
            <param name="signature">Signature of this message created by owner of some doge address.</param>
            <param name="address">Doge address which should sign the message and should be verified.</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressBalanceAsync(System.String)">
            <summary>Returns the doge balance</summary>
            <param name="address">Doge address</param>
            <returns>Object containing doge balance, if address symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns the doge balance</summary>
            <param name="address">Doge address</param>
            <returns>Object containing doge balance, if address symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetTransactionInfoAsync(System.String)">
            <summary>Information On an Doge Transaction</summary>
            <param name="txid">Doge txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetTransactionInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On an Doge Transaction</summary>
            <param name="txid">Doge txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressUtxosAsync(System.String)">
            <summary>Doge Address Unspended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressUtxosAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Doge Address Unspended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressSentTxAsync(System.String)">
            <summary>Doge Address spended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Spended transactions</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressSentTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Doge Address Unspended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressReceivedTxAsync(System.String)">
            <summary>Doge Address received transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Spended transactions</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.GetAddressReceivedTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Doge Address Unspended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.BroadcastTxAsync(VEDriversLite.DogeAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.Client.BroadcastTxAsync(VEDriversLite.DogeAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IJsonClient.RpcAsync(VEDriversLite.DogeAPI.RpcRequest)">
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IJsonClient.RpcAsync(VEDriversLite.DogeAPI.RpcRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.JsonClient.RpcAsync(VEDriversLite.DogeAPI.RpcRequest)">
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.JsonClient.RpcAsync(VEDriversLite.DogeAPI.RpcRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressBalanceResponse.Status">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressBalanceResponse.Data">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressBalanceResponseData.Network">
            <summary>Balance on the address</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressBalanceResponseData.Address">
            <summary>Balance on the address</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressBalanceResponseData.Balance">
            <summary>Balance on the address</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressBalanceResponseData.UnconfirmedBalance">
            <summary>Balance on the address</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressUtxosResponse.Status">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressUtxosResponse.Data">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressUtxosResponseData.network">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressUtxosResponseData.address">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressUtxosResponseData.Utxos">
            <summary>Array of transaction outputs</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.TxId">
            <summary>TxId hash</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.Script">
            <summary>Script signature</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.ScriptHex">
            <summary>Script signature</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.N">
            <summary>Index of the output</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.Value">
            <summary>Value in satoshi</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.Confirmations">
            <summary>Number of confirmaions</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Utxo.Time">
            <summary>Number of confirmaions</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressSpentTxsResponse.Status">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressSpentTxsResponse.Data">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressSpentTxsResponseData.network">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressSpentTxsResponseData.address">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressSpentTxsResponseData.Transactions">
            <summary>Array of transaction outputs</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.TxId">
            <summary>TxId hash</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.Script">
            <summary>Script signature</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.ScriptHex">
            <summary>Script signature</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.N">
            <summary>Index of the output</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.Value">
            <summary>Value in satoshi</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.Confirmations">
            <summary>Number of confirmaions</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.SpentTx.Time">
            <summary>Number of confirmaions</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressReceivedTxsResponse.Status">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressReceivedTxsResponse.Data">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressReceivedTxsResponseData.network">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressReceivedTxsResponseData.address">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetAddressReceivedTxsResponseData.Transactions">
            <summary>Array of transaction outputs</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.TxId">
            <summary>TxId hash</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.Script">
            <summary>Script signature</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.ScriptHex">
            <summary>Script signature</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.N">
            <summary>Index of the output</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.Value">
            <summary>Value in satoshi</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.Confirmations">
            <summary>Number of confirmaions</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.ReceivedTx.Time">
            <summary>Number of confirmaions</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.BroadcastTxRequest.data">
            <summary>Signed raw tx hex to broadcast</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.BroadcastTxResponse.Data">
            <summary>Txid of successfully broadcasted transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.BTData.TxId">
            <summary>Txid of successfully broadcasted transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.BroadcastTxResponseData.TxId">
            <summary>Txid of successfully broadcasted transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.BroadcastTxResponseData.Network">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetTransactionInfoResponse.Success">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.GetTransactionInfoResponse.Transaction">
            <summary>Transaction object</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Txid">
            <summary>TxId of transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Network">
            <summary>TxId of transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.BlockHash">
            <summary>Blockhash of transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.TxHex">
            <summary>Blockhash of transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Version">
            <summary>Transaction version</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Locktime">
            <summary>Transaction locktime</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Vin">
            <summary>Array of transaction inputs</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Vout">
            <summary>Array of transaction outputs</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Time">
            <summary>Block time of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Size">
            <summary>Block height of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.TransactionResponseObject.Confirmations">
            <summary>Number of transaction confirmations</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vin.Addr">
            <summary> Sender Address </summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vin.ScriptSig">
            <summary> Sender Script signature </summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vin.N">
            <summary>Value of input in Doge satoshi</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vin.Value">
            <summary>Value of input in Doge satoshi</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.PreviousOutput.TxId">
            <summary> Previous output TxId hash </summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.PreviousOutput.N">
            <summary> Previous output index </summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vout.Value">
            <summary>Value of the output in Doge satoshi</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vout.N">
            <summary>Output index</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vout.Address">
            <summary> Receiver Address </summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.Vout.Script">
            <summary> Receiver Address </summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcRequest.Jsonrpc">
            <summary>JSON-RPC version</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcRequest.Id">
            <summary>Identifier of RCP caller</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcRequest.Method">
            <summary>Name of the Neblio RPC method to call</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcRequest.Params">
            <summary>Array of string params that should be passed to the RPC method.</summary>
        </member>
        <member name="T:VEDriversLite.DogeAPI.RpcResponse">
            <summary>Object containing the JSON response from the Neblio node.</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcResponse.Result">
            <summary>Object containing the response output.</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcResponse.Id">
            <summary>Identifier of RCP caller</summary>
        </member>
        <member name="P:VEDriversLite.DogeAPI.RpcResponse.Error">
            <summary>Object containing any error information.</summary>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IClient.GetAddressBalanceAsync(System.String)">
            <summary>Returns the doge balance</summary>
            <param name="address">Doge address</param>
            <returns>Object containing doge balance, if address symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IClient.BroadcastTxAsync(VEDriversLite.DogeAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IClient.GetTransactionInfoAsync(System.String)">
            <summary>Information On an Doge Transaction</summary>
            <param name="txid">Doge txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IClient.GetAddressUtxosAsync(System.String)">
            <summary>Doge Address Unspended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IClient.GetAddressSentTxAsync(System.String)">
            <summary>Doge Address spended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeAPI.IClient.GetAddressReceivedTxAsync(System.String)">
            <summary>Doge Address spended transactions</summary>
            <param name="address">Doge Address</param>
            <returns>Object containing collection of Utxos</returns>
            <exception cref="T:VEDriversLite.DogeAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.GetAddressAndKey(VEDriversLite.Security.EncryptionKey,System.String)">
            <summary>
            Function converts EncryptionKey (optionaly with password if it is not already loaded in ekey)
            and returns BitcoinAddress and BitcoinSecret classes from NBitcoin
            </summary>
            <param name="ekey"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.SignAndBroadcast(NBitcoin.Transaction,NBitcoin.BitcoinSecret,NBitcoin.BitcoinAddress)">
            <summary>
            Function will sign transaction with provided key and broadcast with Neblio API
            </summary>
            <param name="transaction">NBitcoin Transaction object</param>
            <param name="key">NBitcoin Key - must contain Private Key</param>
            <param name="address">NBitcoin address - must match with the provided key</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.SendDogeTransactionAsync(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.DogeAPI.Utxo},System.Double)">
            <summary>
            Function will send standard Neblio transaction
            </summary>
            <param name="data">Send data, please see SendTxData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="utxos">Optional input neblio utxo</param>
            <param name="fee">Fee - 100000000sat = 1 DOGE minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.GetClient">
            <summary>
            Returns private client for Neblio API. If it is null, it will create new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.BroadcastTxAsync(VEDriversLite.DogeAPI.BroadcastTxRequest)">
            <summary>
            Broadcast of signed transaction.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.AddressBalanceAsync(System.String)">
            <summary>
            Return address balance.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.AddressUtxosAsync(System.String)">
            <summary>
            Return address info object. this object contains list of Utxos.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.AddressSpendTxsAsync(System.String)">
            <summary>
            Return address spended transaction list. 
            </summary>
            <param name="addr"></param>
            <returns>This object contains list of spended Txs.</returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.AddressReceivedTxsAsync(System.String)">
            <summary>
            Return address received transaction list. 
            </summary>
            <param name="addr"></param>
            <returns>This object contains list of spended Txs.</returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.TransactionInfoAsync(System.String)">
            <summary>
            Return transaction object
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.DogeTransactionHelpers.GetAddressSpendableUtxo(System.String,System.Double,System.Double)">
            <summary>
            Returns list of spendable utxos which together match some input required amount for some transaction
            </summary>
            <param name="addr">address which has utxos for spend - sender in tx</param>
            <param name="minAmount">minimum amount of one utxo</param>
            <param name="requiredAmount">amount what must be collected even by multiple utxos</param>
            <returns></returns>
        </member>
        <member name="P:VEDriversLite.MintNFTData.SenderAddress">
            <summary>
            Address from where token will be send
            </summary>
        </member>
        <member name="P:VEDriversLite.MintNFTData.ReceiverAddress">
            <summary>
            Address from where to send new NFT
            </summary>
        </member>
        <member name="P:VEDriversLite.MintNFTData.Password">
            <summary>
            If the account is locked you can provide password directly in the send token api command
            if the account is unlocked or the QT wallet is connected fill empty string
            </summary>
        </member>
        <member name="P:VEDriversLite.MintNFTData.Id">
            <summary>
            Id of token
            </summary>
        </member>
        <member name="P:VEDriversLite.MintNFTData.Metadata">
            <summary>
            Metadata dictionary, key-value pairs
            </summary>
        </member>
        <member name="P:VEDriversLite.MintNFTData.sendUtxo">
            <summary>
            Initial Utxo for sending transaction from
            </summary>
        </member>
        <member name="P:VEDriversLite.MintNFTData.UseRPCPrimarily">
            <summary>
            If you use RPC and NBitcoin you can preffer using RPC with set this to true
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.Address">
            <summary>
            Neblio Address hash
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.Secret">
            <summary>
            Loaded Secret, NBitcoin Class which carry Public Key and Private Key
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.NumberOfTransaction">
            <summary>
            Number of the transactions on the address. not used now
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.NumberOfLoadedTransaction">
            <summary>
            Number of already loaded transaction on the address. not used now
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.EnoughBalanceToBuySourceTokens">
            <summary>
            If the address has enought Neblio to buy source VENFT tokens (costs 1 NEBL) this is set as true.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.TotalBalance">
            <summary>
            Total actual balance based on Utxos. This means sum of spendable and unconfirmed balances.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.TotalSpendableBalance">
            <summary>
            Total spendable balance based on Utxos.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.TotalUnconfirmedBalance">
            <summary>
            Total balance which is now unconfirmed based on Utxos.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.SourceTokensBalance">
            <summary>
            Total balance of VENFT tokens which can be used for minting purposes.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.CoruzantSourceTokensBalance">
            <summary>
            Total balance of Coruzant tokens which can be used for minting purposes.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.AddressNFTCount">
            <summary>
            Total number of NFT on the address. It counts also Profile NFT, etc.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.NFTs">
            <summary>
            List of actual address NFTs. Based on Utxos list
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.CoruzantNFTs">
            <summary>
            List of actual address Coruzant NFTs. Based on Utxos list
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.Tabs">
            <summary>
            List of all active tabs for browsing or interacting with the address. All has possibility to load own list of NFTs.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.SubAccounts">
            <summary>
            Neblio Sub Accounts. Each can work with own set of NFTs. It is real blockchain address with own Private Key
            </summary>
        </member>
        <member name="F:VEDriversLite.NeblioAccount.ReceivedPayments">
            <summary>
            Received payments (means Payment NFT) of this address.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.Profile">
            <summary>
            If address has some profile NFT, it is founded in Utxo list and in this object.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.TokensSupplies">
            <summary>
            Actual all token supplies. Consider also other tokens than VENFT.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.Utxos">
            <summary>
            Actual list of all Utxos on this address.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.Bookmarks">
            <summary>
            List of all saved bookmarks. This is just realtime carrier. It need some serialization/deserialization.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.AddressInfo">
            <summary>
            Actual loaded address info. It has inside list of all transactions.
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.AddressInfoUtxos">
            <summary>
            Actual loaded address info with list of Utxos. When utxos are loaded first, this is just fill with it to prevent not necessary API request.
            </summary>
        </member>
        <member name="E:VEDriversLite.NeblioAccount.Refreshed">
            <summary>
            This event is called whenever info about the address is reloaded. It is periodic event.
            </summary>
        </member>
        <member name="E:VEDriversLite.NeblioAccount.NewEventInfo">
            <summary>
            This event is called whenever some important thing happen. You can obtain success, error and info messages.
            </summary>
        </member>
        <member name="E:VEDriversLite.NeblioAccount.NFTsChanged">
            <summary>
            This event is called whenever the list of NFTs is changed
            </summary>
        </member>
        <member name="E:VEDriversLite.NeblioAccount.NewMintingProcessInfo">
            <summary>
            This event is called whenever some progress during multimint happens
            </summary>
        </member>
        <member name="E:VEDriversLite.NeblioAccount.ProfileUpdated">
            <summary>
            This event is called whenever profile nft is updated or found
            </summary>
        </member>
        <member name="P:VEDriversLite.NeblioAccount.AccountKey">
            <summary>
            Carrier for encrypted private key from storage and its password.
            </summary>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.IsLocked">
            <summary>
            This function will check if the account is locked or unlocked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.InitHandlers">
            <summary>
            This function will register event info from NeblioTransactionHelpers class.
            </summary>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.DeInitHandlers">
            <summary>
            This function will unregister event info from NeblioTransactionHelpers class.
            </summary>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.NeblioTransactionHelpers_NewEventInfo(System.Object,VEDriversLite.Events.IEventInfo)">
            <summary>
            Handler for event info messages. Now it just store events in common store.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.InvokeSendPaymentSuccessEvent(System.String,System.String)">
            <summary>
            Invoke Success message info event
            </summary>
            <param name="txid">new tx id hash</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.InvokeAccountLockedEvent(System.String)">
            <summary>
            Invoke Error message because account is locked
            </summary>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.InvokeErrorDuringSendEvent(System.String,System.String)">
            <summary>
            Invoke Error message which occured during sending of the transaction
            </summary>
            <param name="errorMessage">Error message content</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.InvokeErrorEvent(System.String,System.String)">
            <summary>
            Invoke Common Error message
            </summary>
            <param name="errorMessage">Error message content</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.StartRefreshingData(System.Int32)">
            <summary>
            This function will load the actual data and then run the task which periodically refresh this data.
            It doesnt have cancellation now!
            </summary>
            <param name="interval">Default interval is 3000 = 3 seconds</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.CreateNewAccount(System.String,System.Boolean,System.String)">
            <summary>
            This function will create new account - Neblio address and its Private key.
            </summary>
            <param name="password">Input password, which will encrypt the Private key</param>
            <param name="saveToFile">if you want to save it to the file (dont work in the WASM) set this. It will save to root exe path as key.txt</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadAccount(System.String,System.String)">
            <summary>
            Load account from filename (default "key.txt") file placed in the root exe directory. Doesnt work in WABS
            </summary>
            <param name="password">Passwotd to decrypt the loaded private key</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadAccountFromVENFTBackup(System.String,System.String)">
            <summary>
            Load account from filename backup from VENFT App (default "backup.json") file placed in the root exe directory. Doesnt work in WABS
            </summary>
            <param name="password">Passwotd to decrypt the loaded private key</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadAccount(System.String,System.String,System.String)">
            <summary>
            Load account from password, input encrypted private key and address.
            It expect the private key is encrypted by the password.
            It uses AES encryption
            </summary>
            <param name="password"></param>
            <param name="encryptedKey"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadBookmarks(System.String)">
            <summary>
            Load bookmarks from previous serialized list of bookmarks. 
            </summary>
            <param name="bookmarks"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.AddBookmark(System.String,System.String,System.String)">
            <summary>
            Add new bookmark to bookmark list and return serialized list for save
            </summary>
            <param name="name">Name of the bookmark. It is important for most functions which work with the bookmarks</param>
            <param name="address">Neblio Address</param>
            <param name="note">optional note</param>
            <returns>Serialized list in string for save</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.RemoveBookmark(System.String)">
            <summary>
            Remove bookmark by the neblio address. It must be found in the bookmark list
            </summary>
            <param name="address"></param>
            <returns>Serialized list in string for save</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SerializeBookmarks">
            <summary>
            Get serialized bookmarks list as string
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.IsInTheBookmarks(System.String)">
            <summary>
            Check if the address is already in the bookmarks and return this bookmark
            </summary>
            <param name="address">Address which should be in the bookmarks</param>
            <returns>true and bookmark class if exists</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadTabs(System.String)">
            <summary>
            Load tabs from previous serialized string.
            </summary>
            <param name="tabs">List of ActiveTabs as json string</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.AddTab(System.String)">
            <summary>
            Add new tab based on some Neblio address
            </summary>
            <param name="address"></param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.RemoveTab(System.String)">
            <summary>
            Remove tab by Neblio address if exists in the tabs
            </summary>
            <param name="address">Neblio Address which tab should be removed</param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SerializeTabs">
            <summary>
            Return serialized list of ActiveTabs as Json stirng
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadMessageTabs(System.String)">
            <summary>
            Load tabs from previous serialized string.
            </summary>
            <param name="tabs">List of MessageTabs as json string</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.AddMessageTab(System.String)">
            <summary>
            Add new message tab based on some Neblio address
            </summary>
            <param name="address"></param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.RemoveMessageTab(System.String)">
            <summary>
            Remove tab by Neblio address if exists in the tabs
            </summary>
            <param name="address">Neblio Address which tab should be removed</param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SerializeMessageTabs">
            <summary>
            Return serialized list of MessageTabs as Json stirng
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.LoadSubAccounts(System.String)">
            <summary>
            Load subaccounts from previous serialized string.
            </summary>
            <param name="subaccounts">List of SubAccountsAddressExports as json string</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.AddSubAccount(System.String,System.Boolean,System.Double,System.Boolean,System.Double,System.String)">
            <summary>
            Add new Sub Account
            </summary>
            <param name="address"></param>
            <param name="sendNeblioToAccount">Set This true if you want to load some Neblio to this address after it is created.</param>
            <param name="neblioAmountToSend">Amount of neblio for initial load of the address, 0.05 is default = 250 tx</param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.RemoveSubAccount(System.String)">
            <summary>
            Remove Sub Account by Neblio address if exists in the dictionary
            Please remember that this function will destroy account. Please do backup first.
            </summary>
            <param name="address">Neblio Address which tab should be removed</param>
            <returns>true and string with serialized subaccount account export dto list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.GetSubAccountAddressByName(System.String)">
            <summary>
            Get sub account address by name
            </summary>
            <param name="name">Neblio Sub Account Name</param>
            <returns>true and string with serialized subaccount account export dto list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.GetSubAccountNameByAddress(System.String)">
            <summary>
            Get sub account name by address
            </summary>
            <param name="name">Neblio Sub Account Name</param>
            <returns>true and string with serialized subaccount account export dto list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ChangeSubAccountName(System.String,System.String)">
            <summary>
            Change Sub Account Name if exists in the dictionary
            Automatically is changed name in bookmarks too. Thats why function will return both serialized lists
            </summary>
            <param name="address">Neblio Address which tab should be renamed</param>
            <param name="newName">New Name</param>
            <returns>true and string with serialized subaccount account export dto list as json string nad bookmarks list</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.GetSubAccountKeys">
            <summary>
            Get Sub Account Keys for export
            </summary>
            <returns>true and dictionary with addresses and private keys</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendNFTFromSubAccount(System.String,System.String,VEDriversLite.NFT.INFT,System.Boolean)">
            <summary>
            Send NFT From SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="receiver">Receiver of the NFT</param>
            <param name="NFT">NFT on the SubAccount which should be send</param>
            <param name="sendToMainAccount">If this is set, function will rewrite receiver to main Account Address</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ChangeNFTOnSubAccount(System.String,VEDriversLite.NFT.INFT)">
            <summary>
            Change NFT on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be changed</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.MintNFTOnSubAccount(System.String,VEDriversLite.NFT.INFT,System.String)">
            <summary>
            Mint NFT on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be minted</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.MultimintNFTLargeOnSubAccount(System.String,VEDriversLite.NFT.INFT,System.Int32,System.String)">
            <summary>
            Multi Mint of large amount of NFTs on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be minted</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SplitNeblioOnSubAccount(System.String,System.Collections.Generic.List{System.String},System.Int32,System.Double)">
            <summary>
            Split Neblio Coin on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be minted</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SplitNeblioTokensOnSubAccount(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            Split Neblio Tokens on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be minted</param>
            <returns>true and string with new TxId</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VEDriversLite.NeblioAccount.GetNFTVerifyQRCodeFromSubAccount(System.String,System.String)" -->
        <member name="M:VEDriversLite.NeblioAccount.UseTicketNFTOnSubAccount(System.String,VEDriversLite.NFT.INFT)">
            <summary>
            Use Ticket NFT on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be changed</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendCoruzantNFTOnSubAccount(System.String,VEDriversLite.NFT.INFT,System.String,System.Boolean,System.String)">
            <summary>
            Change Coruzant NFT on SubAccount or send it to another address
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be changed</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.DestroyNFTOnSubAccount(System.String,System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT},System.Boolean)">
            <summary>
            Destroy NFTs on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <param name="NFT">NFT on the SubAccount which should be send</param>
            /// <param name="sendToMainAccount">If this is set, function will rewrite receiver to main Account Address</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.GetNFTsOnSubAccount(System.String)">
            <summary>
            Get NFTs on SubAccount
            </summary>
            <param name="address">Neblio Address of SubAccount</param>
            <returns>true and string with new TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SerializeSubAccounts">
            <summary>
            Returns serialized subaccount account export dto list as json string
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ReloadTokenSupply">
            <summary>
            Reload actual token supplies based on already loaded list of address utxos
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ReloadCountOfNFTs">
            <summary>
            Reload actual count of the NFTs based on already loaded list of address utxos
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ReloadMintingSupply">
            <summary>
            Reload actual VENFT minting supply based on already loaded list of address utxos
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ReloadUtxos">
            <summary>
            Reload address Utxos list. It will sort descending the utxos based on the utxos time stamps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ReloadAccountInfo">
            <summary>
            This function will load actual address info an adress utxos. It is used mainly for loading list of all transactions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ReLoadNFTs(System.Boolean)">
            <summary>
            This function will reload changes in the NFTs list based on provided list of already loaded utxos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.RefreshAddressReceivedPayments">
            <summary>
            This function will search NFT Payments in the NFTs list and load them into ReceivedPayments list. 
            This list is cleared at the start of this function
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.CheckPayments">
            <summary>
            This function will check payments and try to find them complementary NFT which was sold. 
            If there is price mathc and enough of confirmations it will try to send NFT to new owner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.HasSomeSpendableNeblio(System.Double)">
            <summary>
            This function will check if the address has some spendable neblio for transaction.
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.HasSomeSourceForMinting">
            <summary>
            This function will check if the address has some spendable VENFT tokens for minting. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ValidateNFTUtxo(System.String,System.Int32)">
            <summary>
            This function will validate if the NFT of this address is spendable
            </summary>
            <param name="utxo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.CheckSpendableNeblio(System.Double)">
            <summary>
            This function will check if there is some spendable neblio of specific amount and returns list of the utxos for the transaction
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.CheckSpendableNeblioTokens(System.String,System.Int32)">
            <summary>
            This function will check if there is some spendable tokens of specific Id and amount and returns list of the utxos for the transaction.
            </summary>
            <param name="id"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.OrderSourceTokens(System.Double)">
            <summary>
            This function will send request for 100 VENFT tokens. It can be process by sending 1 NEBL to specific project address.
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendNeblioPayment(System.String,System.Double)">
            <summary>
            Send classic neblio payment
            </summary>
            <param name="receiver">Receiver Neblio Address</param>
            <param name="amount">Ammount in Neblio</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SplitNeblioCoin(System.Collections.Generic.List{System.String},System.Int32,System.Double)">
            <summary>
            Split neblio coin to smaller coins
            </summary>
            <param name="receiver">Receiver Neblio Address</param>
            <param name="splittedAmount">Ammount of new splitted coin in Neblio</param>
            <param name="count">Count of new splited couns</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendNeblioTokenPayment(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Send classic token payment. It must match same requirements as minting. It cannot use 1 token inputs (NFTs).
            </summary>
            <param name="tokenId">Token Id hash</param>
            <param name="metadata">Custom metadata</param>
            <param name="receiver">Receiver Neblio address</param>
            <param name="amount">Amount of the tokens</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SplitTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            Send split token payment. It will create multiple outputs with lots of tokens.
            It must match same requirements as minting. It cannot use 1 token inputs (NFTs).
            </summary>
            <param name="tokenId">Token Id hash</param>
            <param name="metadata">Custom metadata</param>
            <param name="receivers">List Receiver Neblio address</param>
            <param name="lots">Amount of the tokens</param>
            <param name="amount">Amount of the tokens</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.MintNFT(VEDriversLite.NFT.INFT,System.String)">
            <summary>
            Mint new NFT. It is automatic function which will decide what NFT to mint based on provided type in the NFT input
            </summary>
            <param name="tokenId"></param>
            <param name="NFT">Input carrier of NFT data. It must specify the type</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.MintMultiNFT(VEDriversLite.NFT.INFT,System.Int32,System.String)">
            <summary>
            Mint new multi NFT. It is automatic function which will decide what NFT to mint based on provided type in the NFT input.
            </summary>
            <param name="tokenId"></param>
            <param name="NFT">Input carrier of NFT data. It must specify the type</param>
            <param name="coppies">Number of coppies. 1 coppy means 2 final NFTs</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.MintMultiNFTLargeAmount(VEDriversLite.NFT.INFT,System.Int32,System.String)">
            <summary>
            Mint new multi NFT. It is automatic function which will decide what NFT to mint based on provided type in the NFT input.
            </summary>
            <param name="tokenId"></param>
            <param name="NFT">Input carrier of NFT data. It must specify the type</param>
            <param name="coppies">Number of coppies. 1 coppy means 2 final NFTs</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.DestroyNFTs(System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT},System.String)">
            <summary>
            This function will destroy provided NFTs. It means it will connect them again to one output/lot of tokens.
            Now it is possible to destroy just same kind of tokens. The first provided NFT will define TokenId. Different tokensIds will be skipped.
            Maximum to destroy in one transaction is 10 of NFTs
            </summary>
            <param name="tokenId">Token Id hash</param>
            <param name="nfts">List of NFTs</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ChangeProfileNFT(VEDriversLite.NFT.INFT)">
            <summary>
            This function will change profile NFT. It need as input previous loaded Profile NFT.
            </summary>
            <param name="NFT"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.ChangeNFT(VEDriversLite.NFT.INFT)">
            <summary>
            Change Post NFT. It requeires previous loadedPost NFT as input.
            </summary>
            <param name="NFT"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendMessageNFT(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Send NFT.
            </summary>
            <param name="NFT"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendNFT(System.String,VEDriversLite.NFT.INFT,System.Boolean,System.Double)">
            <summary>
            Send input NFT to new owner, or use it just for price write and resend it to yourself with new metadata about the price.
            </summary>
            <param name="receiver">If the pricewrite is set, this is filled with own address</param>
            <param name="NFT"></param>
            <param name="priceWrite">Set this if you need to just write the price to the NFT</param>
            <param name="price">Price must be bigger than 0.0002 NEBL</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.UseNFTTicket(VEDriversLite.NFT.INFT)">
            <summary>
            Write Used flag into NFT Ticket
            </summary>
            <param name="NFT"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendNFTPayment(System.String,VEDriversLite.NFT.INFT)">
            <summary>
            This function will send payment for some specific NFT which is from foreign address.
            </summary>
            <param name="receiver">Receiver - owner of the NFT</param>
            <param name="NFT">NFT what you want to buy</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendAirdrop(System.String,System.String,System.Double,System.Double)">
            <summary>
            This function will send airdrop.
            </summary>
            <param name="receiver">Receiver - owner of the NFT</param>
            <param name="NFT">NFT what you want to buy</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SendCoruzantNFT(System.String,VEDriversLite.NFT.INFT,System.Boolean,System.String)">
            <summary>
            Add comment to Coruzant Post NFT or add comment and send it to new owner
            </summary>
            <param name="receiver">Fill when you want to send to different address</param>
            <param name="NFT"></param>
            <param name="commentWrite">Set this if you need to just write the comment to the NFT</param>
            <param name="comment">Add your comment</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.SignMessage(System.String)">
            <summary>
            Sign custom message with use of account Private Key
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.VerifyMessage(System.String,System.String,System.String)">
            <summary>
            Verify message which was signed by some address.
            </summary>
            <param name="message">Input message</param>
            <param name="signature">Signature of this message created by owner of some address.</param>
            <param name="address">Neblio address which should sign the message and should be verified.</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.GetNFTVerifyCode(System.String)">
            <summary>
            Obtain verify code of some transaction. This will combine txid and UTC time (rounded to minutes) and sign with the private key.
            It will create unique code, which can be verified and it is valid just one minute.
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAccount.GetNFTVerifyQRCode(System.String)">
            <summary>
            Verification function for the NFT ownership code generated by GetNFTVerifyCode function.
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenIdAsync(System.String)">
            <summary>Returns the tokenId representing a token</summary>
            <param name="tokensymbol">Token symbol</param>
            <returns>Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenIdAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns the tokenId representing a token</summary>
            <param name="tokensymbol">Token symbol</param>
            <returns>Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.BroadcastTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.BroadcastTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressInfoAsync(System.String)">
            <summary>Information On a Neblio Address</summary>
            <param name="address">Neblio Address to get information on.</param>
            <returns>An object with an array of UTXOs for this address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On a Neblio Address</summary>
            <param name="address">Neblio Address to get information on.</param>
            <returns>An object with an array of UTXOs for this address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTransactionInfoAsync(System.String)">
            <summary>Information On an NTP1 Transaction</summary>
            <param name="txid">Neblio txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTransactionInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On an NTP1 Transaction</summary>
            <param name="txid">Neblio txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenMetadataAsync(System.String,System.Nullable{System.Double})">
            <summary>Get Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenMetadataAsync(System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenMetadataOfUtxoAsync(System.String,System.String,System.Nullable{System.Double})">
            <summary>Get UTXO Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="utxo">Specific UTXO to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token for a UTXO</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenMetadataOfUtxoAsync(System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get UTXO Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="utxo">Specific UTXO to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token for a UTXO</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenHoldersAsync(System.String)">
            <summary>Get Addresses Holding a Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <returns>An object containing all of the addresses holding a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTokenHoldersAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Addresses Holding a Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <returns>An object containing all of the addresses holding a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.IssueTokenAsync(VEDriversLite.NeblioAPI.IssueTokenRequest)">
            <summary>Builds a transaction that issues a new NTP1 Token</summary>
            <returns>An object representing the token created</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.IssueTokenAsync(VEDriversLite.NeblioAPI.IssueTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that issues a new NTP1 Token</summary>
            <returns>An object representing the token created</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.SendTokenAsync(VEDriversLite.NeblioAPI.SendTokenRequest)">
            <summary>Builds a transaction that sends an NTP1 Token</summary>
            <returns>An object representing the tx to send the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.SendTokenAsync(VEDriversLite.NeblioAPI.SendTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that sends an NTP1 Token</summary>
            <returns>An object representing the tx to send the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.BurnTokenAsync(VEDriversLite.NeblioAPI.BurnTokenRequest)">
            <summary>Builds a transaction that burns an NTP1 Token</summary>
            <returns>An object representing the tx to burn the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.BurnTokenAsync(VEDriversLite.NeblioAPI.BurnTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that burns an NTP1 Token</summary>
            <returns>An object representing the tx to burn the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.SendTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network (not NTP1 specific)</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.SendTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network (not NTP1 specific)</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetBlockAsync(System.String)">
            <summary>Returns information regarding a Neblio block</summary>
            <param name="blockhash">Block Hash</param>
            <returns>Object containing all information on a blockchain block</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetBlockAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns information regarding a Neblio block</summary>
            <param name="blockhash">Block Hash</param>
            <returns>Object containing all information on a blockchain block</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetBlockIndexAsync(System.Double)">
            <summary>Returns block hash of block</summary>
            <param name="blockindex">Block Index</param>
            <returns>Object containing block hash</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetBlockIndexAsync(System.Double,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns block hash of block</summary>
            <param name="blockindex">Block Index</param>
            <returns>Object containing block hash</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTxAsync(System.String)">
            <summary>Returns transaction object</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing transaction info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns transaction object</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing transaction info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetRawTxAsync(System.String)">
            <summary>Returns raw transaction hex</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing raw hex of transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetRawTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns raw transaction hex</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing raw hex of transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressAsync(System.String)">
            <summary>Returns address object</summary>
            <param name="address">Address</param>
            <returns>Object containing address info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address object</summary>
            <param name="address">Address</param>
            <returns>Object containing address info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressBalanceAsync(System.String)">
            <summary>Returns address balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressUnconfirmedBalanceAsync(System.String)">
            <summary>Returns address unconfirmed balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address unconfirmed balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressUnconfirmedBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address unconfirmed balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address unconfirmed balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressTotalReceivedAsync(System.String)">
            <summary>Returns total received by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total received by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressTotalReceivedAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns total received by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total received by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressUtxosAsync(System.String)">
            <summary>Returns all UTXOs at a given address</summary>
            <param name="address">Address</param>
            <returns>UTXOs at an address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressUtxosAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns all UTXOs at a given address</summary>
            <param name="address">Address</param>
            <returns>UTXOs at an address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressTotalSentAsync(System.String)">
            <summary>Returns total sent by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total sent by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetAddressTotalSentAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns total sent by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total sent by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTxsAsync(System.String,System.String,System.Nullable{System.Double})">
            <summary>Get transactions by block or address</summary>
            <param name="address">Address</param>
            <param name="block">Block Hash</param>
            <param name="pageNum">Page number to display</param>
            <returns>List of transactions</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetTxsAsync(System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get transactions by block or address</summary>
            <param name="address">Address</param>
            <param name="block">Block Hash</param>
            <param name="pageNum">Page number to display</param>
            <returns>List of transactions</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetSyncAsync">
            <summary>Get node sync status</summary>
            <returns>Sync Info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetSyncAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get node sync status</summary>
            <returns>Sync Info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetStatusAsync(System.String)">
            <summary>Utility API for calling several blockchain node functions</summary>
            <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash</param>
            <returns>Function Response</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IClient.GetStatusAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Utility API for calling several blockchain node functions</summary>
            <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash</param>
            <returns>Function Response</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.ITestnetClient.GetFaucetAsync(System.String,System.Nullable{System.Double})">
            <summary>Withdraws testnet NEBL to the specified address</summary>
            <param name="address">Your Neblio Testnet Address</param>
            <param name="amount">Amount of NEBL to withdrawal in satoshis</param>
            <returns>Object containing the transaction ID of the withdrawal.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.ITestnetClient.GetFaucetAsync(System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Withdraws testnet NEBL to the specified address</summary>
            <param name="address">Your Neblio Testnet Address</param>
            <param name="amount">Amount of NEBL to withdrawal in satoshis</param>
            <returns>Object containing the transaction ID of the withdrawal.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenIdAsync(System.String)">
            <summary>Returns the tokenId representing a token</summary>
            <param name="tokensymbol">Token symbol</param>
            <returns>Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenIdAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns the tokenId representing a token</summary>
            <param name="tokensymbol">Token symbol</param>
            <returns>Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.BroadcastTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.BroadcastTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressInfoAsync(System.String)">
            <summary>Information On a Neblio Address</summary>
            <param name="address">Neblio Address to get information on.</param>
            <returns>An object with an array of UTXOs for this address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On a Neblio Address</summary>
            <param name="address">Neblio Address to get information on.</param>
            <returns>An object with an array of UTXOs for this address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTransactionInfoAsync(System.String)">
            <summary>Information On an NTP1 Transaction</summary>
            <param name="txid">Neblio txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTransactionInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On an NTP1 Transaction</summary>
            <param name="txid">Neblio txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenMetadataAsync(System.String,System.Nullable{System.Double})">
            <summary>Get Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenMetadataAsync(System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenMetadataOfUtxoAsync(System.String,System.String,System.Nullable{System.Double})">
            <summary>Get UTXO Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="utxo">Specific UTXO to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token for a UTXO</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenMetadataOfUtxoAsync(System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get UTXO Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="utxo">Specific UTXO to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token for a UTXO</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenHoldersAsync(System.String)">
            <summary>Get Addresses Holding a Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <returns>An object containing all of the addresses holding a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTokenHoldersAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Addresses Holding a Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <returns>An object containing all of the addresses holding a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.IssueTokenAsync(VEDriversLite.NeblioAPI.IssueTokenRequest)">
            <summary>Builds a transaction that issues a new NTP1 Token</summary>
            <returns>An object representing the token created</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.IssueTokenAsync(VEDriversLite.NeblioAPI.IssueTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that issues a new NTP1 Token</summary>
            <returns>An object representing the token created</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.SendTokenAsync(VEDriversLite.NeblioAPI.SendTokenRequest)">
            <summary>Builds a transaction that sends an NTP1 Token</summary>
            <returns>An object representing the tx to send the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.SendTokenAsync(VEDriversLite.NeblioAPI.SendTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that sends an NTP1 Token</summary>
            <returns>An object representing the tx to send the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.BurnTokenAsync(VEDriversLite.NeblioAPI.BurnTokenRequest)">
            <summary>Builds a transaction that burns an NTP1 Token</summary>
            <returns>An object representing the tx to burn the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.BurnTokenAsync(VEDriversLite.NeblioAPI.BurnTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that burns an NTP1 Token</summary>
            <returns>An object representing the tx to burn the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.SendTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network (not NTP1 specific)</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.SendTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network (not NTP1 specific)</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetBlockAsync(System.String)">
            <summary>Returns information regarding a Neblio block</summary>
            <param name="blockhash">Block Hash</param>
            <returns>Object containing all information on a blockchain block</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetBlockAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns information regarding a Neblio block</summary>
            <param name="blockhash">Block Hash</param>
            <returns>Object containing all information on a blockchain block</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetBlockIndexAsync(System.Double)">
            <summary>Returns block hash of block</summary>
            <param name="blockindex">Block Index</param>
            <returns>Object containing block hash</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetBlockIndexAsync(System.Double,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns block hash of block</summary>
            <param name="blockindex">Block Index</param>
            <returns>Object containing block hash</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTxAsync(System.String)">
            <summary>Returns transaction object</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing transaction info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns transaction object</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing transaction info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetRawTxAsync(System.String)">
            <summary>Returns raw transaction hex</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing raw hex of transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetRawTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns raw transaction hex</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing raw hex of transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressAsync(System.String)">
            <summary>Returns address object</summary>
            <param name="address">Address</param>
            <returns>Object containing address info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address object</summary>
            <param name="address">Address</param>
            <returns>Object containing address info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressBalanceAsync(System.String)">
            <summary>Returns address balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressUnconfirmedBalanceAsync(System.String)">
            <summary>Returns address unconfirmed balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address unconfirmed balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressUnconfirmedBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address unconfirmed balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address unconfirmed balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressTotalReceivedAsync(System.String)">
            <summary>Returns total received by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total received by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressTotalReceivedAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns total received by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total received by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressUtxosAsync(System.String)">
            <summary>Returns all UTXOs at a given address</summary>
            <param name="address">Address</param>
            <returns>UTXOs at an address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressUtxosAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns all UTXOs at a given address</summary>
            <param name="address">Address</param>
            <returns>UTXOs at an address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressTotalSentAsync(System.String)">
            <summary>Returns total sent by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total sent by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetAddressTotalSentAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns total sent by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total sent by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTxsAsync(System.String,System.String,System.Nullable{System.Double})">
            <summary>Get transactions by block or address</summary>
            <param name="address">Address</param>
            <param name="block">Block Hash</param>
            <param name="pageNum">Page number to display</param>
            <returns>List of transactions</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetTxsAsync(System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get transactions by block or address</summary>
            <param name="address">Address</param>
            <param name="block">Block Hash</param>
            <param name="pageNum">Page number to display</param>
            <returns>List of transactions</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetSyncAsync">
            <summary>Get node sync status</summary>
            <returns>Sync Info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetSyncAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get node sync status</summary>
            <returns>Sync Info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetStatusAsync(System.String)">
            <summary>Utility API for calling several blockchain node functions</summary>
            <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash</param>
            <returns>Function Response</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.Client.GetStatusAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Utility API for calling several blockchain node functions</summary>
            <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash</param>
            <returns>Function Response</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.SendTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network (not NTP1 specific)</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.SendTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network (not NTP1 specific)</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetBlockAsync(System.String)">
            <summary>Returns information regarding a Neblio block</summary>
            <param name="blockhash">Block Hash</param>
            <returns>Object containing all information on a blockchain block</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetBlockAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns information regarding a Neblio block</summary>
            <param name="blockhash">Block Hash</param>
            <returns>Object containing all information on a blockchain block</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetBlockIndexAsync(System.Double)">
            <summary>Returns block hash of block</summary>
            <param name="blockindex">Block Index</param>
            <returns>Object containing block hash</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetBlockIndexAsync(System.Double,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns block hash of block</summary>
            <param name="blockindex">Block Index</param>
            <returns>Object containing block hash</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTxAsync(System.String)">
            <summary>Returns transaction object</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing transaction info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns transaction object</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing transaction info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetRawTxAsync(System.String)">
            <summary>Returns raw transaction hex</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing raw hex of transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetRawTxAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns raw transaction hex</summary>
            <param name="txid">Transaction ID</param>
            <returns>Object containing raw hex of transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressAsync(System.String)">
            <summary>Returns address object</summary>
            <param name="address">Address</param>
            <returns>Object containing address info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address object</summary>
            <param name="address">Address</param>
            <returns>Object containing address info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressBalanceAsync(System.String)">
            <summary>Returns address balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressUnconfirmedBalanceAsync(System.String)">
            <summary>Returns address unconfirmed balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address unconfirmed balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressUnconfirmedBalanceAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns address unconfirmed balance in sats</summary>
            <param name="address">Address</param>
            <returns>Address unconfirmed balance</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressTotalReceivedAsync(System.String)">
            <summary>Returns total received by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total received by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressTotalReceivedAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns total received by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total received by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressUtxosAsync(System.String)">
            <summary>Returns all UTXOs at a given address</summary>
            <param name="address">Address</param>
            <returns>UTXOs at an address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressUtxosAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns all UTXOs at a given address</summary>
            <param name="address">Address</param>
            <returns>UTXOs at an address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressTotalSentAsync(System.String)">
            <summary>Returns total sent by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total sent by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressTotalSentAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns total sent by address in sats</summary>
            <param name="address">Address</param>
            <returns>Total sent by address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTxsAsync(System.String,System.String,System.Nullable{System.Double})">
            <summary>Get transactions by block or address</summary>
            <param name="address">Address</param>
            <param name="block">Block Hash</param>
            <param name="pageNum">Page number to display</param>
            <returns>List of transactions</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTxsAsync(System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get transactions by block or address</summary>
            <param name="address">Address</param>
            <param name="block">Block Hash</param>
            <param name="pageNum">Page number to display</param>
            <returns>List of transactions</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetSyncAsync">
            <summary>Get node sync status</summary>
            <returns>Sync Info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetSyncAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get node sync status</summary>
            <returns>Sync Info</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetStatusAsync(System.String)">
            <summary>Utility API for calling several blockchain node functions</summary>
            <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash</param>
            <returns>Function Response</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetStatusAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Utility API for calling several blockchain node functions</summary>
            <param name="q">Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash</param>
            <returns>Function Response</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenIdAsync(System.String)">
            <summary>Returns the tokenId representing a token</summary>
            <param name="tokensymbol">Token symbol</param>
            <returns>Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenIdAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns the tokenId representing a token</summary>
            <param name="tokensymbol">Token symbol</param>
            <returns>Object containing the token symbol and ID, if token symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.BroadcastTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.BroadcastTxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Broadcasts a signed raw transaction to the network</summary>
            <returns>An object containing the TXID if the broadcast was successful</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressInfoAsync(System.String)">
            <summary>Information On a Neblio Address</summary>
            <param name="address">Neblio Address to get information on.</param>
            <returns>An object with an array of UTXOs for this address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetAddressInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On a Neblio Address</summary>
            <param name="address">Neblio Address to get information on.</param>
            <returns>An object with an array of UTXOs for this address</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTransactionInfoAsync(System.String)">
            <summary>Information On an NTP1 Transaction</summary>
            <param name="txid">Neblio txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTransactionInfoAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Information On an NTP1 Transaction</summary>
            <param name="txid">Neblio txid to get information on.</param>
            <returns>An object represending this transaction</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenMetadataAsync(System.String,System.Nullable{System.Double})">
            <summary>Get Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenMetadataAsync(System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenMetadataOfUtxoAsync(System.String,System.String,System.Nullable{System.Double})">
            <summary>Get UTXO Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="utxo">Specific UTXO to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token for a UTXO</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenMetadataOfUtxoAsync(System.String,System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get UTXO Metadata of Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <param name="utxo">Specific UTXO to request metadata for</param>
            <param name="verbosity">0 (Default) is fastest, 1 contains token stats, 2 contains token holding addresses</param>
            <returns>An object containing the metadata of a token for a UTXO</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenHoldersAsync(System.String)">
            <summary>Get Addresses Holding a Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <returns>An object containing all of the addresses holding a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetTokenHoldersAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get Addresses Holding a Token</summary>
            <param name="tokenid">TokenId to request metadata for</param>
            <returns>An object containing all of the addresses holding a token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.IssueTokenAsync(VEDriversLite.NeblioAPI.IssueTokenRequest)">
            <summary>Builds a transaction that issues a new NTP1 Token</summary>
            <returns>An object representing the token created</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.IssueTokenAsync(VEDriversLite.NeblioAPI.IssueTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that issues a new NTP1 Token</summary>
            <returns>An object representing the token created</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.SendTokenAsync(VEDriversLite.NeblioAPI.SendTokenRequest)">
            <summary>Builds a transaction that sends an NTP1 Token</summary>
            <returns>An object representing the tx to send the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.SendTokenAsync(VEDriversLite.NeblioAPI.SendTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that sends an NTP1 Token</summary>
            <returns>An object representing the tx to send the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.BurnTokenAsync(VEDriversLite.NeblioAPI.BurnTokenRequest)">
            <summary>Builds a transaction that burns an NTP1 Token</summary>
            <returns>An object representing the tx to burn the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.BurnTokenAsync(VEDriversLite.NeblioAPI.BurnTokenRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Builds a transaction that burns an NTP1 Token</summary>
            <returns>An object representing the tx to burn the token</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetFaucetAsync(System.String,System.Nullable{System.Double})">
            <summary>Withdraws testnet NEBL to the specified address</summary>
            <param name="address">Your Neblio Testnet Address</param>
            <param name="amount">Amount of NEBL to withdrawal in satoshis</param>
            <returns>Object containing the transaction ID of the withdrawal.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.TestnetClient.GetFaucetAsync(System.String,System.Nullable{System.Double},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Withdraws testnet NEBL to the specified address</summary>
            <param name="address">Your Neblio Testnet Address</param>
            <param name="amount">Amount of NEBL to withdrawal in satoshis</param>
            <returns>Object containing the transaction ID of the withdrawal.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IJsonClient.RpcAsync(VEDriversLite.NeblioAPI.RpcRequest)">
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.IJsonClient.RpcAsync(VEDriversLite.NeblioAPI.RpcRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.JsonClient.RpcAsync(VEDriversLite.NeblioAPI.RpcRequest)">
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.NeblioAPI.JsonClient.RpcAsync(VEDriversLite.NeblioAPI.RpcRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Send a JSON-RPC call to a localhost neblio-Qt or nebliod node</summary>
            <returns>Object containing the JSON response from the Neblio node.</returns>
            <exception cref="T:VEDriversLite.NeblioAPI.ApiException">A server side error occurred.</exception>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenIdResponse.TokenId">
            <summary>Unique ID of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenIdResponse.TokenName">
            <summary>String representing the token Symbol</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BroadcastTxRequest.TxHex">
            <summary>Signed raw tx hex to broadcast</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BroadcastTxResponse.Txid">
            <summary>Txid of successfully broadcasted transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressInfoResponse.Address">
            <summary>The Neblio Address</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressInfoResponse.Utxos">
            <summary>Array of UTXOs held at this address.</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Hex">
            <summary>Transaction in raw hex</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Txid">
            <summary>TXID of transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Version">
            <summary>Transaction version</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Locktime">
            <summary>Transaction locktime</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Vin">
            <summary>Array of transaction inputs</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Vout">
            <summary>Array of transaction outputs</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Blocktime">
            <summary>Block time of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Blockheight">
            <summary>Block height of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Totalsent">
            <summary>Total NEBL sent in this transaction in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Fee">
            <summary>Total NEBL used as fee for this transcation in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Blockhash">
            <summary>Hash of the block this transaction is in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Time">
            <summary>Transaction time</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTransactionInfoResponse.Confirmations">
            <summary>Number of transaction confirmations</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.TokenId">
            <summary>ID of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.TokenName">
            <summary>ID of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.SomeUtxo">
            <summary>Example UTXO containing this token.</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.Divisibility">
            <summary>Decimal places the token is divisible to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.LockStatus">
            <summary>Whether issuance of more tokens is locked</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.AggregationPolicy">
            <summary>Whether the tokens are aggregatable</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.InitialIssuanceAmount">
            <summary>Total tokens issued in initial issuance</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.TotalSupply">
            <summary>Total number of tokens in supply</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.NumOfHolders">
            <summary>Total number of addresses this token is held at</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.NumOfTransfers">
            <summary>Total number of transactions of this token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.NumOfIssuance">
            <summary>Total number of times this token has been issued</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.NumOfBurns">
            <summary>Number of times tokens have been burned</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.FirstBlock">
            <summary>Block number token was issued in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.IssuanceTxid">
            <summary>TXID the token was issued with</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.IssueAddress">
            <summary>Address that issued the tokens</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.MetadataOfIssuance">
            <summary>Metadata set at issuance</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenMetadataResponse.MetadataOfUtxo">
            <summary>Metadata set for UTXO</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenHoldersResponse.TokenId">
            <summary>TokenId of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenHoldersResponse.Divibility">
            <summary>How many decimal points the token is divisble to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenHoldersResponse.LockStatus">
            <summary>Whether new issuances of this token are locked</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenHoldersResponse.AggregationPolicy">
            <summary>Whether the tokesn are aggregatable</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTokenHoldersResponse.SomeUtxo">
            <summary>A UTXO of this token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.IssueAddress">
            <summary>Address issuing the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.Amount">
            <summary>Number of tokens to issue</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.Divisibility">
            <summary>Number of decimal places the token should be divisble by (0-7)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.Fee">
            <summary>Fee in satoshi to include in the issuance transaction min 1000000000 (10 NEBL)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.Reissuable">
            <summary>whether the token should be reissuable</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.Flags">
            <summary>Object representing flags that potentialy modify this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenRequest.Metadata">
            <summary>Object representing all metadata at token issuance</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenResponse.TokenId">
            <summary>TokenId of the to be issued token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.IssueTokenResponse.TxHex">
            <summary>Unsigned, raw transaction hex of the transaction to issue the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenRequest.Fee">
            <summary>Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenRequest.From">
            <summary>Array of addresses to send the token from</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenRequest.Sendutxo">
            <summary>Array of UTXOs to send the token from</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenRequest.Flags">
            <summary>Object representing flags that potentialy modify this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenRequest.Metadata">
            <summary>Object representing all metadata at token issuance</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenResponse.TxHex">
            <summary>Unsigned, raw transaction hex of the transaction to send the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenResponse.Ntp1OutputIndexes">
            <summary>Array of indexes transfering NTP1 tokens</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTokenResponse.MultisigOutputs">
            <summary>Array of indexes of multisig outputs</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BurnTokenRequest.Fee">
            <summary>Fee in satoshi to include in the issuance transaction min 10000 (0.0001 NEBL)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BurnTokenRequest.From">
            <summary>Array of addresses to send the token from</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BurnTokenRequest.Burn">
            <summary>Array of objects representing tokens to be burned</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BurnTokenResponse.TxHex">
            <summary>Unsigned, raw transaction hex of the transaction to burn the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BurnTokenResponse.Ntp1OutputIndexes">
            <summary>Array of indexes transfering NTP1 tokens</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.BurnTokenResponse.MultisigOutputs">
            <summary>Array of indexes of multisig outputs</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetFaucetResponse.Status">
            <summary>Whether the withdrawal was successful</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.SendTxRequest.TxHex">
            <summary>Signed raw tx hex to broadcast</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Hash">
            <summary>Block hash</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Confirmations">
            <summary>Number of confirmations block has</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Size">
            <summary>Block size in bytes</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Height">
            <summary>Block height</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Version">
            <summary>Block version</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Merkleroot">
            <summary>Merkleroot of block</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Tx">
            <summary>Array of tx ids in the block</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Time">
            <summary>Block time relative to epoch</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Nonce">
            <summary>Block nonce</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Bits">
            <summary>Block bits</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Difficulty">
            <summary>Block difficulty</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Previousblockhash">
            <summary>Hash of the previous block on the chain</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Nextblockhash">
            <summary>Hash of the next block on the chain</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockResponse.Reward">
            <summary>Number of NEBL awarded in this block</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetBlockIndexResponse.BlockHash">
            <summary>Hash of the requested block</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Txid">
            <summary>TXID of transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Version">
            <summary>Transaction version</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Locktime">
            <summary>Transaction locktime</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Vin">
            <summary>Array of transaction inputs</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Vout">
            <summary>Array of transaction outputs</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Blocktime">
            <summary>Block time of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Blockheight">
            <summary>Block height of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Totalsent">
            <summary>Total NEBL sent in this transaction in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Fee">
            <summary>Total NEBL used as fee for this transcation in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Blockhash">
            <summary>Hash of the block this transaction is in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Time">
            <summary>Transaction time</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Confirmations">
            <summary>Number of transaction confirmations</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.ValueOut">
            <summary>Total NEBL output in this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.ValueIn">
            <summary>Total NEBL input in this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Fees">
            <summary>Total NEBL used in fees for this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxResponse.Size">
            <summary>Transcation size in bytes</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetRawTxResponse.Rawtx">
            <summary>Raw hex representing the transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.AddrStr">
            <summary>Address in string form</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.Balance">
            <summary>NEBL balance</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.BalanceSat">
            <summary>NEBL balance in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.TotalReceived">
            <summary>Total NEBL received</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.TotalReceivedSat">
            <summary>Total NEBL received in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.TotalSent">
            <summary>Total NEBL sent</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.TotalSentSat">
            <summary>Total NEBL sent satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.UnconfirmedBalance">
            <summary>Unconfirmed NEBL balance</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.UnconfirmedBalanceSat">
            <summary>Unconfirmed NEBL balance in satoshis</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.UnconfirmedTxAppearances">
            <summary>Number of unconfirmed transactions for this address</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.TxAppearances">
            <summary>Number of transactions for this address</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetAddressResponse.Transactions">
            <summary>Array of transaction ids for this address</summary>
        </member>
        <member name="T:VEDriversLite.NeblioAPI.GetAddressUtxosResponse">
            <summary>Array of objects representing this address' UTXOs</summary>
        </member>
        <member name="T:VEDriversLite.NeblioAPI.GetTxsResponse">
            <summary>Object containing an array of transaction objects</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxsResponse.PagesTotal">
            <summary>Number of pages of transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetTxsResponse.Txs">
            <summary>Array of transaction objects</summary>
        </member>
        <member name="T:VEDriversLite.NeblioAPI.GetSyncResponse">
            <summary>Object containing node sync status</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetSyncResponse.Status">
            <summary>Current sync status</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetSyncResponse.BlockChainHeight">
            <summary>Current blockchain height</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetSyncResponse.SyncPercentage">
            <summary>Current sync percentage</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetSyncResponse.Height">
            <summary>Height node is synced to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetSyncResponse.Error">
            <summary>Recent sync error messages</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.GetSyncResponse.Type">
            <summary>Node type</summary>
        </member>
        <member name="T:VEDriversLite.NeblioAPI.GetStatusResponse">
            <summary>Depending on the function called, the structure and information contained in this object will vary</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcRequest.Jsonrpc">
            <summary>JSON-RPC version</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcRequest.Id">
            <summary>Identifier of RCP caller</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcRequest.Method">
            <summary>Name of the Neblio RPC method to call</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcRequest.Params">
            <summary>Array of string params that should be passed to the RPC method.</summary>
        </member>
        <member name="T:VEDriversLite.NeblioAPI.RpcResponse">
            <summary>Object containing the JSON response from the Neblio node.</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcResponse.Result">
            <summary>Object containing the response output.</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcResponse.Id">
            <summary>Identifier of RCP caller</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.RpcResponse.Error">
            <summary>Object containing any error information.</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.Address">
            <summary>Address</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.Txid">
            <summary>Transaction ID</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.Vout">
            <summary>vout</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.Ts">
            <summary>Timestamp</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.ScriptPubKey">
            <summary>scriptPubKey</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.Amount">
            <summary>NEBL amount</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Anonymous.Confirmations">
            <summary>Number of confirmations</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Index">
            <summary>Index of the UTXO at this address</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Txid">
            <summary>Txid of this UTXO</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Blockheight">
            <summary>Blockheight of the UTXO</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Blocktime">
            <summary>Blocktime of the UTXO</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.ScriptPubKey">
            <summary>Object representing the scruptPubKey of the UTXO</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Used">
            <summary>Whether the UTXO has been used</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Value">
            <summary>Value of the UTXO in NEBL satoshi</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Utxos.Tokens">
            <summary>Array of NTP1 tokens in this UTXO.</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin.Txid">
            <summary>TXID of the input</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin.Vout">
            <summary>output index</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin.Value">
            <summary>Value of input in NEBL satoshi</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin.ValueSat">
            <summary>Value of input in NEBL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout.Value">
            <summary>Value of the output in NEBL satoshi</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout.N">
            <summary>Output index</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout.Used">
            <summary>Whether this output has now been used</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout.Blockheight">
            <summary>Blockheight of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout.UsedBlockheight">
            <summary>Blockheight this output was used in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout.UsedTxid">
            <summary>TXID this output was used in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.MetadataOfUtxo.UserData">
            <summary>Metadata set by user on token for UTXO</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Flags.SplitChange">
            <summary>If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Transfer.Address">
            <summary>Address to send the amount of issued tokens to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata.TokenName">
            <summary>Token Symbol it will be identified by (ex. NIBBL)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata.Issuer">
            <summary>Name of token issuer</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata.Description">
            <summary>Long name or description of token (ex. Nibble)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata.UserData">
            <summary>Metadata set by user on token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata.Encryptions">
            <summary>Array of encryption instruction objects for encrypting userData</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata.Rules">
            <summary>Object describing token rules</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.To.Address">
            <summary>Address to transfer tokens to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.To.Amount">
            <summary>Number of tokens to send</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.To.TokenId">
            <summary>ID of token we are sending</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Flags2.SplitChange">
            <summary>If true change will be split into 2 outputs, one for NEBL change and one for NTP1 change (recommended)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata2.TokenName">
            <summary>Token Symbol it will be identified by (ex. NIBBL)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata2.Issuer">
            <summary>Name of token issuer</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata2.Description">
            <summary>Long name or description of token (ex. Nibble)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata2.UserData">
            <summary>Metadata set by user on token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata2.Encryptions">
            <summary>Array of encryption instruction objects for encrypting userData</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Metadata2.Rules">
            <summary>Object describing token rules</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Transfer2.Address">
            <summary>Address to transfer tokens to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Transfer2.Amount">
            <summary>Number of tokens to send</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Transfer2.TokenId">
            <summary>ID of token we are sending</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Burn.Amount">
            <summary>Amount of tokens to burn</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Burn.TokenId">
            <summary>Unique token id we are burning</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Data.TxId">
            <summary>TXID of a successful withdrawal</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin2.Txid">
            <summary>TXID of the input</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin2.Vout">
            <summary>output index</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin2.Value">
            <summary>Value of input in NEBL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin2.ValueSat">
            <summary>Value of input in NEBL satoshi</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vin2.N">
            <summary>input index</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout2.Value">
            <summary>Value of the output in NEBL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout2.N">
            <summary>Output index</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout2.Used">
            <summary>Whether this output has now been used</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout2.Blockheight">
            <summary>Blockheight of this transaction</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout2.UsedBlockheight">
            <summary>Blockheight this output was used in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Vout2.UsedTxid">
            <summary>TXID this output was used in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens.TokenId">
            <summary>Unique NTP1 identifier for this token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens.Amount">
            <summary>Number of Tokens</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens.IssueTxid">
            <summary>TXID the token originally was issued in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens.Divisibility">
            <summary>Decimal places the token is divisible to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens.LockStatus">
            <summary>Whether the token is locked, preventing more from being issued</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens.AggregationPolicy">
            <summary>Whether the tokens can be aggregated together</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens2.TokenId">
            <summary>ID of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens2.Amount">
            <summary>Number of tokens</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens2.IssueTxid">
            <summary>TXID the token was issued in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens2.Divisibility">
            <summary>Decimal places the token is divisible to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens2.LockStatus">
            <summary>Whether issuance of more tokens is locked</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens2.AggregationPolicy">
            <summary>Whether the tokens are aggregatable</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens3.TokenId">
            <summary>ID of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens3.Amount">
            <summary>Number of tokens</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens3.IssueTxid">
            <summary>TXID the token was issued in</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens3.Divisibility">
            <summary>Decimal places the token is divisible to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens3.LockStatus">
            <summary>Whether issuance of more tokens is locked</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Tokens3.AggregationPolicy">
            <summary>Whether the tokens are aggregatable</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Data2.TokenName">
            <summary>Token symbol</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Data2.Issuer">
            <summary>Name of token issuer</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Data2.Urls">
            <summary>Urls</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Data2.Description">
            <summary>Token description</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Data2.UserData">
            <summary>Metadata set by user on token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls.Name">
            <summary>Name of the URL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls.Url">
            <summary>Actual URL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls.MimeType">
            <summary>mimeType of URL content</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls.DataHash">
            <summary>Hash of data at the URL, used for verification</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions.Key">
            <summary>userData key to encrypt</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions.Pubkey">
            <summary>RSA public key used for encryption</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions.Format">
            <summary>key format (pem or der)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions.Type">
            <summary>pkcs1 or pkcs8</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Rules.Holders">
            <summary>Array of objects describing what addresses can hold the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Rules.Expiration">
            <summary>Object describing expiration rules of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls2.Name">
            <summary>Name of the URL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls2.Url">
            <summary>Actual URL</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls2.MimeType">
            <summary>mimeType of URL content</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Urls2.DataHash">
            <summary>Hash of data at the URL, used for verification</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions2.Key">
            <summary>userData key to encrypt</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions2.Pubkey">
            <summary>RSA public key used for encryption</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions2.Format">
            <summary>key format (pem or der)</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Encryptions2.Type">
            <summary>pkcs1 or pkcs8</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Rules2.Holders">
            <summary>Array of objects describing what addresses can hold the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Rules2.Expiration">
            <summary>Object describing expiration rules of the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Fees.Items">
            <summary>Array of objects describing fee rules</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Fees.Locked">
            <summary>Whether this rule can be modified in future transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Holders2.Address">
            <summary>Address that can hold the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Holders2.Locked">
            <summary>Whether this rule can be modified in future transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Expiration.ValidUntil">
            <summary>Blockheight at wh</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Expiration.Locked">
            <summary>Whether this rule can be modified in future transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Fees2.Items">
            <summary>Array of objects describing fee rules</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Fees2.Locked">
            <summary>Whether this rule can be modified in future transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Holders3.Address">
            <summary>Address that can hold the token</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Holders3.Locked">
            <summary>Whether this rule can be modified in future transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Expiration2.ValidUntil">
            <summary>Blockheight at wh</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Expiration2.Locked">
            <summary>Whether this rule can be modified in future transactions</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Items.Address">
            <summary>Address fee is auto sent to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Items.TokenId">
            <summary>How fee should be paid, either with a tokenId, or with NEBL if null</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Items.Value">
            <summary>Amount of NTP1 token, or NEBL (in satoshi) to pay as fee</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Items2.Address">
            <summary>Address fee is auto sent to</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Items2.TokenId">
            <summary>How fee should be paid, either with a tokenId, or with NEBL if null</summary>
        </member>
        <member name="P:VEDriversLite.NeblioAPI.Items2.Value">
            <summary>Amount of NTP1 token, or NEBL (in satoshi) to pay as fee</summary>
        </member>
        <member name="T:VEDriversLite.TokenSupplyDto">
            <summary>
            Dto for info about actual Token supply on address
            </summary>
        </member>
        <member name="T:VEDriversLite.TokenOwnerDto">
            <summary>
            Dto for info about owner of some kind of the tokens
            </summary>
        </member>
        <member name="T:VEDriversLite.NeblioAPIScripPubKeyDto">
            <summary>
            Dto for serialization of response from Neblio API
            </summary>
        </member>
        <member name="T:VEDriversLite.SignResultDto">
            <summary>
            Dto for serialization of response from Neblio API
            </summary>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.ShortenAddress(System.String)">
            <summary>
            Create short version of address, 3 chars on start...3 chars on end
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.ShortenTxId(System.String)">
            <summary>
            Create short version of txid hash, 3 chars on start...3 chars on end
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey(VEDriversLite.Security.EncryptionKey,System.String)">
            <summary>
            Function converts EncryptionKey (optionaly with password if it is not already loaded in ekey)
            and returns BitcoinAddress and BitcoinSecret classes from NBitcoin
            </summary>
            <param name="ekey"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction(System.String)">
            <summary>
            Function will take hex of signed transaction and broadcast it via Neblio API
            </summary>
            <param name="txhex"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject(System.Double,System.Double,System.String,System.String)">
            <summary>
            Function prepares SendTokenRequest object. It is important to initialitze correct inside properties
            </summary>
            <param name="amount">Amount to send</param>
            <param name="fee">Fee - min 10000, with metadata you need at least 20000</param>
            <param name="receiver">Receiver of the amount</param>
            <param name="tokenId">Token Id hash</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetUtxoListForTx(System.String,System.String,System.Double,System.Collections.Generic.ICollection{System.String},System.String,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Function will obtain correct Utxos for token transaction
            Older version, not recommended to use now
            </summary>
            <param name="address">Account address - sender</param>
            <param name="tokenId">Token Id hash</param>
            <param name="amount">Amount to send</param>
            <param name="tokenUtxos">you can add own input utxos it can contain info about indes separated by ':' or doesnt</param>
            <param name="inputNeblUtxo">you can add input Neblio utxo. It is need for the fee</param>
            <param name="fee">Fee for the tx. 10000 is minimum, 20000 for token with metadata</param>
            <param name="isItMintNFT">if you set this true you must provide input token utxo which is not verified again</param>
            <param name="isNFTtx">if you sending NFT - 1 token - you need to set this to run correct verifying function</param>
            <param name="sendEvenNeblUtxoNotFound">if you set this and provide neblio utxo which is not valid, another is searched and used if it is available</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will Mint NFT from lot of the tokens
            </summary>
            <param name="data">Mint data, please see MintNFTData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="tutxos">Optional input token utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will Mint NFT with the coppies
            </summary>
            <param name="data">Mint data, please see MintNFTData class for the details</param>
            <param name="coppies">0 or more coppies - with 0 input it is same as MintNFTTokenAsync</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="tutxos">Optional input token utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SplitNTP1TokensAsync(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.String,System.Collections.Generic.IDictionary{System.String,System.String},VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will Split NTP1 tokens to smaller lots
            receiver list - If you input 0, split will be done to sender address, if you input 1 receiver split will be done to receiver (all inputs)
            if you will provide multiple receivers, the number of lots and receivers must match.
            </summary>
            <param name="receiver">List of receivers. </param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="tutxos">Optional input token utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will sent exact NFT. 
            You must fill the input token utxo in data object!
            </summary>
            <param name="data">Send data, please see SendTokenTxData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will send lot of tokens (means more than 1) to some address
            </summary>
            <param name="data">Send data, please see SendtokenTxTData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="tutxos">Optional input token utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will send standard Neblio transaction
            </summary>
            <param name="data">Send data, please see SendTxData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="fee">Fee - 10000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SplitNeblioCoinTransactionAPIAsync(System.String,System.Collections.Generic.List{System.String},System.Int32,System.Double,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            Function will send standard Neblio transaction
            </summary>
            <param name="data">Send data, please see SendTxData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="fee">Fee - 10000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Double,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            This function will send Neblio payment together with the token whichc carry some metadata
            </summary>
            <param name="data">Mint data, please see MintNFTData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="neblAmount">Amount of Neblio to send</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenLotWithPaymentAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Double,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            This function will send Neblio payment together with the token whichc carry some metadata
            </summary>
            <param name="data">Mint data, please see MintNFTData class for the details</param>
            <param name="ekey">Input EncryptionKey of the account</param>
            <param name="neblAmount">Amount of Neblio to send</param>
            <param name="nutxos">Optional input neblio utxo</param>
            <param name="fee">Fee - 20000 minimum</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SignAndBroadcast(NBitcoin.Transaction,NBitcoin.BitcoinSecret,NBitcoin.BitcoinAddress)">
            <summary>
            Function will sign transaction with provided key and broadcast with Neblio API
            </summary>
            <param name="transaction">NBitcoin Transaction object</param>
            <param name="key">NBitcoin Key - must contain Private Key</param>
            <param name="address">NBitcoin address - must match with the provided key</param>
            <returns>New Transaction Hash - TxId</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetClient">
            <summary>
            Returns private client for Neblio API. If it is null, it will create new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync(VEDriversLite.NeblioAPI.SendTokenRequest)">
            <summary>
            Send request for creating RAW token transaction
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)">
            <summary>
            Broadcast of signed transaction. Works for Neblio and Token transactions.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync(System.String)">
            <summary>
            Return Address info object. Contains list of all transactions
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync(System.String)">
            <summary>
            Return address info object. this object contains list of Utxos.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos(System.String)">
            <summary>
            Return list of address utxos.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects(System.String)">
            <summary>
            Return list of Utxos object.
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)">
            <summary>
            Returns list of all Utxos which contains some tokens
            </summary>
            <param name="addr"></param>
            <param name="addressinfo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTxHex(System.String)">
            <summary>
            Return transaction Hex
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos(System.String,System.Collections.Generic.List{System.String},VEDriversLite.NeblioAPI.GetAddressInfoResponse)">
            <summary>
            Returns list of all Utxos which contains just one token, means amount = 1
            </summary>
            <param name="addr"></param>
            <param name="addressinfo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetSendAmount(VEDriversLite.NeblioAPI.GetTransactionInfoResponse,System.String)">
            <summary>
            Returns sended amount of neblio in some transaction. It counts the outputs which was send to input address
            </summary>
            <param name="tx"></param>
            <param name="address">expected address where was nebl send in this tx</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo(System.String,System.Double,System.Double)">
            <summary>
            Returns list of spendable utxos which together match some input required amount for some transaction
            </summary>
            <param name="addr">address which has utxos for spend - sender in tx</param>
            <param name="minAmount">minimum amount of one utxo</param>
            <param name="requiredAmount">amount what must be collected even by multiple utxos</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo(System.String,System.String)">
            <summary>
            Check if the neblio is spendable.
            </summary>
            <param name="address">address which should have this utxo</param>
            <param name="txid">input txid hash</param>
            <returns>true and index of utxo</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Check if the token utxo is spendable.
            </summary>
            <param name="address">address which should have this utxo</param>
            <param name="txid">input txid hash</param>
            <param name="tokenId">Token Id hash</param>
            <param name="isMint">If it is mint transaction it counts just utxos which has amount bigger than 1 token</param>
            <returns>true and index of utxo</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(System.String,System.String,System.String,System.Int32)">
            <summary>
            Check if the NFT token is spendable. Means utxos with token amount = 1
            </summary>
            <param name="address">address which should have this utxo</param>
            <param name="tokenId">input token id hash</param>
            <param name="txid">input txid hash</param>
            <returns>true and index of utxo</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT(System.String,System.String,System.Int32,System.Double)">
            <summary>
            Find utxo which can be used for minting. It means it has token amount > 1
            </summary>
            <param name="addr">address which has utxos</param>
            <param name="tokenId">token id hash</param>
            <param name="numberToMint">number of tokens which will be minted - because of multimint</param>
            <param name="oneTokenSat">this is usually default. On Neblio all token tx should have value 10000sat</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit(System.String,System.String,System.Int32,System.Double)">
            <summary>
            Find utxo which can be splited to lots. It is specific function which is used to auto splitter (old version, new version will do in in one tx)
            missing number of lots. this is covered by function which use it.
            </summary>
            <param name="addr">address which has utxos</param>
            <param name="tokenId">token id hash</param>
            <param name="lotAmount">amount of tokens in one lot</param>
            <param name="oneTokenSat">this is usually default. On Neblio all token tx should have value 10000sat</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata(System.String,System.String)">
            <summary>
            Returns metadata in the token transction
            </summary>
            <param name="tokenid">token id hash</param>
            <param name="txid">tx id hash</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction(System.String)">
            <summary>
            Find last send transaction by some address.
            This is usefull to obtain address public key from signature of input.
            </summary>
            <param name="address">Searched address</param>
            <returns>NBitcoin Transaction object</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo(System.String)">
            <summary>
            Get transaction info.
            </summary>
            <param name="txid">tx id hash</param>
            <returns>Neblio API GetTransactionInfo object</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTransactionSender(System.String,VEDriversLite.NeblioAPI.GetTransactionInfoResponse)">
            <summary>
            Get transaction sender.
            </summary>
            <param name="txid">tx id hash</param>
            <returns>Sender address</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTransactionReceiver(System.String,VEDriversLite.NeblioAPI.GetTransactionInfoResponse)">
            <summary>
            Get transaction sender.
            </summary>
            <param name="txid">tx id hash</param>
            <returns>Sender address</returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.SplitTheTokens(VEDriversLite.NeblioAccount,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Not recommended to use now. It split tokens to lots, but doing it in separated transactions. Will be changed to do it in one tx soon.
            </summary>
            <param name="account"></param>
            <param name="address"></param>
            <param name="password"></param>
            <param name="tokenId"></param>
            <param name="lotAmount"></param>
            <param name="numberOfLots"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata(System.String)">
            <summary>
            Get token issue metadata. Contains image url, issuer, and other info
            </summary>
            <param name="tokenId">token id hash</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTokenInfo(System.String)">
            <summary>
            Get token info. Contains image url, issuer, and other info
            </summary>
            <param name="tokenId">token id hash</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply(System.String,System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)">
            <summary>
            check actual supply for minting on some address. It is just for VENFT tokens now. 
            Function will also load token metadta if it has not loaded yet.
            </summary>
            <param name="address">address which has utxos</param>
            <param name="addressinfo">if you have already loaded address info with utxo list provide it to prevent unnecessary API requests</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)">
            <summary>
            Check supply of all VENFT tokens on address.
            </summary>
            <param name="address">address which has utxos</param>
            <param name="addressinfo">if you have already loaded address info with utxo list provide it to prevent unnecessary API requests</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NeblioTransactionHelpers.GetTokenOwners(System.String)">
            <summary>
            Return VENFT top owners. It eliminate some testing addresses.
            </summary>
            <param name="tokenId">Token Id hash</param>
            <returns></returns>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.Address">
            <summary>
            Neblio Address hash
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.IsAutoRefreshActive">
            <summary>
            When this flag is set, account reload the Utxos state - inside autorefresh
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.NFTs">
            <summary>
            List of actual address NFTs. Based on Utxos list
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.CoruzantNFTs">
            <summary>
            List of actual address Coruzant NFTs. Based on Utxos list
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.Utxos">
            <summary>
            Actual list of all Utxos on this address.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.AddressInfo">
            <summary>
            Actual loaded address info. It has inside list of all transactions.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.AddressInfoUtxos">
            <summary>
            Actual loaded address info with list of Utxos. When utxos are loaded first, this is just fill with it to prevent not necessary API request.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.AccountKey">
            <summary>
            Carrier for encrypted private key from storage and its password.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.Secret">
            <summary>
            Loaded Secret, NBitcoin Class which carry Public Key and Private Key
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.TotalBalance">
            <summary>
            Total actual balance based on Utxos. This means sum of spendable and unconfirmed balances.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.TotalSpendableBalance">
            <summary>
            Total spendable balance based on Utxos.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.TotalUnconfirmedBalance">
            <summary>
            Total balance which is now unconfirmed based on Utxos.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.SourceTokensBalance">
            <summary>
            Total balance of VENFT tokens which can be used for minting purposes.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.CoruzantSourceTokensBalance">
            <summary>
            Total balance of Coruzant tokens which can be used for minting purposes.
            </summary>
        </member>
        <member name="P:VEDriversLite.Neblio.NeblioSubAccount.TokensSupplies">
            <summary>
            Actual all token supplies. Consider also other tokens than VENFT.
            </summary>
        </member>
        <member name="E:VEDriversLite.Neblio.NeblioSubAccount.NewEventInfo">
            <summary>
            This event is called whenever some important thing happen. You can obtain success, error and info messages.
            </summary>
        </member>
        <member name="E:VEDriversLite.Neblio.NeblioSubAccount.NFTsChanged">
            <summary>
            This event is called whenever the list of NFTs is changed
            </summary>
        </member>
        <member name="E:VEDriversLite.Neblio.NeblioSubAccount.NewMintingProcessInfo">
            <summary>
            This event is called whenever some progress during multimint happens
            </summary>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.InvokeSendPaymentSuccessEvent(System.String,System.String)">
            <summary>
            Invoke Success message info event
            </summary>
            <param name="txid">new tx id hash</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.InvokeAccountLockedEvent(System.String)">
            <summary>
            Invoke Error message because account is locked
            </summary>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.InvokeErrorDuringSendEvent(System.String,System.String)">
            <summary>
            Invoke Error message which occured during sending of the transaction
            </summary>
            <param name="errorMessage">Error message content</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.InvokeErrorEvent(System.String,System.String)">
            <summary>
            Invoke Common Error message
            </summary>
            <param name="errorMessage">Error message content</param>
            <param name="title">Title of the event message</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.StartRefreshingData(System.Int32)">
            <summary>
            This function will load the actual data and then run the task which periodically refresh this data.
            It doesnt have cancellation now!
            </summary>
            <param name="interval">Default interval is 3000 = 3 seconds</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.ReloadUtxos">
            <summary>
            Reload address Utxos list. It will sort descending the utxos based on the utxos time stamps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.ReLoadNFTs">
            <summary>
            This function will reload changes in the NFTs list based on provided list of already loaded utxos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.ReloadTokenSupply">
            <summary>
            Reload actual token supplies based on already loaded list of address utxos
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.CheckSpendableNeblio(System.Double)">
            <summary>
            This function will check if there is some spendable neblio of specific amount and returns list of the utxos for the transaction
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.CheckSpendableNeblioTokens(System.String,System.Int32)">
            <summary>
            This function will check if there is some spendable tokens of specific Id and amount and returns list of the utxos for the transaction.
            </summary>
            <param name="id"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.SendNeblioPayment(System.String,System.Double)">
            <summary>
            Send classic neblio payment
            </summary>
            <param name="receiver">Receiver Neblio Address</param>
            <param name="amount">Ammount in Neblio</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.SplitNeblioCoin(System.Collections.Generic.List{System.String},System.Int32,System.Double)">
            <summary>
            Split neblio coin to smaller coins
            </summary>
            <param name="receiver">Receiver Neblio Address</param>
            <param name="splittedAmount">Ammount of new splitted coin in Neblio</param>
            <param name="count">Count of new splited couns</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.SendNeblioTokenPayment(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Send classic token payment. It must match same requirements as minting. It cannot use 1 token inputs (NFTs).
            </summary>
            <param name="tokenId">Token Id hash</param>
            <param name="metadata">Custom metadata</param>
            <param name="receiver">Receiver Neblio address</param>
            <param name="amount">Amount of the tokens</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.SplitTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            Send split token payment. It will create multiple outputs with lots of tokens.
            It must match same requirements as minting. It cannot use 1 token inputs (NFTs).
            </summary>
            <param name="tokenId">Token Id hash</param>
            <param name="metadata">Custom metadata</param>
            <param name="receivers">List Receiver Neblio address</param>
            <param name="lots">Amount of the tokens</param>
            <param name="amount">Amount of the tokens</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.MintNFT(VEDriversLite.NFT.INFT,System.String)">
            <summary>
            Mint new NFT. It is automatic function which will decide what NFT to mint based on provided type in the NFT input
            </summary>
            <param name="tokenId"></param>
            <param name="NFT">Input carrier of NFT data. It must specify the type</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.MintMultiNFTLargeAmount(VEDriversLite.NFT.INFT,System.Int32,System.String)">
            <summary>
            Mint new multi NFT. It is automatic function which will decide what NFT to mint based on provided type in the NFT input.
            </summary>
            <param name="tokenId"></param>
            <param name="NFT">Input carrier of NFT data. It must specify the type</param>
            <param name="coppies">Number of coppies. 1 coppy means 2 final NFTs</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.DestroyNFTs(System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT},System.String)">
            <summary>
            This function will destroy provided NFTs. It means it will connect them again to one output/lot of tokens.
            Now it is possible to destroy just same kind of tokens. The first provided NFT will define TokenId. Different tokensIds will be skipped.
            Maximum to destroy in one transaction is 10 of NFTs
            </summary>
            <param name="tokenId">Token Id hash</param>
            <param name="nfts">List of NFTs</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.ChangeNFT(VEDriversLite.NFT.INFT)">
            <summary>
            Change Post NFT. It requeires previous loadedPost NFT as input.
            </summary>
            <param name="NFT"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.SendNFT(System.String,VEDriversLite.NFT.INFT,System.Boolean,System.Double)">
            <summary>
            Send input NFT to new owner, or use it just for price write and resend it to yourself with new metadata about the price.
            </summary>
            <param name="receiver">If the pricewrite is set, this is filled with own address</param>
            <param name="NFT"></param>
            <param name="priceWrite">Set this if you need to just write the price to the NFT</param>
            <param name="price">Price must be bigger than 0.0002 NEBL</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.SendCoruzantNFT(System.String,VEDriversLite.NFT.INFT,System.Boolean,System.String)">
            <summary>
            Add comment to Coruzant Post NFT or add comment and send it to new owner
            </summary>
            <param name="receiver">Fill when you want to send to different address</param>
            <param name="NFT"></param>
            <param name="commentWrite">Set this if you need to just write the comment to the NFT</param>
            <param name="comment">Add your comment</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.UseNFTTicket(VEDriversLite.NFT.INFT)">
            <summary>
            Write Used flag into NFT Ticket
            </summary>
            <param name="NFT"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.GetNFTVerifyCode(System.String)">
            <summary>
            Obtain verify code of some transaction. This will combine txid and UTC time (rounded to minutes) and sign with the private key.
            It will create unique code, which can be verified and it is valid just one minute.
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.Neblio.NeblioSubAccount.GetNFTVerifyQRCode(System.String)">
            <summary>
            Verification function for the NFT ownership code generated by GetNFTVerifyCode function.
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantBrowser.LoadTabs(System.String)">
            <summary>
            Load tabs from previous serialized string.
            </summary>
            <param name="tabs">List of ActiveTabs as json string</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantBrowser.AddTab(System.String)">
            <summary>
            Add new tab based on some Neblio address
            </summary>
            <param name="address"></param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantBrowser.RemoveTab(System.String)">
            <summary>
            Remove tab by Neblio address if exists in the tabs
            </summary>
            <param name="address">Neblio Address which tab should be removed</param>
            <returns>true and string with serialized tabs list as json string</returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantBrowser.SerializeTabs">
            <summary>
            Return serialized list of ActiveTabs as Json stirng
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantBrowser.LoadCoruzantContentAddresses">
            <summary>
            Return list of available Coruzant Content Addresses
            </summary>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantNFTHelpers.GetCoruzantNFTs(System.Collections.Generic.List{VEDriversLite.NFT.INFT})">
            <summary>
            Filter just Coruzant NFTs from NFT list
            </summary>
            <param name="allNFTs"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantNFTHelpers.FindCoruzantProfileNFT(System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT})">
            <summary>
            This function will return first profile NFT in NFTs list.
            </summary>
            <param name="nfts"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantNFTHelpers.MintCoruzantPostNFT(System.String,System.Int32,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.String,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will new Coruzant Post NFT.
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="tutxos">List of spendable token utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantNFTHelpers.ChangeCoruzantPostNFT(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.String)">
            <summary>
            This function will change Coruzant Post NFT
            You can use this function for sending the NFT when you will fill receiver parameter
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="nft">Input NFT object with data to save to metadata. Must contain Utxo hash</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="receiver">Fill when you want to send NFT to another address</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantNFTHelpers.MintCoruzantProfileNFT(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will new Coruzant Profile NFTs. 
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="tutxos">List of spendable token utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.Coruzant.CoruzantNFTHelpers.ChangeCoruzantProfileNFT(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.String)">
            <summary>
            This function will change Coruzant Profile NFT.
            You can use this function for sending the NFT when you will fill receiver parameter
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="nft">Input NFT object with data to save to metadata. Must contain Utxo hash</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="receiver">Fill when you want to send NFT to another address</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="E:VEDriversLite.NFT.NFTHelpers.ProfileNFTFound">
            <summary>
            This event is called profile nft is found in the list of nfts
            </summary>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.InitHandlers">
            <summary>
            Init handler to receive event info messages from Neblio Transaction Helpers class
            </summary>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.DeInitHandlers">
            <summary>
            Deinit handler to receive event info messages from Neblio Transaction Helpers class
            </summary>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.NeblioTransactionHelpers_NewEventInfo(System.Object,VEDriversLite.Events.IEventInfo)">
            <summary>
            Process new received info from Neblio Transaction Helpers class. Now just resend higher
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.LoadNFTOriginData(System.String,System.Boolean)">
            <summary>
            This function will iterate through inputs of tx from the point of the utxo to find tx where this 1 token was splited from some lot.
            Metadata from this founded tx is returned for load to NFT carrier.
            This method is now used for "original" NFTs. It is for example Image and Music. 
            </summary>
            <param name="utxo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.LoadLastData(System.String)">
            <summary>
            This will load just last transaction metadata if it is NFT metadata. 
            This function will not iterate to start/origin. It is used for example in Post
            </summary>
            <param name="utxo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.CheckIfContainsNFTData(System.String)">
            <summary>
            this function will obtain tx metadata and check if it contains flag NFT true
            </summary>
            <param name="utxo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.CheckIfMintTx(System.String)">
            <summary>
            This function will check if the transaction is mint transaction. it means if the input to this tx was lot of the tokens.
            This kind of transaction means origin for the NFTs.
            </summary>
            <param name="utxo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.FindProfileOfAddress(System.String,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            this function will search the utxos, get all nfts utxos (if utxos list is not loaded) and return last profile nft which is founded on the address.
            </summary>
            <param name="address"></param>
            <param name="utxos">leave null if you need to obtain new utxos nft list</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.FindEventOnTheAddress(System.String,System.String,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            this function will search the utxos, get all nfts utxos (if utxos list is not loaded) and return last profile nft which is founded on the address.
            </summary>
            <param name="address"></param>
            <param name="utxos">leave null if you need to obtain new utxos nft list</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.LoadAddressNFTsWithProfile(System.String)">
            <summary>
            This function will load NFTs and during it find the profile NFT
            </summary>
            <param name="address"></param>
            <returns>profile NFT and list of all NFTs</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.LoadAddressNFTs(System.String,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT},System.Boolean)">
            <summary>
            This function will find all NFTs and load them to the carriers. 
            If you already have list of utxos and NFTs you can provide it and it will load just the changes.
            </summary>
            <param name="address"></param>
            <param name="inutxos"></param>
            <param name="innfts"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.LoadNFTsHistory(System.String)">
            <summary>
            Returns list of NFTs with the data of the point of this history of some NFT.
            </summary>
            <param name="utxo"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.CalculateFee(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Calculate Neblio Fee based on total metadata length
            </summary>
            <param name="metadata">Dictionary with metadata</param>
            <returns>20000 as default, additional 10000 for each another 900 characters</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.MintNFT(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.String)">
            <summary>
            This function will new NFTs. 
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="tutxos">List of spendable token utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.SendMessageNFT(System.String,System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will new Post NFT.
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="tutxos">List of spendable token utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.MintMultiNFT(System.String,System.Int32,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.String)">
            <summary>
            This function will new Post NFTs as multimint. 
            It means in one transaction it will create multiple 1 tokens outputs which are NFTs with same origin metadata.
            </summary>
            <param name="address">sender address</param>
            <param name="coppies">number of copies. one NFT is minted even 0 coppies is input</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="tutxos">List of spendable token utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.MintNFTTickets(System.String,System.Int32,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will new Ticket NFTs. It is multimint tx
            It means in one transaction it will create multiple 1 tokens outputs which are NFTs with same origin metadata.
            </summary>
            <param name="address">sender address</param>
            <param name="coppies">number of copies. one NFT is minted even 0 coppies is input</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="tutxos">List of spendable token utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.ChangeNFT(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will change NFT data.
            In NFT image and music it will be not relevant because it will always search for origin data even if you will rewrite it.
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="nft">Input NFT object with data to save to metadata. Must contain Utxo hash</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.SendOrderedNFT(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.PaymentNFT,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will take some NFT which was matched with some payment, coppy data and create complete payment, which will send NFT to new owner.
            During this the payment NFT token is send back to project address
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="payment">Payment NFT of received payment</param>
            <param name="NFT">NFT for sale</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.DestroyNFTs(System.String,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.String)">
            <summary>
            This function will destroy selected NFTs
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="payment">Payment NFT of received payment</param>
            <param name="NFT">NFT for sale</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.SendNFTPayment(System.String,VEDriversLite.Security.EncryptionKey,System.String,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will send payment for some NFT.
            </summary>
            <param name="address">sender address</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="nft">Input NFT object with data to save to metadata. It is NFT what you are buying.</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <returns>New Tx Id Hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.SendNFT(System.String,System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Boolean,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)">
            <summary>
            This function will send NFT. It can be also used for write the price of the NFT.
            </summary>
            <param name="address">adress of sender</param>
            <param name="receiver">address of receiver</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata. It is NFT what you are sending.</param>
            <param name="priceWrite">Set this if you just want to set price of the NFT. means resend to yourself</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <param name="price">Price must be higher than 0.0002 Neblio</param>
            <returns>New Tx Id hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.UseNFTTicket(System.String,VEDriversLite.Security.EncryptionKey,VEDriversLite.NFT.INFT,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos})">
            <summary>
            This function will write Used flag to the NFT Ticket
            </summary>
            <param name="address">adress of sender</param>
            <param name="ekey">Encryption Key object of the address</param>
            <param name="NFT">Input NFT object with data to save to metadata. It is NFT what you are sending.</param>
            <param name="nutxos">List of spendable neblio utxos if you have it loaded.</param>
            <returns>New Tx Id hash</returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.FindProfileNFT(System.Collections.Generic.ICollection{VEDriversLite.NFT.INFT})">
            <summary>
            This function will return first profile NFT in NFTs list.
            </summary>
            <param name="nfts"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.GetPubKeyFromProfileNFTTx(System.String)">
            <summary>
            This function will find profile on address if exists and parse address public key (NBitcoin class) from it.
            Usefull for encryption
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.GetPubKeyFromLastFoundTx(System.String)">
            <summary>
            This function will find last send transaction by some address and parse public key (NBitcoin class) from it.
            Usefull for encryption.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.NFT.NFTHelpers.GetNFTWithOwner(System.String)">
            <summary>
            This function will load the NFT based by Tx Id hash and find the owner of the NFT
            </summary>
            <param name="txid"></param>
            <returns></returns>
        </member>
        <member name="T:VEDriversLite.SendTokenTxData">
            <summary>
            Data carrier for sending token
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.SenderAddress">
            <summary>
            Address from where token will be send
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.Password">
            <summary>
            If the account is locked you can provide password directly in the send token api command
            if the account is unlocked or the QT wallet is connected fill empty string
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.ReceiverAddress">
            <summary>
            Address where token will be send
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.Symbol">
            <summary>
            Symbol of token
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.Id">
            <summary>
            Id of token
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.Amount">
            <summary>
            Amount of the tokens
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.Metadata">
            <summary>
            Metadata dictionary, key-value pairs
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.sendUtxo">
            <summary>
            Initial Utxo for sending transaction from if you want to specify them
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.NeblUtxo">
            <summary>
            If you wish to add specific neblio utxo as source for the fee
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.SendEvenNeblUtxoNotFound">
            <summary>
            If this is set and you will provide NeblUtxo, but it is not found in the list of spendable nebl utxos
            it will find another spendable utxo
            If this is not set and utxo is not found it will throw exception
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTokenTxData.UseRPCPrimarily">
            <summary>
            If you use RPC and NBitcoin you can preffer using RPC with set this to true
            </summary>
        </member>
        <member name="T:VEDriversLite.SendTxData">
            <summary>
            Data carrier for sending classic cryptocurrency transaction
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.SenderAddress">
            <summary>
            Address from where token will be send
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.Password">
            <summary>
            If the account is locked you can provide password directly in the send token api command
            if the account is unlocked or the QT wallet is connected fill empty string
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.ReceiverAddress">
            <summary>
            Address where token will be send
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.Symbol">
            <summary>
            Symbol of token
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.Id">
            <summary>
            Id of token
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.Amount">
            <summary>
            Amount of the currency
            </summary>
        </member>
        <member name="P:VEDriversLite.SendTxData.CustomMessage">
            <summary>
            Custom message if it is supported by currency, not implemented yet
            </summary>
        </member>
        <member name="M:VEDriversLite.TimeHelpers.UnixTimestampToDateTime(System.Double)">
            <summary>
            Convert Unix Time stamp in miliseconds to DateTime
            </summary>
            <param name="unixTime">timestamp in miliseconds</param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.TimeHelpers.DateTimeToUnixTimestamp(System.DateTime)">
            <summary>
            Convert DateTime to Unix timestamp in miliseconds
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VEDriversLite.UnstoppableDomains.IClient.GetAddressDetailsAsync(System.String)">
            <summary>Returns the Details of Unstoppable Domain address</summary>
            <param name="address">Crypto address</param>
            <returns>Object containing address details, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.UnstoppableDomains.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.UnstoppableDomains.Client.GetAddressDetailsAsync(System.String)">
            <summary>Returns the doge balance</summary>
            <param name="address">Doge address</param>
            <returns>Object containing doge balance, if address symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.UnstoppableDomains.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:VEDriversLite.UnstoppableDomains.Client.GetAddressDetailsAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Returns the doge balance</summary>
            <param name="address">Doge address</param>
            <returns>Object containing doge balance, if address symbol does not exist on network, empty object is returned.</returns>
            <exception cref="T:VEDriversLite.UnstoppableDomains.ApiException">A server side error occurred.</exception>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.Addresses">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.IPFS">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.Records">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.Meta">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.Social">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.MultiCoinAddresses">
            <summary>Success flag</summary>
        </member>
        <member name="P:VEDriversLite.UnstoppableDomains.GetAddressDetailsResponse.WhoIs">
            <summary>Success flag</summary>
        </member>
    </members>
</doc>
