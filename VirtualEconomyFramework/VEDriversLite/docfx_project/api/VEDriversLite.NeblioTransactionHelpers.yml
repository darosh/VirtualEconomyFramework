### YamlMime:ManagedReference
items:
- uid: VEDriversLite.NeblioTransactionHelpers
  commentId: T:VEDriversLite.NeblioTransactionHelpers
  id: NeblioTransactionHelpers
  parent: VEDriversLite
  children:
  - VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync(System.String)
  - VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync(System.String)
  - VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)
  - VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction(System.String)
  - VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT(System.String,System.String,System.Int32,System.Double)
  - VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit(System.String,System.String,System.Int32,System.Double)
  - VEDriversLite.NeblioTransactionHelpers.FromSatToMainRatio
  - VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  - VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey(VEDriversLite.Security.EncryptionKey,System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo(System.String,System.Double,System.Double)
  - VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  - VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  - VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos(System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects(System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction(System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetSendAmount(VEDriversLite.NeblioAPI.GetTransactionInfoResponse,System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject(System.Double,System.Double,System.String,System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata(System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetTokenOwners(System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo(System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata(System.String,System.String)
  - VEDriversLite.NeblioTransactionHelpers.GetTxHex(System.String)
  - VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  - VEDriversLite.NeblioTransactionHelpers.MinimumConfirmations
  - VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.MintNFTToken(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.Network
  - VEDriversLite.NeblioTransactionHelpers.NewEventInfo
  - VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  - VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  - VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Double,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync(VEDriversLite.NeblioAPI.SendTokenRequest)
  - VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  - VEDriversLite.NeblioTransactionHelpers.ShortenAddress(System.String)
  - VEDriversLite.NeblioTransactionHelpers.ShortenTxId(System.String)
  - VEDriversLite.NeblioTransactionHelpers.SplitTheTokens(VEDriversLite.NeblioAccount,System.String,System.String,System.String,System.Int32,System.Int32)
  - VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo(System.String,System.String,System.String,System.Boolean)
  - VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo(System.String,System.String)
  - VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(System.String,System.String,System.String)
  - VEDriversLite.NeblioTransactionHelpers.VENFTId
  - VEDriversLite.NeblioTransactionHelpers.VENFTInfo
  langs:
  - csharp
  - vb
  name: NeblioTransactionHelpers
  nameWithType: NeblioTransactionHelpers
  fullName: VEDriversLite.NeblioTransactionHelpers
  type: Class
  source:
    id: NeblioTransactionHelpers
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 59
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static class NeblioTransactionHelpers
    content.vb: Public Module NeblioTransactionHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VEDriversLite.NeblioTransactionHelpers.FromSatToMainRatio
  commentId: F:VEDriversLite.NeblioTransactionHelpers.FromSatToMainRatio
  id: FromSatToMainRatio
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: FromSatToMainRatio
  nameWithType: NeblioTransactionHelpers.FromSatToMainRatio
  fullName: VEDriversLite.NeblioTransactionHelpers.FromSatToMainRatio
  type: Field
  source:
    id: FromSatToMainRatio
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 64
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static double FromSatToMainRatio
    return:
      type: System.Double
    content.vb: Public Shared FromSatToMainRatio As Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.Network
  commentId: F:VEDriversLite.NeblioTransactionHelpers.Network
  id: Network
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: Network
  nameWithType: NeblioTransactionHelpers.Network
  fullName: VEDriversLite.NeblioTransactionHelpers.Network
  type: Field
  source:
    id: Network
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 65
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static Network Network
    return:
      type: NBitcoin.Network
    content.vb: Public Shared Network As Network
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.VENFTId
  commentId: F:VEDriversLite.NeblioTransactionHelpers.VENFTId
  id: VENFTId
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: VENFTId
  nameWithType: NeblioTransactionHelpers.VENFTId
  fullName: VEDriversLite.NeblioTransactionHelpers.VENFTId
  type: Field
  source:
    id: VENFTId
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 66
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static string VENFTId
    return:
      type: System.String
    content.vb: Public Shared VENFTId As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.VENFTInfo
  commentId: F:VEDriversLite.NeblioTransactionHelpers.VENFTInfo
  id: VENFTInfo
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: VENFTInfo
  nameWithType: NeblioTransactionHelpers.VENFTInfo
  fullName: VEDriversLite.NeblioTransactionHelpers.VENFTInfo
  type: Field
  source:
    id: VENFTInfo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 67
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static GetTokenMetadataResponse VENFTInfo
    return:
      type: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
    content.vb: Public Shared VENFTInfo As GetTokenMetadataResponse
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.MinimumConfirmations
  commentId: F:VEDriversLite.NeblioTransactionHelpers.MinimumConfirmations
  id: MinimumConfirmations
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: MinimumConfirmations
  nameWithType: NeblioTransactionHelpers.MinimumConfirmations
  fullName: VEDriversLite.NeblioTransactionHelpers.MinimumConfirmations
  type: Field
  source:
    id: MinimumConfirmations
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 68
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static int MinimumConfirmations
    return:
      type: System.Int32
    content.vb: Public Shared MinimumConfirmations As Integer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.NewEventInfo
  commentId: E:VEDriversLite.NeblioTransactionHelpers.NewEventInfo
  id: NewEventInfo
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: NewEventInfo
  nameWithType: NeblioTransactionHelpers.NewEventInfo
  fullName: VEDriversLite.NeblioTransactionHelpers.NewEventInfo
  type: Event
  source:
    id: NewEventInfo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 70
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static event EventHandler<IEventInfo> NewEventInfo
    return:
      type: System.EventHandler{VEDriversLite.Events.IEventInfo}
    content.vb: Public Shared Event NewEventInfo As EventHandler(Of IEventInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.ShortenAddress(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.ShortenAddress(System.String)
  id: ShortenAddress(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: ShortenAddress(String)
  nameWithType: NeblioTransactionHelpers.ShortenAddress(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.ShortenAddress(System.String)
  type: Method
  source:
    id: ShortenAddress
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 77
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nCreate short version of address, 3 chars on start...3 chars on end\n"
  example: []
  syntax:
    content: public static string ShortenAddress(string address)
    parameters:
    - id: address
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ShortenAddress(address As String) As String
  overload: VEDriversLite.NeblioTransactionHelpers.ShortenAddress*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.ShortenTxId(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.ShortenTxId(System.String)
  id: ShortenTxId(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: ShortenTxId(String)
  nameWithType: NeblioTransactionHelpers.ShortenTxId(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.ShortenTxId(System.String)
  type: Method
  source:
    id: ShortenTxId
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 87
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nCreate short version of txid hash, 3 chars on start...3 chars on end\n"
  example: []
  syntax:
    content: public static string ShortenTxId(string txid)
    parameters:
    - id: txid
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function ShortenTxId(txid As String) As String
  overload: VEDriversLite.NeblioTransactionHelpers.ShortenTxId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey(VEDriversLite.Security.EncryptionKey,System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey(VEDriversLite.Security.EncryptionKey,System.String)
  id: GetAddressAndKey(VEDriversLite.Security.EncryptionKey,System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetAddressAndKey(EncryptionKey, String)
  nameWithType: NeblioTransactionHelpers.GetAddressAndKey(EncryptionKey, String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey(VEDriversLite.Security.EncryptionKey, System.String)
  type: Method
  source:
    id: GetAddressAndKey
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 100
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction converts EncryptionKey (optionaly with password if it is not already loaded in ekey)\nand returns BitcoinAddress and BitcoinSecret classes from NBitcoin\n"
  example: []
  syntax:
    content: public static Task<(BitcoinAddress, BitcoinSecret)> GetAddressAndKey(EncryptionKey ekey, string password = "")
    parameters:
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: ''
    - id: password
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{NBitcoin.BitcoinAddress,NBitcoin.BitcoinSecret}}
      description: ''
    content.vb: Public Shared Function GetAddressAndKey(ekey As EncryptionKey, password As String = "") As Task(Of(BitcoinAddress, BitcoinSecret))
  overload: VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction(System.String)
  id: BroadcastSignedTransaction(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: BroadcastSignedTransaction(String)
  nameWithType: NeblioTransactionHelpers.BroadcastSignedTransaction(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction(System.String)
  type: Method
  source:
    id: BroadcastSignedTransaction
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 151
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction will take hex of signed transaction and broadcast it via Neblio API\n"
  example: []
  syntax:
    content: public static Task<string> BroadcastSignedTransaction(string txhex)
    parameters:
    - id: txhex
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function BroadcastSignedTransaction(txhex As String) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject(System.Double,System.Double,System.String,System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject(System.Double,System.Double,System.String,System.String)
  id: GetSendTokenObject(System.Double,System.Double,System.String,System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetSendTokenObject(Double, Double, String, String)
  nameWithType: NeblioTransactionHelpers.GetSendTokenObject(Double, Double, String, String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject(System.Double, System.Double, System.String, System.String)
  type: Method
  source:
    id: GetSendTokenObject
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 186
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction prepares SendTokenRequest object. It is important to initialitze correct inside properties\n"
  example: []
  syntax:
    content: public static SendTokenRequest GetSendTokenObject(double amount, double fee = 20000, string receiver = "", string tokenId = "")
    parameters:
    - id: amount
      type: System.Double
      description: Amount to send
    - id: fee
      type: System.Double
      description: Fee - min 10000, with metadata you need at least 20000
    - id: receiver
      type: System.String
      description: Receiver of the amount
    - id: tokenId
      type: System.String
      description: Token Id hash
    return:
      type: VEDriversLite.NeblioAPI.SendTokenRequest
      description: ''
    content.vb: Public Shared Function GetSendTokenObject(amount As Double, fee As Double = 20000, receiver As String = "", tokenId As String = "") As SendTokenRequest
  overload: VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  id: SendNTP1TokenAPI(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendNTP1TokenAPI(SendTokenTxData, NeblioAccount, Double, Boolean, Boolean)
  nameWithType: NeblioTransactionHelpers.SendNTP1TokenAPI(SendTokenTxData, NeblioAccount, Double, Boolean, Boolean)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI(VEDriversLite.SendTokenTxData, VEDriversLite.NeblioAccount, System.Double, System.Boolean, System.Boolean)
  type: Method
  source:
    id: SendNTP1TokenAPI
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 350
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static string SendNTP1TokenAPI(SendTokenTxData data, NeblioAccount account, double fee = 20000, bool isItMintNFT = false, bool isNFTtx = false)
    parameters:
    - id: data
      type: VEDriversLite.SendTokenTxData
    - id: account
      type: VEDriversLite.NeblioAccount
    - id: fee
      type: System.Double
    - id: isItMintNFT
      type: System.Boolean
    - id: isNFTtx
      type: System.Boolean
    return:
      type: System.String
    content.vb: Public Shared Function SendNTP1TokenAPI(data As SendTokenTxData, account As NeblioAccount, fee As Double = 20000, isItMintNFT As Boolean = False, isNFTtx As Boolean = False) As String
  overload: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  id: SendNTP1TokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.NeblioAccount,System.Double,System.Boolean,System.Boolean)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendNTP1TokenAPIAsync(SendTokenTxData, NeblioAccount, Double, Boolean, Boolean)
  nameWithType: NeblioTransactionHelpers.SendNTP1TokenAPIAsync(SendTokenTxData, NeblioAccount, Double, Boolean, Boolean)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync(VEDriversLite.SendTokenTxData, VEDriversLite.NeblioAccount, System.Double, System.Boolean, System.Boolean)
  type: Method
  source:
    id: SendNTP1TokenAPIAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 355
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static Task<string> SendNTP1TokenAPIAsync(SendTokenTxData data, NeblioAccount account, double fee = 20000, bool isItMintNFT = false, bool isNFTtx = false)
    parameters:
    - id: data
      type: VEDriversLite.SendTokenTxData
    - id: account
      type: VEDriversLite.NeblioAccount
    - id: fee
      type: System.Double
    - id: isItMintNFT
      type: System.Boolean
    - id: isNFTtx
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function SendNTP1TokenAPIAsync(data As SendTokenTxData, account As NeblioAccount, fee As Double = 20000, isItMintNFT As Boolean = False, isNFTtx As Boolean = False) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.MintNFTToken(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.MintNFTToken(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: MintNFTToken(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: MintNFTToken(MintNFTData, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.MintNFTToken(MintNFTData, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.MintNFTToken(VEDriversLite.MintNFTData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: MintNFTToken
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 440
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static string MintNFTToken(MintNFTData data, EncryptionKey ekey, ICollection<Utxos> nutxos, ICollection<Utxos> tutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.MintNFTData
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
    - id: tutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
    - id: fee
      type: System.Double
    return:
      type: System.String
    content.vb: Public Shared Function MintNFTToken(data As MintNFTData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), tutxos As ICollection(Of Utxos), fee As Double = 20000) As String
  overload: VEDriversLite.NeblioTransactionHelpers.MintNFTToken*
  nameWithType.vb: NeblioTransactionHelpers.MintNFTToken(MintNFTData, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.MintNFTToken(VEDriversLite.MintNFTData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: MintNFTToken(MintNFTData, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: MintNFTTokenAsync(VEDriversLite.MintNFTData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: MintNFTTokenAsync(MintNFTData, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.MintNFTTokenAsync(MintNFTData, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync(VEDriversLite.MintNFTData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: MintNFTTokenAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 454
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction will Mint NFT from lot of the tokens\n"
  example: []
  syntax:
    content: public static Task<string> MintNFTTokenAsync(MintNFTData data, EncryptionKey ekey, ICollection<Utxos> nutxos, ICollection<Utxos> tutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.MintNFTData
      description: Mint data, please see MintNFTData class for the details
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: Input EncryptionKey of the account
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input neblio utxo
    - id: tutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input token utxo
    - id: fee
      type: System.Double
      description: Fee - 20000 minimum
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: New Transaction Hash - TxId
    content.vb: Public Shared Function MintNFTTokenAsync(data As MintNFTData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), tutxos As ICollection(Of Utxos), fee As Double = 20000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync*
  nameWithType.vb: NeblioTransactionHelpers.MintNFTTokenAsync(MintNFTData, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync(VEDriversLite.MintNFTData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: MintNFTTokenAsync(MintNFTData, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: MintMultiNFTToken(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: MintMultiNFTToken(MintNFTData, Int32, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.MintMultiNFTToken(MintNFTData, Int32, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken(VEDriversLite.MintNFTData, System.Int32, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: MintMultiNFTToken
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 551
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static string MintMultiNFTToken(MintNFTData data, int coppies, EncryptionKey ekey, ICollection<Utxos> nutxos, ICollection<Utxos> tutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.MintNFTData
    - id: coppies
      type: System.Int32
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
    - id: tutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
    - id: fee
      type: System.Double
    return:
      type: System.String
    content.vb: Public Shared Function MintMultiNFTToken(data As MintNFTData, coppies As Integer, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), tutxos As ICollection(Of Utxos), fee As Double = 20000) As String
  overload: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken*
  nameWithType.vb: NeblioTransactionHelpers.MintMultiNFTToken(MintNFTData, Int32, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken(VEDriversLite.MintNFTData, System.Int32, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: MintMultiNFTToken(MintNFTData, Int32, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: MintMultiNFTTokenAsync(VEDriversLite.MintNFTData,System.Int32,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: MintMultiNFTTokenAsync(MintNFTData, Int32, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.MintMultiNFTTokenAsync(MintNFTData, Int32, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync(VEDriversLite.MintNFTData, System.Int32, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: MintMultiNFTTokenAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 566
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction will Mint NFT with the coppies\n"
  example: []
  syntax:
    content: public static Task<string> MintMultiNFTTokenAsync(MintNFTData data, int coppies, EncryptionKey ekey, ICollection<Utxos> nutxos, ICollection<Utxos> tutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.MintNFTData
      description: Mint data, please see MintNFTData class for the details
    - id: coppies
      type: System.Int32
      description: 0 or more coppies - with 0 input it is same as MintNFTTokenAsync
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: Input EncryptionKey of the account
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input neblio utxo
    - id: tutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input token utxo
    - id: fee
      type: System.Double
      description: Fee - 20000 minimum
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: New Transaction Hash - TxId
    content.vb: Public Shared Function MintMultiNFTTokenAsync(data As MintNFTData, coppies As Integer, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), tutxos As ICollection(Of Utxos), fee As Double = 20000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync*
  nameWithType.vb: NeblioTransactionHelpers.MintMultiNFTTokenAsync(MintNFTData, Int32, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync(VEDriversLite.MintNFTData, System.Int32, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: MintMultiNFTTokenAsync(MintNFTData, Int32, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: SendNFTTokenAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendNFTTokenAsync(SendTokenTxData, EncryptionKey, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.SendNFTTokenAsync(SendTokenTxData, EncryptionKey, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: SendNFTTokenAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 696
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction will sent exact NFT. \nYou must fill the input token utxo in data object!\n"
  example: []
  syntax:
    content: public static Task<string> SendNFTTokenAsync(SendTokenTxData data, EncryptionKey ekey, ICollection<Utxos> nutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.SendTokenTxData
      description: Send data, please see SendTokenTxData class for the details
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: Input EncryptionKey of the account
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input neblio utxo
    - id: fee
      type: System.Double
      description: Fee - 20000 minimum
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: New Transaction Hash - TxId
    content.vb: Public Shared Function SendNFTTokenAsync(data As SendTokenTxData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), fee As Double = 20000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync*
  nameWithType.vb: NeblioTransactionHelpers.SendNFTTokenAsync(SendTokenTxData, EncryptionKey, ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: SendNFTTokenAsync(SendTokenTxData, EncryptionKey, ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: SendTokenLotAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendTokenLotAsync(SendTokenTxData, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.SendTokenLotAsync(SendTokenTxData, EncryptionKey, ICollection<Utxos>, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: SendTokenLotAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 796
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction will send lot of tokens (means more than 1) to some address\n"
  example: []
  syntax:
    content: public static Task<string> SendTokenLotAsync(SendTokenTxData data, EncryptionKey ekey, ICollection<Utxos> nutxos, ICollection<Utxos> tutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.SendTokenTxData
      description: Send data, please see SendtokenTxTData class for the details
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: Input EncryptionKey of the account
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input neblio utxo
    - id: tutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input token utxo
    - id: fee
      type: System.Double
      description: Fee - 20000 minimum
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: New Transaction Hash - TxId
    content.vb: Public Shared Function SendTokenLotAsync(data As SendTokenTxData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), tutxos As ICollection(Of Utxos), fee As Double = 20000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync*
  nameWithType.vb: NeblioTransactionHelpers.SendTokenLotAsync(SendTokenTxData, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: SendTokenLotAsync(SendTokenTxData, EncryptionKey, ICollection(Of Utxos), ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: SendNeblioTransactionAPI(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendNeblioTransactionAPI(SendTxData, EncryptionKey, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.SendNeblioTransactionAPI(SendTxData, EncryptionKey, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI(VEDriversLite.SendTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: SendNeblioTransactionAPI
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 877
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static string SendNeblioTransactionAPI(SendTxData data, EncryptionKey ekey, ICollection<Utxos> nutxos, double fee = 10000)
    parameters:
    - id: data
      type: VEDriversLite.SendTxData
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
    - id: fee
      type: System.Double
    return:
      type: System.String
    content.vb: Public Shared Function SendNeblioTransactionAPI(data As SendTxData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), fee As Double = 10000) As String
  overload: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI*
  nameWithType.vb: NeblioTransactionHelpers.SendNeblioTransactionAPI(SendTxData, EncryptionKey, ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI(VEDriversLite.SendTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: SendNeblioTransactionAPI(SendTxData, EncryptionKey, ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendNeblioTransactionAPIAsync(SendTxData, EncryptionKey, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(SendTxData, EncryptionKey, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: SendNeblioTransactionAPIAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 890
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFunction will send standard Neblio transaction\n"
  example: []
  syntax:
    content: public static Task<string> SendNeblioTransactionAPIAsync(SendTxData data, EncryptionKey ekey, ICollection<Utxos> nutxos, double fee = 10000)
    parameters:
    - id: data
      type: VEDriversLite.SendTxData
      description: Send data, please see SendTxData class for the details
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: Input EncryptionKey of the account
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input neblio utxo
    - id: fee
      type: System.Double
      description: Fee - 10000 minimum
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: New Transaction Hash - TxId
    content.vb: Public Shared Function SendNeblioTransactionAPIAsync(data As SendTxData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), fee As Double = 10000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync*
  nameWithType.vb: NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(SendTxData, EncryptionKey, ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(VEDriversLite.SendTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: SendNeblioTransactionAPIAsync(SendTxData, EncryptionKey, ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Double,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Double,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Double,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendNTP1TokenWithPaymentAPIAsync(SendTokenTxData, EncryptionKey, Double, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(SendTokenTxData, EncryptionKey, Double, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Double, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: SendNTP1TokenWithPaymentAPIAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 983
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nThis function will send Neblio payment together with the token whichc carry some metadata\n"
  example: []
  syntax:
    content: public static Task<string> SendNTP1TokenWithPaymentAPIAsync(SendTokenTxData data, EncryptionKey ekey, double neblAmount, ICollection<Utxos> nutxos, double fee = 20000)
    parameters:
    - id: data
      type: VEDriversLite.SendTokenTxData
      description: Mint data, please see MintNFTData class for the details
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
      description: Input EncryptionKey of the account
    - id: neblAmount
      type: System.Double
      description: Amount of Neblio to send
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
      description: Optional input neblio utxo
    - id: fee
      type: System.Double
      description: Fee - 20000 minimum
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: New Transaction Hash - TxId
    content.vb: Public Shared Function SendNTP1TokenWithPaymentAPIAsync(data As SendTokenTxData, ekey As EncryptionKey, neblAmount As Double, nutxos As ICollection(Of Utxos), fee As Double = 20000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync*
  nameWithType.vb: NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(SendTokenTxData, EncryptionKey, Double, ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Double, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: SendNTP1TokenWithPaymentAPIAsync(SendTokenTxData, EncryptionKey, Double, ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  id: SendMultiTokenAPIAsync(VEDriversLite.SendTokenTxData,VEDriversLite.Security.EncryptionKey,System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos},System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendMultiTokenAPIAsync(SendTokenTxData, EncryptionKey, ICollection<Utxos>, Double)
  nameWithType: NeblioTransactionHelpers.SendMultiTokenAPIAsync(SendTokenTxData, EncryptionKey, ICollection<Utxos>, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>, System.Double)
  type: Method
  source:
    id: SendMultiTokenAPIAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1227
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  syntax:
    content: public static Task<string> SendMultiTokenAPIAsync(SendTokenTxData data, EncryptionKey ekey, ICollection<Utxos> nutxos, double fee = 10000)
    parameters:
    - id: data
      type: VEDriversLite.SendTokenTxData
    - id: ekey
      type: VEDriversLite.Security.EncryptionKey
    - id: nutxos
      type: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
    - id: fee
      type: System.Double
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Shared Function SendMultiTokenAPIAsync(data As SendTokenTxData, ekey As EncryptionKey, nutxos As ICollection(Of Utxos), fee As Double = 10000) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync*
  nameWithType.vb: NeblioTransactionHelpers.SendMultiTokenAPIAsync(SendTokenTxData, EncryptionKey, ICollection(Of Utxos), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync(VEDriversLite.SendTokenTxData, VEDriversLite.Security.EncryptionKey, System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos), System.Double)
  name.vb: SendMultiTokenAPIAsync(SendTokenTxData, EncryptionKey, ICollection(Of Utxos), Double)
- uid: VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync(VEDriversLite.NeblioAPI.SendTokenRequest)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync(VEDriversLite.NeblioAPI.SendTokenRequest)
  id: SendRawNTP1TxAsync(VEDriversLite.NeblioAPI.SendTokenRequest)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SendRawNTP1TxAsync(SendTokenRequest)
  nameWithType: NeblioTransactionHelpers.SendRawNTP1TxAsync(SendTokenRequest)
  fullName: VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync(VEDriversLite.NeblioAPI.SendTokenRequest)
  type: Method
  source:
    id: SendRawNTP1TxAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1373
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nSend request for creating RAW token transaction\n"
  example: []
  syntax:
    content: public static Task<string> SendRawNTP1TxAsync(SendTokenRequest data)
    parameters:
    - id: data
      type: VEDriversLite.NeblioAPI.SendTokenRequest
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function SendRawNTP1TxAsync(data As SendTokenRequest) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)
  id: BroadcastNTP1TxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: BroadcastNTP1TxAsync(BroadcastTxRequest)
  nameWithType: NeblioTransactionHelpers.BroadcastNTP1TxAsync(BroadcastTxRequest)
  fullName: VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync(VEDriversLite.NeblioAPI.BroadcastTxRequest)
  type: Method
  source:
    id: BroadcastNTP1TxAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1391
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nBroadcast of signed transaction. Works for Neblio and Token transactions.\n"
  example: []
  syntax:
    content: public static Task<string> BroadcastNTP1TxAsync(BroadcastTxRequest data)
    parameters:
    - id: data
      type: VEDriversLite.NeblioAPI.BroadcastTxRequest
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function BroadcastNTP1TxAsync(data As BroadcastTxRequest) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync(System.String)
  id: AddressInfoAsync(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: AddressInfoAsync(String)
  nameWithType: NeblioTransactionHelpers.AddressInfoAsync(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync(System.String)
  type: Method
  source:
    id: AddressInfoAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1402
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturn Address info object. Contains list of all transactions\n"
  example: []
  syntax:
    content: public static Task<GetAddressResponse> AddressInfoAsync(string addr)
    parameters:
    - id: addr
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetAddressResponse}
      description: ''
    content.vb: Public Shared Function AddressInfoAsync(addr As String) As Task(Of GetAddressResponse)
  overload: VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync(System.String)
  id: AddressInfoUtxosAsync(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: AddressInfoUtxosAsync(String)
  nameWithType: NeblioTransactionHelpers.AddressInfoUtxosAsync(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync(System.String)
  type: Method
  source:
    id: AddressInfoUtxosAsync
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1413
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturn address info object. this object contains list of Utxos.\n"
  example: []
  syntax:
    content: public static Task<GetAddressInfoResponse> AddressInfoUtxosAsync(string addr)
    parameters:
    - id: addr
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetAddressInfoResponse}
      description: ''
    content.vb: Public Shared Function AddressInfoUtxosAsync(addr As String) As Task(Of GetAddressInfoResponse)
  overload: VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos(System.String)
  id: GetAddressUtxos(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetAddressUtxos(String)
  nameWithType: NeblioTransactionHelpers.GetAddressUtxos(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos(System.String)
  type: Method
  source:
    id: GetAddressUtxos
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1424
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturn list of address utxos.\n"
  example: []
  syntax:
    content: public static Task<ICollection<Anonymous>> GetAddressUtxos(string addr)
    parameters:
    - id: addr
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Anonymous}}
      description: ''
    content.vb: Public Shared Function GetAddressUtxos(addr As String) As Task(Of ICollection(Of Anonymous))
  overload: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects(System.String)
  id: GetAddressUtxosObjects(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetAddressUtxosObjects(String)
  nameWithType: NeblioTransactionHelpers.GetAddressUtxosObjects(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects(System.String)
  type: Method
  source:
    id: GetAddressUtxosObjects
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1435
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturn list of Utxos object.\n"
  example: []
  syntax:
    content: public static Task<ICollection<Utxos>> GetAddressUtxosObjects(string addr)
    parameters:
    - id: addr
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}}
      description: ''
    content.vb: Public Shared Function GetAddressUtxosObjects(addr As String) As Task(Of ICollection(Of Utxos))
  overload: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  id: GetAddressTokensUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetAddressTokensUtxos(String, GetAddressInfoResponse)
  nameWithType: NeblioTransactionHelpers.GetAddressTokensUtxos(String, GetAddressInfoResponse)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos(System.String, VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  type: Method
  source:
    id: GetAddressTokensUtxos
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1455
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturns list of all Utxos which contains some tokens\n"
  example: []
  syntax:
    content: public static Task<ICollection<Utxos>> GetAddressTokensUtxos(string addr, GetAddressInfoResponse addressinfo = null)
    parameters:
    - id: addr
      type: System.String
      description: ''
    - id: addressinfo
      type: VEDriversLite.NeblioAPI.GetAddressInfoResponse
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}}
      description: ''
    content.vb: Public Shared Function GetAddressTokensUtxos(addr As String, addressinfo As GetAddressInfoResponse = Nothing) As Task(Of ICollection(Of Utxos))
  overload: VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetTxHex(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetTxHex(System.String)
  id: GetTxHex(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetTxHex(String)
  nameWithType: NeblioTransactionHelpers.GetTxHex(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTxHex(System.String)
  type: Method
  source:
    id: GetTxHex
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1474
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturn transaction Hex\n"
  example: []
  syntax:
    content: public static Task<string> GetTxHex(string txid)
    parameters:
    - id: txid
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function GetTxHex(txid As String) As Task(Of String)
  overload: VEDriversLite.NeblioTransactionHelpers.GetTxHex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  id: GetAddressNFTsUtxos(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetAddressNFTsUtxos(String, GetAddressInfoResponse)
  nameWithType: NeblioTransactionHelpers.GetAddressNFTsUtxos(String, GetAddressInfoResponse)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos(System.String, VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  type: Method
  source:
    id: GetAddressNFTsUtxos
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1489
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturns list of all Utxos which contains just one token, means amount = 1\n"
  example: []
  syntax:
    content: public static Task<ICollection<Utxos>> GetAddressNFTsUtxos(string addr, GetAddressInfoResponse addressinfo = null)
    parameters:
    - id: addr
      type: System.String
      description: ''
    - id: addressinfo
      type: VEDriversLite.NeblioAPI.GetAddressInfoResponse
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}}
      description: ''
    content.vb: Public Shared Function GetAddressNFTsUtxos(addr As String, addressinfo As GetAddressInfoResponse = Nothing) As Task(Of ICollection(Of Utxos))
  overload: VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetSendAmount(VEDriversLite.NeblioAPI.GetTransactionInfoResponse,System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetSendAmount(VEDriversLite.NeblioAPI.GetTransactionInfoResponse,System.String)
  id: GetSendAmount(VEDriversLite.NeblioAPI.GetTransactionInfoResponse,System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetSendAmount(GetTransactionInfoResponse, String)
  nameWithType: NeblioTransactionHelpers.GetSendAmount(GetTransactionInfoResponse, String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetSendAmount(VEDriversLite.NeblioAPI.GetTransactionInfoResponse, System.String)
  type: Method
  source:
    id: GetSendAmount
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1510
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturns sended amount of neblio in some transaction. It counts the outputs which was send to input address\n"
  example: []
  syntax:
    content: public static Task<double> GetSendAmount(GetTransactionInfoResponse tx, string address)
    parameters:
    - id: tx
      type: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
      description: ''
    - id: address
      type: System.String
      description: expected address where was nebl send in this tx
    return:
      type: System.Threading.Tasks.Task{System.Double}
      description: ''
    content.vb: Public Shared Function GetSendAmount(tx As GetTransactionInfoResponse, address As String) As Task(Of Double)
  overload: VEDriversLite.NeblioTransactionHelpers.GetSendAmount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo(System.String,System.Double,System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo(System.String,System.Double,System.Double)
  id: GetAddressNeblUtxo(System.String,System.Double,System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetAddressNeblUtxo(String, Double, Double)
  nameWithType: NeblioTransactionHelpers.GetAddressNeblUtxo(String, Double, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo(System.String, System.Double, System.Double)
  type: Method
  source:
    id: GetAddressNeblUtxo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1544
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturns list of spendable utxos which together match some input required amount for some transaction\n"
  example: []
  syntax:
    content: public static Task<ICollection<Utxos>> GetAddressNeblUtxo(string addr, double minAmount = 0.0001, double requiredAmount = 0.0001)
    parameters:
    - id: addr
      type: System.String
      description: address which has utxos for spend - sender in tx
    - id: minAmount
      type: System.Double
      description: minimum amount of one utxo
    - id: requiredAmount
      type: System.Double
      description: amount what must be collected even by multiple utxos
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}}
      description: ''
    content.vb: Public Shared Function GetAddressNeblUtxo(addr As String, minAmount As Double = 0.0001, requiredAmount As Double = 0.0001) As Task(Of ICollection(Of Utxos))
  overload: VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo(System.String,System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo(System.String,System.String)
  id: ValidateNeblioUtxo(System.String,System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: ValidateNeblioUtxo(String, String)
  nameWithType: NeblioTransactionHelpers.ValidateNeblioUtxo(String, String)
  fullName: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo(System.String, System.String)
  type: Method
  source:
    id: ValidateNeblioUtxo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1586
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nCheck if the neblio is spendable.\n"
  example: []
  syntax:
    content: public static Task<(bool, double)> ValidateNeblioUtxo(string address, string txid)
    parameters:
    - id: address
      type: System.String
      description: address which should have this utxo
    - id: txid
      type: System.String
      description: input txid hash
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,System.Double}}
      description: true and index of utxo
    content.vb: Public Shared Function ValidateNeblioUtxo(address As String, txid As String) As Task(Of(Boolean, Double))
  overload: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo(System.String,System.String,System.String,System.Boolean)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo(System.String,System.String,System.String,System.Boolean)
  id: ValidateNeblioTokenUtxo(System.String,System.String,System.String,System.Boolean)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: ValidateNeblioTokenUtxo(String, String, String, Boolean)
  nameWithType: NeblioTransactionHelpers.ValidateNeblioTokenUtxo(String, String, String, Boolean)
  fullName: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo(System.String, System.String, System.String, System.Boolean)
  type: Method
  source:
    id: ValidateNeblioTokenUtxo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1615
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nCheck if the token utxo is spendable.\n"
  example: []
  syntax:
    content: public static Task<(bool, double)> ValidateNeblioTokenUtxo(string address, string txid, string tokenId, bool isMint = false)
    parameters:
    - id: address
      type: System.String
      description: address which should have this utxo
    - id: txid
      type: System.String
      description: input txid hash
    - id: tokenId
      type: System.String
      description: Token Id hash
    - id: isMint
      type: System.Boolean
      description: If it is mint transaction it counts just utxos which has amount bigger than 1 token
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,System.Double}}
      description: true and index of utxo
    content.vb: Public Shared Function ValidateNeblioTokenUtxo(address As String, txid As String, tokenId As String, isMint As Boolean = False) As Task(Of(Boolean, Double))
  overload: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(System.String,System.String,System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(System.String,System.String,System.String)
  id: ValidateOneTokenNFTUtxo(System.String,System.String,System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: ValidateOneTokenNFTUtxo(String, String, String)
  nameWithType: NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(String, String, String)
  fullName: VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(System.String, System.String, System.String)
  type: Method
  source:
    id: ValidateOneTokenNFTUtxo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1646
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nCheck if the NFT token is spendable. Means utxos with token amount = 1\n"
  example: []
  syntax:
    content: public static Task<(bool, double)> ValidateOneTokenNFTUtxo(string address, string tokenId, string txid)
    parameters:
    - id: address
      type: System.String
      description: address which should have this utxo
    - id: tokenId
      type: System.String
      description: input token id hash
    - id: txid
      type: System.String
      description: input txid hash
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,System.Double}}
      description: true and index of utxo
    content.vb: Public Shared Function ValidateOneTokenNFTUtxo(address As String, tokenId As String, txid As String) As Task(Of(Boolean, Double))
  overload: VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT(System.String,System.String,System.Int32,System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT(System.String,System.String,System.Int32,System.Double)
  id: FindUtxoForMintNFT(System.String,System.String,System.Int32,System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: FindUtxoForMintNFT(String, String, Int32, Double)
  nameWithType: NeblioTransactionHelpers.FindUtxoForMintNFT(String, String, Int32, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT(System.String, System.String, System.Int32, System.Double)
  type: Method
  source:
    id: FindUtxoForMintNFT
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1680
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFind utxo which can be used for minting. It means it has token amount > 1\n"
  example: []
  syntax:
    content: public static Task<List<Utxos>> FindUtxoForMintNFT(string addr, string tokenId, int numberToMint = 1, double oneTokenSat = 10000)
    parameters:
    - id: addr
      type: System.String
      description: address which has utxos
    - id: tokenId
      type: System.String
      description: token id hash
    - id: numberToMint
      type: System.Int32
      description: number of tokens which will be minted - because of multimint
    - id: oneTokenSat
      type: System.Double
      description: this is usually default. On Neblio all token tx should have value 10000sat
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{VEDriversLite.NeblioAPI.Utxos}}
      description: ''
    content.vb: Public Shared Function FindUtxoForMintNFT(addr As String, tokenId As String, numberToMint As Integer = 1, oneTokenSat As Double = 10000) As Task(Of List(Of Utxos))
  overload: VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit(System.String,System.String,System.Int32,System.Double)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit(System.String,System.String,System.Int32,System.Double)
  id: FindUtxoToSplit(System.String,System.String,System.Int32,System.Double)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: FindUtxoToSplit(String, String, Int32, Double)
  nameWithType: NeblioTransactionHelpers.FindUtxoToSplit(String, String, Int32, Double)
  fullName: VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit(System.String, System.String, System.Int32, System.Double)
  type: Method
  source:
    id: FindUtxoToSplit
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1720
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFind utxo which can be splited to lots. It is specific function which is used to auto splitter (old version, new version will do in in one tx)\nmissing number of lots. this is covered by function which use it.\n"
  example: []
  syntax:
    content: public static Task<Utxos> FindUtxoToSplit(string addr, string tokenId, int lotAmount = 100, double oneTokenSat = 10000)
    parameters:
    - id: addr
      type: System.String
      description: address which has utxos
    - id: tokenId
      type: System.String
      description: token id hash
    - id: lotAmount
      type: System.Int32
      description: amount of tokens in one lot
    - id: oneTokenSat
      type: System.Double
      description: this is usually default. On Neblio all token tx should have value 10000sat
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.Utxos}
      description: ''
    content.vb: Public Shared Function FindUtxoToSplit(addr As String, tokenId As String, lotAmount As Integer = 100, oneTokenSat As Double = 10000) As Task(Of Utxos)
  overload: VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata(System.String,System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata(System.String,System.String)
  id: GetTransactionMetadata(System.String,System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetTransactionMetadata(String, String)
  nameWithType: NeblioTransactionHelpers.GetTransactionMetadata(String, String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata(System.String, System.String)
  type: Method
  source:
    id: GetTransactionMetadata
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1753
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturns metadata in the token transction\n"
  example: []
  syntax:
    content: public static Task<Dictionary<string, string>> GetTransactionMetadata(string tokenid, string txid)
    parameters:
    - id: tokenid
      type: System.String
      description: token id hash
    - id: txid
      type: System.String
      description: tx id hash
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
      description: ''
    content.vb: Public Shared Function GetTransactionMetadata(tokenid As String, txid As String) As Task(Of Dictionary(Of String, String))
  overload: VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction(System.String)
  id: GetLastSentTransaction(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetLastSentTransaction(String)
  nameWithType: NeblioTransactionHelpers.GetLastSentTransaction(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction(System.String)
  type: Method
  source:
    id: GetLastSentTransaction
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1779
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nFind last send transaction by some address.\nThis is usefull to obtain address public key from signature of input.\n"
  example: []
  syntax:
    content: public static Task<Transaction> GetLastSentTransaction(string address)
    parameters:
    - id: address
      type: System.String
      description: Searched address
    return:
      type: System.Threading.Tasks.Task{NBitcoin.Transaction}
      description: NBitcoin Transaction object
    content.vb: Public Shared Function GetLastSentTransaction(address As String) As Task(Of Transaction)
  overload: VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo(System.String)
  id: GetTransactionInfo(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetTransactionInfo(String)
  nameWithType: NeblioTransactionHelpers.GetTransactionInfo(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo(System.String)
  type: Method
  source:
    id: GetTransactionInfo
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1810
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nGet transaction info.\n"
  example: []
  syntax:
    content: public static Task<GetTransactionInfoResponse> GetTransactionInfo(string txid)
    parameters:
    - id: txid
      type: System.String
      description: tx id hash
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetTransactionInfoResponse}
      description: Neblio API GetTransactionInfo object
    content.vb: Public Shared Function GetTransactionInfo(txid As String) As Task(Of GetTransactionInfoResponse)
  overload: VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.SplitTheTokens(VEDriversLite.NeblioAccount,System.String,System.String,System.String,System.Int32,System.Int32)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.SplitTheTokens(VEDriversLite.NeblioAccount,System.String,System.String,System.String,System.Int32,System.Int32)
  id: SplitTheTokens(VEDriversLite.NeblioAccount,System.String,System.String,System.String,System.Int32,System.Int32)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: SplitTheTokens(NeblioAccount, String, String, String, Int32, Int32)
  nameWithType: NeblioTransactionHelpers.SplitTheTokens(NeblioAccount, String, String, String, Int32, Int32)
  fullName: VEDriversLite.NeblioTransactionHelpers.SplitTheTokens(VEDriversLite.NeblioAccount, System.String, System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    id: SplitTheTokens
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1834
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nNot recommended to use now. It split tokens to lots, but doing it in separated transactions. Will be changed to do it in one tx soon.\n"
  example: []
  syntax:
    content: public static Task<List<string>> SplitTheTokens(NeblioAccount account, string address, string password, string tokenId, int lotAmount, int numberOfLots)
    parameters:
    - id: account
      type: VEDriversLite.NeblioAccount
      description: ''
    - id: address
      type: System.String
      description: ''
    - id: password
      type: System.String
      description: ''
    - id: tokenId
      type: System.String
      description: ''
    - id: lotAmount
      type: System.Int32
      description: ''
    - id: numberOfLots
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
      description: ''
    content.vb: Public Shared Function SplitTheTokens(account As NeblioAccount, address As String, password As String, tokenId As String, lotAmount As Integer, numberOfLots As Integer) As Task(Of List(Of String))
  overload: VEDriversLite.NeblioTransactionHelpers.SplitTheTokens*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata(System.String)
  id: GetTokenMetadata(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetTokenMetadata(String)
  nameWithType: NeblioTransactionHelpers.GetTokenMetadata(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata(System.String)
  type: Method
  source:
    id: GetTokenMetadata
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1924
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nGet token issue metadata. Contains image url, issuer, and other info\n"
  example: []
  syntax:
    content: public static Task<GetTokenMetadataResponse> GetTokenMetadata(string tokenId)
    parameters:
    - id: tokenId
      type: System.String
      description: token id hash
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetTokenMetadataResponse}
      description: ''
    content.vb: Public Shared Function GetTokenMetadata(tokenId As String) As Task(Of GetTokenMetadataResponse)
  overload: VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  id: GetActualMintingSupply(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetActualMintingSupply(String, GetAddressInfoResponse)
  nameWithType: NeblioTransactionHelpers.GetActualMintingSupply(String, GetAddressInfoResponse)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply(System.String, VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  type: Method
  source:
    id: GetActualMintingSupply
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1945
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\ncheck actual supply for minting on some address. It is just for VENFT tokens now. \nFunction will also load token metadta if it has not loaded yet.\n"
  example: []
  syntax:
    content: public static Task<(double, GetTokenMetadataResponse)> GetActualMintingSupply(string address, GetAddressInfoResponse addressinfo = null)
    parameters:
    - id: address
      type: System.String
      description: address which has utxos
    - id: addressinfo
      type: VEDriversLite.NeblioAPI.GetAddressInfoResponse
      description: if you have already loaded address info with utxo list provide it to prevent unnecessary API requests
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Double,VEDriversLite.NeblioAPI.GetTokenMetadataResponse}}
      description: ''
    content.vb: Public Shared Function GetActualMintingSupply(address As String, addressinfo As GetAddressInfoResponse = Nothing) As Task(Of(Double, GetTokenMetadataResponse))
  overload: VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  id: CheckTokensSupplies(System.String,VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: CheckTokensSupplies(String, GetAddressInfoResponse)
  nameWithType: NeblioTransactionHelpers.CheckTokensSupplies(String, GetAddressInfoResponse)
  fullName: VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies(System.String, VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  type: Method
  source:
    id: CheckTokensSupplies
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 1979
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nCheck supply of all VENFT tokens on address.\n"
  example: []
  syntax:
    content: public static Task<Dictionary<string, TokenSupplyDto>> CheckTokensSupplies(string address, GetAddressInfoResponse addressinfo = null)
    parameters:
    - id: address
      type: System.String
      description: address which has utxos
    - id: addressinfo
      type: VEDriversLite.NeblioAPI.GetAddressInfoResponse
      description: if you have already loaded address info with utxo list provide it to prevent unnecessary API requests
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,VEDriversLite.TokenSupplyDto}}
      description: ''
    content.vb: Public Shared Function CheckTokensSupplies(address As String, addressinfo As GetAddressInfoResponse = Nothing) As Task(Of Dictionary(Of String, TokenSupplyDto))
  overload: VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.NeblioTransactionHelpers.GetTokenOwners(System.String)
  commentId: M:VEDriversLite.NeblioTransactionHelpers.GetTokenOwners(System.String)
  id: GetTokenOwners(System.String)
  parent: VEDriversLite.NeblioTransactionHelpers
  langs:
  - csharp
  - vb
  name: GetTokenOwners(String)
  nameWithType: NeblioTransactionHelpers.GetTokenOwners(String)
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTokenOwners(System.String)
  type: Method
  source:
    id: GetTokenOwners
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\NeblioTransactionHelpers.cs
    startLine: 2024
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite
  summary: "\nReturn VENFT top owners. It eliminate some testing addresses.\n"
  example: []
  syntax:
    content: public static Task<List<TokenOwnerDto>> GetTokenOwners(string tokenId)
    parameters:
    - id: tokenId
      type: System.String
      description: Token Id hash
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{VEDriversLite.TokenOwnerDto}}
      description: ''
    content.vb: Public Shared Function GetTokenOwners(tokenId As String) As Task(Of List(Of TokenOwnerDto))
  overload: VEDriversLite.NeblioTransactionHelpers.GetTokenOwners*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VEDriversLite
  commentId: N:VEDriversLite
  name: VEDriversLite
  nameWithType: VEDriversLite
  fullName: VEDriversLite
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: NBitcoin.Network
  commentId: T:NBitcoin.Network
  parent: NBitcoin
  isExternal: true
  name: Network
  nameWithType: Network
  fullName: NBitcoin.Network
- uid: NBitcoin
  commentId: N:NBitcoin
  isExternal: true
  name: NBitcoin
  nameWithType: NBitcoin
  fullName: NBitcoin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
  commentId: T:VEDriversLite.NeblioAPI.GetTokenMetadataResponse
  parent: VEDriversLite.NeblioAPI
  name: GetTokenMetadataResponse
  nameWithType: GetTokenMetadataResponse
  fullName: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
- uid: VEDriversLite.NeblioAPI
  commentId: N:VEDriversLite.NeblioAPI
  name: VEDriversLite.NeblioAPI
  nameWithType: VEDriversLite.NeblioAPI
  fullName: VEDriversLite.NeblioAPI
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.EventHandler{VEDriversLite.Events.IEventInfo}
  commentId: T:System.EventHandler{VEDriversLite.Events.IEventInfo}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<IEventInfo>
  nameWithType: EventHandler<IEventInfo>
  fullName: System.EventHandler<VEDriversLite.Events.IEventInfo>
  nameWithType.vb: EventHandler(Of IEventInfo)
  fullName.vb: System.EventHandler(Of VEDriversLite.Events.IEventInfo)
  name.vb: EventHandler(Of IEventInfo)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.Events.IEventInfo
    name: IEventInfo
    nameWithType: IEventInfo
    fullName: VEDriversLite.Events.IEventInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.Events.IEventInfo
    name: IEventInfo
    nameWithType: IEventInfo
    fullName: VEDriversLite.Events.IEventInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.ShortenAddress*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.ShortenAddress
  name: ShortenAddress
  nameWithType: NeblioTransactionHelpers.ShortenAddress
  fullName: VEDriversLite.NeblioTransactionHelpers.ShortenAddress
- uid: VEDriversLite.NeblioTransactionHelpers.ShortenTxId*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.ShortenTxId
  name: ShortenTxId
  nameWithType: NeblioTransactionHelpers.ShortenTxId
  fullName: VEDriversLite.NeblioTransactionHelpers.ShortenTxId
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey
  name: GetAddressAndKey
  nameWithType: NeblioTransactionHelpers.GetAddressAndKey
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressAndKey
- uid: VEDriversLite.Security.EncryptionKey
  commentId: T:VEDriversLite.Security.EncryptionKey
  parent: VEDriversLite.Security
  name: EncryptionKey
  nameWithType: EncryptionKey
  fullName: VEDriversLite.Security.EncryptionKey
- uid: System.Threading.Tasks.Task{System.ValueTuple{NBitcoin.BitcoinAddress,NBitcoin.BitcoinSecret}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{NBitcoin.BitcoinAddress,NBitcoin.BitcoinSecret}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<BitcoinAddress, BitcoinSecret>>
  nameWithType: Task<ValueTuple<BitcoinAddress, BitcoinSecret>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<NBitcoin.BitcoinAddress, NBitcoin.BitcoinSecret>>
  nameWithType.vb: Task(Of ValueTuple(Of BitcoinAddress, BitcoinSecret))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of NBitcoin.BitcoinAddress, NBitcoin.BitcoinSecret))
  name.vb: Task(Of ValueTuple(Of BitcoinAddress, BitcoinSecret))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NBitcoin.BitcoinAddress
    name: BitcoinAddress
    nameWithType: BitcoinAddress
    fullName: NBitcoin.BitcoinAddress
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NBitcoin.BitcoinSecret
    name: BitcoinSecret
    nameWithType: BitcoinSecret
    fullName: NBitcoin.BitcoinSecret
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NBitcoin.BitcoinAddress
    name: BitcoinAddress
    nameWithType: BitcoinAddress
    fullName: NBitcoin.BitcoinAddress
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NBitcoin.BitcoinSecret
    name: BitcoinSecret
    nameWithType: BitcoinSecret
    fullName: NBitcoin.BitcoinSecret
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.Security
  commentId: N:VEDriversLite.Security
  name: VEDriversLite.Security
  nameWithType: VEDriversLite.Security
  fullName: VEDriversLite.Security
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction
  name: BroadcastSignedTransaction
  nameWithType: NeblioTransactionHelpers.BroadcastSignedTransaction
  fullName: VEDriversLite.NeblioTransactionHelpers.BroadcastSignedTransaction
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject
  name: GetSendTokenObject
  nameWithType: NeblioTransactionHelpers.GetSendTokenObject
  fullName: VEDriversLite.NeblioTransactionHelpers.GetSendTokenObject
- uid: VEDriversLite.NeblioAPI.SendTokenRequest
  commentId: T:VEDriversLite.NeblioAPI.SendTokenRequest
  parent: VEDriversLite.NeblioAPI
  name: SendTokenRequest
  nameWithType: SendTokenRequest
  fullName: VEDriversLite.NeblioAPI.SendTokenRequest
- uid: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI
  name: SendNTP1TokenAPI
  nameWithType: NeblioTransactionHelpers.SendNTP1TokenAPI
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPI
- uid: VEDriversLite.SendTokenTxData
  commentId: T:VEDriversLite.SendTokenTxData
  parent: VEDriversLite
  name: SendTokenTxData
  nameWithType: SendTokenTxData
  fullName: VEDriversLite.SendTokenTxData
- uid: VEDriversLite.NeblioAccount
  commentId: T:VEDriversLite.NeblioAccount
  parent: VEDriversLite
  name: NeblioAccount
  nameWithType: NeblioAccount
  fullName: VEDriversLite.NeblioAccount
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync
  name: SendNTP1TokenAPIAsync
  nameWithType: NeblioTransactionHelpers.SendNTP1TokenAPIAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenAPIAsync
- uid: VEDriversLite.NeblioTransactionHelpers.MintNFTToken*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.MintNFTToken
  name: MintNFTToken
  nameWithType: NeblioTransactionHelpers.MintNFTToken
  fullName: VEDriversLite.NeblioTransactionHelpers.MintNFTToken
- uid: VEDriversLite.MintNFTData
  commentId: T:VEDriversLite.MintNFTData
  parent: VEDriversLite
  name: MintNFTData
  nameWithType: MintNFTData
  fullName: VEDriversLite.MintNFTData
- uid: System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
  commentId: T:System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Utxos>
  nameWithType: ICollection<Utxos>
  fullName: System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>
  nameWithType.vb: ICollection(Of Utxos)
  fullName.vb: System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos)
  name.vb: ICollection(Of Utxos)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync
  name: MintNFTTokenAsync
  nameWithType: NeblioTransactionHelpers.MintNFTTokenAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.MintNFTTokenAsync
- uid: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken
  name: MintMultiNFTToken
  nameWithType: NeblioTransactionHelpers.MintMultiNFTToken
  fullName: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTToken
- uid: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync
  name: MintMultiNFTTokenAsync
  nameWithType: NeblioTransactionHelpers.MintMultiNFTTokenAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.MintMultiNFTTokenAsync
- uid: VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync
  name: SendNFTTokenAsync
  nameWithType: NeblioTransactionHelpers.SendNFTTokenAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNFTTokenAsync
- uid: VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync
  name: SendTokenLotAsync
  nameWithType: NeblioTransactionHelpers.SendTokenLotAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendTokenLotAsync
- uid: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI
  name: SendNeblioTransactionAPI
  nameWithType: NeblioTransactionHelpers.SendNeblioTransactionAPI
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPI
- uid: VEDriversLite.SendTxData
  commentId: T:VEDriversLite.SendTxData
  parent: VEDriversLite
  name: SendTxData
  nameWithType: SendTxData
  fullName: VEDriversLite.SendTxData
- uid: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync
  name: SendNeblioTransactionAPIAsync
  nameWithType: NeblioTransactionHelpers.SendNeblioTransactionAPIAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNeblioTransactionAPIAsync
- uid: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync
  name: SendNTP1TokenWithPaymentAPIAsync
  nameWithType: NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendNTP1TokenWithPaymentAPIAsync
- uid: VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync
  name: SendMultiTokenAPIAsync
  nameWithType: NeblioTransactionHelpers.SendMultiTokenAPIAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendMultiTokenAPIAsync
- uid: VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync
  name: SendRawNTP1TxAsync
  nameWithType: NeblioTransactionHelpers.SendRawNTP1TxAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.SendRawNTP1TxAsync
- uid: VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync
  name: BroadcastNTP1TxAsync
  nameWithType: NeblioTransactionHelpers.BroadcastNTP1TxAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.BroadcastNTP1TxAsync
- uid: VEDriversLite.NeblioAPI.BroadcastTxRequest
  commentId: T:VEDriversLite.NeblioAPI.BroadcastTxRequest
  parent: VEDriversLite.NeblioAPI
  name: BroadcastTxRequest
  nameWithType: BroadcastTxRequest
  fullName: VEDriversLite.NeblioAPI.BroadcastTxRequest
- uid: VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync
  name: AddressInfoAsync
  nameWithType: NeblioTransactionHelpers.AddressInfoAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.AddressInfoAsync
- uid: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetAddressResponse}
  commentId: T:System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetAddressResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetAddressResponse>
  nameWithType: Task<GetAddressResponse>
  fullName: System.Threading.Tasks.Task<VEDriversLite.NeblioAPI.GetAddressResponse>
  nameWithType.vb: Task(Of GetAddressResponse)
  fullName.vb: System.Threading.Tasks.Task(Of VEDriversLite.NeblioAPI.GetAddressResponse)
  name.vb: Task(Of GetAddressResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.GetAddressResponse
    name: GetAddressResponse
    nameWithType: GetAddressResponse
    fullName: VEDriversLite.NeblioAPI.GetAddressResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.GetAddressResponse
    name: GetAddressResponse
    nameWithType: GetAddressResponse
    fullName: VEDriversLite.NeblioAPI.GetAddressResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync
  name: AddressInfoUtxosAsync
  nameWithType: NeblioTransactionHelpers.AddressInfoUtxosAsync
  fullName: VEDriversLite.NeblioTransactionHelpers.AddressInfoUtxosAsync
- uid: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetAddressInfoResponse}
  commentId: T:System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetAddressInfoResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetAddressInfoResponse>
  nameWithType: Task<GetAddressInfoResponse>
  fullName: System.Threading.Tasks.Task<VEDriversLite.NeblioAPI.GetAddressInfoResponse>
  nameWithType.vb: Task(Of GetAddressInfoResponse)
  fullName.vb: System.Threading.Tasks.Task(Of VEDriversLite.NeblioAPI.GetAddressInfoResponse)
  name.vb: Task(Of GetAddressInfoResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.GetAddressInfoResponse
    name: GetAddressInfoResponse
    nameWithType: GetAddressInfoResponse
    fullName: VEDriversLite.NeblioAPI.GetAddressInfoResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.GetAddressInfoResponse
    name: GetAddressInfoResponse
    nameWithType: GetAddressInfoResponse
    fullName: VEDriversLite.NeblioAPI.GetAddressInfoResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos
  name: GetAddressUtxos
  nameWithType: NeblioTransactionHelpers.GetAddressUtxos
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxos
- uid: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Anonymous}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Anonymous}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ICollection<Anonymous>>
  nameWithType: Task<ICollection<Anonymous>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Anonymous>>
  nameWithType.vb: Task(Of ICollection(Of Anonymous))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Anonymous))
  name.vb: Task(Of ICollection(Of Anonymous))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.Anonymous
    name: Anonymous
    nameWithType: Anonymous
    fullName: VEDriversLite.NeblioAPI.Anonymous
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.Anonymous
    name: Anonymous
    nameWithType: Anonymous
    fullName: VEDriversLite.NeblioAPI.Anonymous
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects
  name: GetAddressUtxosObjects
  nameWithType: NeblioTransactionHelpers.GetAddressUtxosObjects
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressUtxosObjects
- uid: System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.ICollection{VEDriversLite.NeblioAPI.Utxos}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ICollection<Utxos>>
  nameWithType: Task<ICollection<Utxos>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VEDriversLite.NeblioAPI.Utxos>>
  nameWithType.vb: Task(Of ICollection(Of Utxos))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.ICollection(Of VEDriversLite.NeblioAPI.Utxos))
  name.vb: Task(Of ICollection(Of Utxos))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos
  name: GetAddressTokensUtxos
  nameWithType: NeblioTransactionHelpers.GetAddressTokensUtxos
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressTokensUtxos
- uid: VEDriversLite.NeblioAPI.GetAddressInfoResponse
  commentId: T:VEDriversLite.NeblioAPI.GetAddressInfoResponse
  parent: VEDriversLite.NeblioAPI
  name: GetAddressInfoResponse
  nameWithType: GetAddressInfoResponse
  fullName: VEDriversLite.NeblioAPI.GetAddressInfoResponse
- uid: VEDriversLite.NeblioTransactionHelpers.GetTxHex*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetTxHex
  name: GetTxHex
  nameWithType: NeblioTransactionHelpers.GetTxHex
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTxHex
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos
  name: GetAddressNFTsUtxos
  nameWithType: NeblioTransactionHelpers.GetAddressNFTsUtxos
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressNFTsUtxos
- uid: VEDriversLite.NeblioTransactionHelpers.GetSendAmount*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetSendAmount
  name: GetSendAmount
  nameWithType: NeblioTransactionHelpers.GetSendAmount
  fullName: VEDriversLite.NeblioTransactionHelpers.GetSendAmount
- uid: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
  commentId: T:VEDriversLite.NeblioAPI.GetTransactionInfoResponse
  parent: VEDriversLite.NeblioAPI
  name: GetTransactionInfoResponse
  nameWithType: GetTransactionInfoResponse
  fullName: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
- uid: System.Threading.Tasks.Task{System.Double}
  commentId: T:System.Threading.Tasks.Task{System.Double}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Double>
  nameWithType: Task<Double>
  fullName: System.Threading.Tasks.Task<System.Double>
  nameWithType.vb: Task(Of Double)
  fullName.vb: System.Threading.Tasks.Task(Of System.Double)
  name.vb: Task(Of Double)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo
  name: GetAddressNeblUtxo
  nameWithType: NeblioTransactionHelpers.GetAddressNeblUtxo
  fullName: VEDriversLite.NeblioTransactionHelpers.GetAddressNeblUtxo
- uid: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo
  name: ValidateNeblioUtxo
  nameWithType: NeblioTransactionHelpers.ValidateNeblioUtxo
  fullName: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioUtxo
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,System.Double}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Boolean,System.Double}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<Boolean, Double>>
  nameWithType: Task<ValueTuple<Boolean, Double>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.Boolean, System.Double>>
  nameWithType.vb: Task(Of ValueTuple(Of Boolean, Double))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.Boolean, System.Double))
  name.vb: Task(Of ValueTuple(Of Boolean, Double))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo
  name: ValidateNeblioTokenUtxo
  nameWithType: NeblioTransactionHelpers.ValidateNeblioTokenUtxo
  fullName: VEDriversLite.NeblioTransactionHelpers.ValidateNeblioTokenUtxo
- uid: VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo
  name: ValidateOneTokenNFTUtxo
  nameWithType: NeblioTransactionHelpers.ValidateOneTokenNFTUtxo
  fullName: VEDriversLite.NeblioTransactionHelpers.ValidateOneTokenNFTUtxo
- uid: VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT
  name: FindUtxoForMintNFT
  nameWithType: NeblioTransactionHelpers.FindUtxoForMintNFT
  fullName: VEDriversLite.NeblioTransactionHelpers.FindUtxoForMintNFT
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{VEDriversLite.NeblioAPI.Utxos}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{VEDriversLite.NeblioAPI.Utxos}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<Utxos>>
  nameWithType: Task<List<Utxos>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<VEDriversLite.NeblioAPI.Utxos>>
  nameWithType.vb: Task(Of List(Of Utxos))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of VEDriversLite.NeblioAPI.Utxos))
  name.vb: Task(Of List(Of Utxos))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit
  name: FindUtxoToSplit
  nameWithType: NeblioTransactionHelpers.FindUtxoToSplit
  fullName: VEDriversLite.NeblioTransactionHelpers.FindUtxoToSplit
- uid: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.Utxos}
  commentId: T:System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.Utxos}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Utxos>
  nameWithType: Task<Utxos>
  fullName: System.Threading.Tasks.Task<VEDriversLite.NeblioAPI.Utxos>
  nameWithType.vb: Task(Of Utxos)
  fullName.vb: System.Threading.Tasks.Task(Of VEDriversLite.NeblioAPI.Utxos)
  name.vb: Task(Of Utxos)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.Utxos
    name: Utxos
    nameWithType: Utxos
    fullName: VEDriversLite.NeblioAPI.Utxos
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata
  name: GetTransactionMetadata
  nameWithType: NeblioTransactionHelpers.GetTransactionMetadata
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTransactionMetadata
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<String, String>>
  nameWithType: Task<Dictionary<String, String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String, System.String>>
  nameWithType.vb: Task(Of Dictionary(Of String, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Task(Of Dictionary(Of String, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction
  name: GetLastSentTransaction
  nameWithType: NeblioTransactionHelpers.GetLastSentTransaction
  fullName: VEDriversLite.NeblioTransactionHelpers.GetLastSentTransaction
- uid: System.Threading.Tasks.Task{NBitcoin.Transaction}
  commentId: T:System.Threading.Tasks.Task{NBitcoin.Transaction}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Transaction>
  nameWithType: Task<Transaction>
  fullName: System.Threading.Tasks.Task<NBitcoin.Transaction>
  nameWithType.vb: Task(Of Transaction)
  fullName.vb: System.Threading.Tasks.Task(Of NBitcoin.Transaction)
  name.vb: Task(Of Transaction)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NBitcoin.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: NBitcoin.Transaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NBitcoin.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: NBitcoin.Transaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo
  name: GetTransactionInfo
  nameWithType: NeblioTransactionHelpers.GetTransactionInfo
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTransactionInfo
- uid: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetTransactionInfoResponse}
  commentId: T:System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetTransactionInfoResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTransactionInfoResponse>
  nameWithType: Task<GetTransactionInfoResponse>
  fullName: System.Threading.Tasks.Task<VEDriversLite.NeblioAPI.GetTransactionInfoResponse>
  nameWithType.vb: Task(Of GetTransactionInfoResponse)
  fullName.vb: System.Threading.Tasks.Task(Of VEDriversLite.NeblioAPI.GetTransactionInfoResponse)
  name.vb: Task(Of GetTransactionInfoResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
    name: GetTransactionInfoResponse
    nameWithType: GetTransactionInfoResponse
    fullName: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
    name: GetTransactionInfoResponse
    nameWithType: GetTransactionInfoResponse
    fullName: VEDriversLite.NeblioAPI.GetTransactionInfoResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.SplitTheTokens*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.SplitTheTokens
  name: SplitTheTokens
  nameWithType: NeblioTransactionHelpers.SplitTheTokens
  fullName: VEDriversLite.NeblioTransactionHelpers.SplitTheTokens
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<String>>
  nameWithType: Task<List<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<System.String>>
  nameWithType.vb: Task(Of List(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of System.String))
  name.vb: Task(Of List(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata
  name: GetTokenMetadata
  nameWithType: NeblioTransactionHelpers.GetTokenMetadata
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTokenMetadata
- uid: System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetTokenMetadataResponse}
  commentId: T:System.Threading.Tasks.Task{VEDriversLite.NeblioAPI.GetTokenMetadataResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTokenMetadataResponse>
  nameWithType: Task<GetTokenMetadataResponse>
  fullName: System.Threading.Tasks.Task<VEDriversLite.NeblioAPI.GetTokenMetadataResponse>
  nameWithType.vb: Task(Of GetTokenMetadataResponse)
  fullName.vb: System.Threading.Tasks.Task(Of VEDriversLite.NeblioAPI.GetTokenMetadataResponse)
  name.vb: Task(Of GetTokenMetadataResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
    name: GetTokenMetadataResponse
    nameWithType: GetTokenMetadataResponse
    fullName: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
    name: GetTokenMetadataResponse
    nameWithType: GetTokenMetadataResponse
    fullName: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply
  name: GetActualMintingSupply
  nameWithType: NeblioTransactionHelpers.GetActualMintingSupply
  fullName: VEDriversLite.NeblioTransactionHelpers.GetActualMintingSupply
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Double,VEDriversLite.NeblioAPI.GetTokenMetadataResponse}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Double,VEDriversLite.NeblioAPI.GetTokenMetadataResponse}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ValueTuple<Double, GetTokenMetadataResponse>>
  nameWithType: Task<ValueTuple<Double, GetTokenMetadataResponse>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.Double, VEDriversLite.NeblioAPI.GetTokenMetadataResponse>>
  nameWithType.vb: Task(Of ValueTuple(Of Double, GetTokenMetadataResponse))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.Double, VEDriversLite.NeblioAPI.GetTokenMetadataResponse))
  name.vb: Task(Of ValueTuple(Of Double, GetTokenMetadataResponse))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
    name: GetTokenMetadataResponse
    nameWithType: GetTokenMetadataResponse
    fullName: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
    name: GetTokenMetadataResponse
    nameWithType: GetTokenMetadataResponse
    fullName: VEDriversLite.NeblioAPI.GetTokenMetadataResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies
  name: CheckTokensSupplies
  nameWithType: NeblioTransactionHelpers.CheckTokensSupplies
  fullName: VEDriversLite.NeblioTransactionHelpers.CheckTokensSupplies
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,VEDriversLite.TokenSupplyDto}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,VEDriversLite.TokenSupplyDto}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<String, TokenSupplyDto>>
  nameWithType: Task<Dictionary<String, TokenSupplyDto>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String, VEDriversLite.TokenSupplyDto>>
  nameWithType.vb: Task(Of Dictionary(Of String, TokenSupplyDto))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of System.String, VEDriversLite.TokenSupplyDto))
  name.vb: Task(Of Dictionary(Of String, TokenSupplyDto))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VEDriversLite.TokenSupplyDto
    name: TokenSupplyDto
    nameWithType: TokenSupplyDto
    fullName: VEDriversLite.TokenSupplyDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VEDriversLite.TokenSupplyDto
    name: TokenSupplyDto
    nameWithType: TokenSupplyDto
    fullName: VEDriversLite.TokenSupplyDto
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: VEDriversLite.NeblioTransactionHelpers.GetTokenOwners*
  commentId: Overload:VEDriversLite.NeblioTransactionHelpers.GetTokenOwners
  name: GetTokenOwners
  nameWithType: NeblioTransactionHelpers.GetTokenOwners
  fullName: VEDriversLite.NeblioTransactionHelpers.GetTokenOwners
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{VEDriversLite.TokenOwnerDto}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{VEDriversLite.TokenOwnerDto}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TokenOwnerDto>>
  nameWithType: Task<List<TokenOwnerDto>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<VEDriversLite.TokenOwnerDto>>
  nameWithType.vb: Task(Of List(Of TokenOwnerDto))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of VEDriversLite.TokenOwnerDto))
  name.vb: Task(Of List(Of TokenOwnerDto))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.TokenOwnerDto
    name: TokenOwnerDto
    nameWithType: TokenOwnerDto
    fullName: VEDriversLite.TokenOwnerDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.TokenOwnerDto
    name: TokenOwnerDto
    nameWithType: TokenOwnerDto
    fullName: VEDriversLite.TokenOwnerDto
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
