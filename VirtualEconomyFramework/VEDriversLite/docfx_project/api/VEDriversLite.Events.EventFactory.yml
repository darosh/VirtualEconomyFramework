### YamlMime:ManagedReference
items:
- uid: VEDriversLite.Events.EventFactory
  commentId: T:VEDriversLite.Events.EventFactory
  id: EventFactory
  parent: VEDriversLite.Events
  children:
  - VEDriversLite.Events.EventFactory.Clone(VEDriversLite.Events.IEventInfo,System.Boolean,VEDriversLite.Events.EventType)
  - VEDriversLite.Events.EventFactory.GetEvent(VEDriversLite.Events.EventType,System.String,System.String,System.String,System.String,System.Double)
  langs:
  - csharp
  - vb
  name: EventFactory
  nameWithType: EventFactory
  fullName: VEDriversLite.Events.EventFactory
  type: Class
  source:
    id: EventFactory
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\Events\EventFactory.cs
    startLine: 7
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite.Events
  syntax:
    content: public static class EventFactory
    content.vb: Public Module EventFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VEDriversLite.Events.EventFactory.GetEvent(VEDriversLite.Events.EventType,System.String,System.String,System.String,System.String,System.Double)
  commentId: M:VEDriversLite.Events.EventFactory.GetEvent(VEDriversLite.Events.EventType,System.String,System.String,System.String,System.String,System.Double)
  id: GetEvent(VEDriversLite.Events.EventType,System.String,System.String,System.String,System.String,System.Double)
  parent: VEDriversLite.Events.EventFactory
  langs:
  - csharp
  - vb
  name: GetEvent(EventType, String, String, String, String, Double)
  nameWithType: EventFactory.GetEvent(EventType, String, String, String, String, Double)
  fullName: VEDriversLite.Events.EventFactory.GetEvent(VEDriversLite.Events.EventType, System.String, System.String, System.String, System.String, System.Double)
  type: Method
  source:
    id: GetEvent
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\Events\EventFactory.cs
    startLine: 9
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite.Events
  syntax:
    content: public static Task<IEventInfo> GetEvent(EventType type, string title, string message, string address = "", string txid = "", double progress = 0)
    parameters:
    - id: type
      type: VEDriversLite.Events.EventType
    - id: title
      type: System.String
    - id: message
      type: System.String
    - id: address
      type: System.String
    - id: txid
      type: System.String
    - id: progress
      type: System.Double
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.Events.IEventInfo}
    content.vb: Public Shared Function GetEvent(type As EventType, title As String, message As String, address As String = "", txid As String = "", progress As Double = 0) As Task(Of IEventInfo)
  overload: VEDriversLite.Events.EventFactory.GetEvent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VEDriversLite.Events.EventFactory.Clone(VEDriversLite.Events.IEventInfo,System.Boolean,VEDriversLite.Events.EventType)
  commentId: M:VEDriversLite.Events.EventFactory.Clone(VEDriversLite.Events.IEventInfo,System.Boolean,VEDriversLite.Events.EventType)
  id: Clone(VEDriversLite.Events.IEventInfo,System.Boolean,VEDriversLite.Events.EventType)
  parent: VEDriversLite.Events.EventFactory
  langs:
  - csharp
  - vb
  name: Clone(IEventInfo, Boolean, EventType)
  nameWithType: EventFactory.Clone(IEventInfo, Boolean, EventType)
  fullName: VEDriversLite.Events.EventFactory.Clone(VEDriversLite.Events.IEventInfo, System.Boolean, VEDriversLite.Events.EventType)
  type: Method
  source:
    id: Clone
    path: C:\repositories\VirtualEconomyFramework\VirtualEconomyFramework\VEDriversLite\Events\EventFactory.cs
    startLine: 31
  assemblies:
  - VEDriversLite
  namespace: VEDriversLite.Events
  syntax:
    content: public static Task<IEventInfo> Clone(IEventInfo inev, bool asType = false, EventType type = EventType.Info)
    parameters:
    - id: inev
      type: VEDriversLite.Events.IEventInfo
    - id: asType
      type: System.Boolean
    - id: type
      type: VEDriversLite.Events.EventType
    return:
      type: System.Threading.Tasks.Task{VEDriversLite.Events.IEventInfo}
    content.vb: Public Shared Function Clone(inev As IEventInfo, asType As Boolean = False, type As EventType = EventType.Info) As Task(Of IEventInfo)
  overload: VEDriversLite.Events.EventFactory.Clone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VEDriversLite.Events
  commentId: N:VEDriversLite.Events
  name: VEDriversLite.Events
  nameWithType: VEDriversLite.Events
  fullName: VEDriversLite.Events
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VEDriversLite.Events.EventFactory.GetEvent*
  commentId: Overload:VEDriversLite.Events.EventFactory.GetEvent
  name: GetEvent
  nameWithType: EventFactory.GetEvent
  fullName: VEDriversLite.Events.EventFactory.GetEvent
- uid: VEDriversLite.Events.EventType
  commentId: T:VEDriversLite.Events.EventType
  parent: VEDriversLite.Events
  name: EventType
  nameWithType: EventType
  fullName: VEDriversLite.Events.EventType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Threading.Tasks.Task{VEDriversLite.Events.IEventInfo}
  commentId: T:System.Threading.Tasks.Task{VEDriversLite.Events.IEventInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEventInfo>
  nameWithType: Task<IEventInfo>
  fullName: System.Threading.Tasks.Task<VEDriversLite.Events.IEventInfo>
  nameWithType.vb: Task(Of IEventInfo)
  fullName.vb: System.Threading.Tasks.Task(Of VEDriversLite.Events.IEventInfo)
  name.vb: Task(Of IEventInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VEDriversLite.Events.IEventInfo
    name: IEventInfo
    nameWithType: IEventInfo
    fullName: VEDriversLite.Events.IEventInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VEDriversLite.Events.IEventInfo
    name: IEventInfo
    nameWithType: IEventInfo
    fullName: VEDriversLite.Events.IEventInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: VEDriversLite.Events.EventFactory.Clone*
  commentId: Overload:VEDriversLite.Events.EventFactory.Clone
  name: Clone
  nameWithType: EventFactory.Clone
  fullName: VEDriversLite.Events.EventFactory.Clone
- uid: VEDriversLite.Events.IEventInfo
  commentId: T:VEDriversLite.Events.IEventInfo
  parent: VEDriversLite.Events
  name: IEventInfo
  nameWithType: IEventInfo
  fullName: VEDriversLite.Events.IEventInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
