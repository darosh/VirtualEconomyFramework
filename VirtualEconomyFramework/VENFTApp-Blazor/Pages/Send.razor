@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@page "/send"

<div class="container-fluid">
    @if (errorDuringSend)
    {
        <Alert Type="@AlertType.Error"
               Message="Error"
               Description=@errorMessage
               ShowIcon="true" />
    }

    @if (AppData.Account.IsLocked())
    {
        <Alert Type="@AlertType.Error"
               Message="Error"
               Description="Account Is Locked. Please unlock account first."
               ShowIcon="true" />
    }

    <Spin spinning="@sendingTransaction" tip="Sending Transaction...">
        <div class="row">
            <div class="col">
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <h1>Send VENFT Tokens</h1>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Available source tokens on address: @availableTokens</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>From:</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>@AppData.Account.Address</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>To:</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Input Placeholder="Add receiver address" @bind-Value=@tokenReceiver Style="font-size:12px; min-width:250px;" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Amount of tokens:</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Input ShowUpDown="false" TValue="int" @bind-Value=@AmountTokensToSend Style="font-size:12px; min-width:250px;" />
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <button class="btn btn-primary" @onclick="SendTokenTx">Send</button>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Sent transaction: <a href="https://explorer.nebl.io/tx/@txid" target="_blank">@tokentxid</a></p>
                    </div>
                </div>

                <div class="row" style="margin-top:40px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <h1>Send Neblio</h1>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Actual Balance: @addressInfo.Balance NEBL</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Unconfirmed Balance: @addressInfo.UnconfirmedBalance NEBL</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>From:</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>@AppData.Account.Address</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>To:</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Input Placeholder="Add receiver address" @bind-Value=@neblReceiver Style="font-size:12px; min-width:250px;" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Amount of Nebl:</p>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Input ShowUpDown="false" TValue="double" Format="0.000" @bind-Value=@AmountToSend Style="font-size:12px; min-width:250px;" />
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <button class="btn btn-primary" @onclick="SendTx">Send</button>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Sent transaction: <a href="https://explorer.nebl.io/tx/@txid" target="_blank">@txid</a></p>
                    </div>
                </div>
            </div>
        </div>

    </Spin>

</div>


@code {
    bool errorDuringSend = false;
    string errorMessage = string.Empty;
    bool sendingTransaction = false;
    private string txid = string.Empty;
    private string tokentxid = string.Empty;
    private string tokenReceiver = string.Empty;
    private string neblReceiver = string.Empty;
    private int AmountTokensToSend = 1;
    private double AmountToSend = 0.001;

    double availableTokens = 0;
    GetTokenMetadataResponse sourceTokensInfo = new GetTokenMetadataResponse();

    private GetAddressResponse addressInfo = new GetAddressResponse();
    private System.Threading.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                AppData.Account = new NeblioAccount();
                await Task.Delay(500);
                NavManager.NavigateTo("/");
            }
            else
            {
                var mintingSupply = await NeblioTransactionHelpers.GetActualMintingSupply(AppData.Account.Address);
                availableTokens = mintingSupply.Item1;
                sourceTokensInfo = mintingSupply.Item2;
                addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);

                timer = new System.Threading.Timer(async (object stateInfo) =>
                {
                    var mintingSupply = await NeblioTransactionHelpers.GetActualMintingSupply(AppData.Account.Address);
                    availableTokens = mintingSupply.Item1;
                    sourceTokensInfo = mintingSupply.Item2;

                    addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);
                    StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                }, new System.Threading.AutoResetEvent(false), 2000, 2000);

            }
        }
        catch(Exception ex)
        {
            AppData.Account = new NeblioAccount();
            await Task.Delay(500);
            NavManager.NavigateTo("/");
        }
    }

    private async Task SendTokenTx()
    {
        errorDuringSend = false;

        if (AppData.Account.IsLocked())
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "Account is locked!";
            StateHasChanged();
            return;
        }

        var nutxos = await NeblioTransactionHelpers.GetAddressNeblUtxo(AppData.Account.Address, 0.0001, 0.0002);
        if (nutxos.Count == 0)
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "You dont have Neblio on the address!";
            StateHasChanged();
            return;
        }

        var tutxos = await NeblioTransactionHelpers.FindUtxoForMintNFT(AppData.Account.Address, NFTHelpers.TokenId, 1);

        if (tutxos.Count == 0)
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "You dont have VENFT tokens on the address!";
            StateHasChanged();
            return;
        }

        sendingTransaction = true;
        tokentxid = "Sending...";
        StateHasChanged();

        // create token metadata
        var metadata = new Dictionary<string, string>();
        metadata.Add("Data", "Sent with https://ve-nft.com/");

        // fill input data for sending tx
        var dto = new SendTokenTxData() // please check SendTokenTxData for another properties such as specify source UTXOs
        {
            Amount = Convert.ToDouble(AmountTokensToSend),
            Id = "La58e9EeXUMx41uyfqk6kgVWAQq9yBs44nuQW8", // id of token
            Symbol = "VENFT", // symbol of token
            Metadata = metadata,
            Password = "", // put here your password
            SenderAddress = AppData.Account.Address,
            ReceiverAddress = tokenReceiver
        };

        try
        {
            // send tx
            var rtxid = await NeblioTransactionHelpers.SendNTP1TokenAPIAsync(dto, AppData.Account);
            if (rtxid != null)
            {
                tokentxid = rtxid;
                sendingTransaction = false;
            }
        }
        catch (Exception ex)
        {
            tokentxid = ex.Message;
            errorDuringSend = true;
            sendingTransaction = false;
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    private async Task SendTx()
    {
        errorDuringSend = false;

        if (AppData.Account.IsLocked())
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "Account is locked!";
            StateHasChanged();
            return;
        }

        var nutxos = await NeblioTransactionHelpers.GetAddressNeblUtxo(AppData.Account.Address, 0.0001, 0.0002);
        if (nutxos.Count == 0)
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "You dont have Neblio on the address!";
            StateHasChanged();
            return;
        }

        var tutxos = await NeblioTransactionHelpers.FindUtxoForMintNFT(AppData.Account.Address, NFTHelpers.TokenId, 1);

        if (tutxos.Count == 0)
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "You dont have VENFT tokens on the address!";
            StateHasChanged();
            return;
        }

        sendingTransaction = true;
        txid = "Sending...";
        StateHasChanged();

        // fill input data for sending tx
        var dto = new SendTxData() // please check SendTokenTxData for another properties such as specify source UTXOs
        {
            Amount = AmountToSend,
            Password = "", // put here your password
            SenderAddress = AppData.Account.Address,
            ReceiverAddress = neblReceiver
        };

        try
        {
            // send tx
            var rtxid = await NeblioTransactionHelpers.SendNeblioTransactionAPIAsync(dto, AppData.Account);
            if (rtxid != null)
            {
                txid = rtxid;
                sendingTransaction = false;
            }
        }
        catch (Exception ex)
        {
            txid = ex.Message;
            errorDuringSend = true;
            sendingTransaction = false;
            errorMessage = ex.Message;
        }
        StateHasChanged();
    }
}
