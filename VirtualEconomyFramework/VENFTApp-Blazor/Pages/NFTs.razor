@using VEDriversLite
@using VEDriversLite.NFT
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AppData AppData
@inject HttpClient _client
@page "/nfts"

<h1>Address NFTs</h1>

<p>Address: @AppData.Account.Address</p>

<button class="btn btn-primary" @onclick="LoadNFTs"><i class="oi oi-reload"></i></button>
<hr />

@if (AppData.Account.NFTs.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" style="margin-top:50px;">
        <thead>
            <tr>
                <th>TxId</th>
                <th>Author</th>
                <th>ImageLink</th>
                <th>Image</th>
                <th>Info</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var nft in AppData.Account.NFTs)
            {
            <tr>
                <td>@nft.Description</td>
                <td>@nft.Author</td>
                <td>@nft.Description</td>
                <td><img src="@nft.ImageLink" style="min-height:50px; max-height:100px; width:auto;" /></td>
                <td><button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft)"><i class="oi oi-info"></i></button></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        await LoadNFTs();
    }

    private async Task LoadNFTs()
    {
        var nfts = await NFTHelpers.LoadAddressNFTs(AppData.Account.Address);
        AppData.Account.NFTs = nfts;
    }

    private async Task ShowNFTDetails(INFT nft)
    {

    }
}
