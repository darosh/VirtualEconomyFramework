@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using Tewr.Blazor.FileReader
@using System.Threading
@using System.Threading.Tasks
@using Ipfs.Http
@inject IFileReaderService fileReaderService
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@page "/mint"

<Spin spinning="@processingMinting" tip="Sending Minting...">

    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <h1>Mint New NFT</h1>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>With Address:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p><a href="https://explorer.nebl.io/address/@AppData.Account.Address" target="_blank">@AppData.Account.Address</a></p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <div class="row d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <div class="col">
                            <p>Balance: @addressInfo.Balance / @addressInfo.UnconfirmedBalance</p>
                        </div>
                        <div class="col">
                            <p>NEBL</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <div class="row d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <div class="col">
                            <p>Available Tokens: @availableTokens.ToString()</p>
                        </div>
                        <div class="col">
                            <p>VENFT</p>
                        </div>
                    </div>
                </div>
            </div>
            <!--
    <div class="row">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center" style="margin-top:10px;">
            <button class="btn btn-secondary" @onclick=showOrderTokens>Buy Tokens</button>
        </div>
    </div>-->
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Name:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Name of the NFT" @bind-Value=@newNFT.Name Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Author:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Author of the NFT" @bind-Value=@newNFT.Author Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Description:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Description of the NFT" @bind-Value=@newNFT.Description Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col">
                    <Spin spinning="@uploadingImage" tip="Uploading to IPFS...">
                        <div class="row">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <p>Select and Upload Image:</p>
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <input type="file" @ref=inputTypeFileElement />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <button @onclick=ReadFile>Upload Image</button>
                            </div>
                        </div>
                    </Spin>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Image Link" @bind-Value=@newNFT.ImageLink Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Image Preview:</p>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    @switch (loadingImageStage)
                    {
                        case LoadingImageStages.NotStarted:
                            <p>No image loaded</p>
                            break;
                        case LoadingImageStages.Loading:
                            <Spin Tip="Uploading..." />
                            break;
                        case LoadingImageStages.Loaded:
                            <a href="@newNFT.ImageLink" target="_blank"><img src="@newNFT.ImageLink" style="max-width:350px; min-width:40px;" alt="Probably still waiting for ipfs confirmation. Wait a minute please..." /></a>
                            break;
                    }
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <RadioGroup @bind-Value="@newNFTType">
                        <Radio Value="NFTTypes.Image">Image - Original</Radio>
                        <Radio Value="NFTTypes.Post">Post - Reusable</Radio>
                    </RadioGroup>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <button class="btn btn-primary" @onclick="ShowMintConfirm">Create NFT</button>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Status: @status</p>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>New NFT transaction id: @newNFT.NFTOriginTxId</p>
                </div>
            </div>
        </div>
    </div>
</Spin>

<Modal Title="@confirmTitle"
       Visible="@confirmVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <p>@confirmContent</p>
</Modal>

<Modal Title="Buy Source tokens"
       Visible="@orderSourceTokensVisible"
       OnOk="@orderSourceTokensConfirm"
       OnCancel="@orderSourceTokensCancel">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <Spin Tip="Processing the Order..." Spinning="@orderingTokens">
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Do you want to buy 100 VENFT tokens? It costs 1 NEBL.</p>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Whole order will be processed automatically. It can take few minutes due to speed of confirmations of the transactions.</p>
                    </div>
                </div>
                @if (orderingTokensDone)
                {
                    <Alert Type="@AlertType.Success"
                           Message="Done."
                           Description="Tokens ordered correctly. Now it will take some minute to process order and delivery the tokens."
                           ShowIcon="true" />
                }
                <div class="row" style="margin-top:20px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <p>Order TxId: @orderTxId</p>
                    </div>
                </div>
            </Spin>
        </div>
    </div>
</Modal>

@if (AppData.Account.IsLocked())
{
    <Alert Type="@AlertType.Error"
           Message="Error"
           Description="Account Is Locked. Please unlock account first."
           ShowIcon="true" />
}

@if (errorDuringSend)
{
    <Alert Type="@AlertType.Error"
           Message="Error"
           Description=@errorMessage
           ShowIcon="true" />
}

@if (errorUpload)
{
    <Alert Type="@AlertType.Error"
           Message="Error"
           Description="Cannot upload image."
           ShowIcon="true" />
}

@if (notEnoughNeblioForBuySourceTokens)
{
    <Alert Type="@AlertType.Error"
           Message="Error"
           Description="Not enough of Neblio to buy the Source tokens. Please transfer at lease 1,0002 NEBL to this address"
           ShowIcon="true" />
}

@code {

    private NFTTypes newNFTType = NFTTypes.Image;

    bool notEnoughNeblioForBuySourceTokens = false;
    string orderTxId = string.Empty;
    bool orderSourceTokensVisible = false;
    bool orderingTokens = false;
    bool orderingTokensDone = false;
    bool errorUpload = false;
    bool uploadingImage = false;
    bool errorDuringSend = false;
    string errorMessage = string.Empty;
    bool confirmVisible = false;
    string confirmTitle = "Mint New NFT?";
    string confirmContent = "Do you realy want to mint this NFT?";
    private LoadingImageStages loadingImageStage = LoadingImageStages.NotStarted;
    private string status = string.Empty;
    private string tokentxid = string.Empty;
    private ImageNFT newNFT = new ImageNFT("");

    private CancellationTokenSource cts = new CancellationTokenSource();
    private ElementReference inputTypeFileElement;
    private System.Threading.Timer timer;
    private System.Threading.Timer balanceTimer;
    bool processingMinting = false;
    private static int attemptsToDisplay = 10;
    double availableTokens = 0;
    GetTokenMetadataResponse sourceTokensInfo = new GetTokenMetadataResponse();
    private GetAddressResponse addressInfo = new GetAddressResponse();

    protected override async Task OnInitializedAsync()
    {
        addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);
        var mintingSupply = await NeblioTransactionHelpers.GetActualMintingSupply(AppData.Account.Address);
        availableTokens = mintingSupply.Item1;
        sourceTokensInfo = mintingSupply.Item2;
        balanceTimer = new System.Threading.Timer(async (object stateInfo) =>
        {
            try
            {
                addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);
                var mintingSupply = await NeblioTransactionHelpers.GetActualMintingSupply(AppData.Account.Address);
                availableTokens = mintingSupply.Item1;
                sourceTokensInfo = mintingSupply.Item2;
                if (addressInfo.Balance > 1)
                {
                    notEnoughNeblioForBuySourceTokens = false;
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                //todo
            }
        }, new System.Threading.AutoResetEvent(false), 5000, 5000);
    }

    void ShowMintConfirm()
    {
        confirmTitle = "Mint New NFT?";
        confirmContent = "Do you realy want to mint this NFT?";
        confirmVisible = true;
    }

    private async Task orderSourceTokensCancel(MouseEventArgs e)
    {
        orderSourceTokensVisible = false;
    }

    private async Task showOrderTokens()
    {
        orderSourceTokensVisible = true;
    }

    private async Task orderSourceTokensConfirm(MouseEventArgs e)
    {
        if (addressInfo.Balance > 1)
        {
            notEnoughNeblioForBuySourceTokens = false;
            orderingTokens = true;
            StateHasChanged();
            await Task.Delay(500);
            var res = await NeblioTransactionHelpers.OrderSourceTokens(AppData.Account);
            orderingTokens = false;
            if (!string.IsNullOrEmpty(res))
            {
                orderTxId = res;
                orderingTokensDone = true;
                orderSourceTokensVisible = false;
                StateHasChanged();
                await Task.Delay(2500);
            }
        }
        else
        {
            notEnoughNeblioForBuySourceTokens = true;
        }
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        confirmVisible = false;
        await MintNewNFT();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    public async Task ReadFile()
    {
        try
        {
            errorUpload = false;
            uploadingImage = true;
            attemptsToDisplay = 10;
            StateHasChanged();
            foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
            {
                loadingImageStage = LoadingImageStages.Loading;
                // Read into buffer and act (uses less memory)
                await using (Stream stream = await file.OpenReadAsync())
                {
                    var fileinfo = await file.ReadFileInfoAsync();

                    var imageLink = await NFTHelpers.ipfs.FileSystem.AddAsync(stream, fileinfo.Name);
                    newNFT.ImageLink = "https://gateway.ipfs.io/ipfs/" + imageLink.ToLink().Id.ToString();

                    timer = new System.Threading.Timer(async (object stateInfo) =>
                    {
                        try
                        {
                            using var httpResponse = await _client.GetAsync(newNFT.ImageLink);

                            if (httpResponse.IsSuccessStatusCode)
                            {
                                loadingImageStage = LoadingImageStages.Loaded;
                                uploadingImage = false;

                                StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                                timer.Dispose();
                            }

                            attemptsToDisplay--;
                            if (attemptsToDisplay < 0)
                            {
                                loadingImageStage = LoadingImageStages.Loaded;
                                uploadingImage = false;
                                StateHasChanged();
                                timer.Dispose();
                            }
                        }
                        catch (Exception ex)
                        {
                            //todo
                        }
                    }, new System.Threading.AutoResetEvent(false), 4000, 4000);
                }
            }
        }
        catch (Exception ex)
        {
            loadingImageStage = LoadingImageStages.NotStarted;
            uploadingImage = false;
            errorUpload = true;
            StateHasChanged();
        }
    }

    private async Task MintNewNFT()
    {
        if (AppData.Account.IsLocked())
        {
            processingMinting = false;
            return;
        }

        status = "Sending...";
        processingMinting = true;

        try
        {
            // send tx
            var rtxid = string.Empty;

            switch (newNFTType)
            {
                case NFTTypes.Image:
                    rtxid = await NFTHelpers.MintImageNFT(AppData.Account, newNFT);
                    break;
                case NFTTypes.Post:
                    var pn = new PostNFT(newNFT.Utxo);
                    pn.Fill(newNFT);
                    rtxid = await NFTHelpers.MintPostNFT(AppData.Account, pn);
                    break;
            }

            if (rtxid != null)
            {
                tokentxid = rtxid;
                processingMinting = false;
                StateHasChanged();
                await Task.Delay(500);
                NavManager.NavigateTo("/nfts");
            }
        }
        catch (Exception ex)
        {
            tokentxid = ex.Message;
            errorDuringSend = true;
            errorMessage = ex.Message;
        }
    }

    }
