@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@using VEDriversLite.NeblioAPI
@using VEDriversLite.WooCommerce
@using VEDriversLite.WooCommerce.Dto
@using Tewr.Blazor.FileReader
@using System.Threading
@using System.Threading.Tasks
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@page "/mint"

<div class="container-fluid overflow-auto">

    <!--
    @if (!AppData.Account.EnoughBalanceToBuySourceTokens)
    {
        <Alert Type="@AlertType.Error"
               Message="Error"
               Description="Not enough of Neblio to buy the Source tokens. Please transfer at lease 1,0002 NEBL to this address"
               ShowIcon="true" />
    }
    -->

    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <h3>Mint New NFT</h3>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>With Address:</p>
                </div>
            </div>

            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <Dropdown>
                        <Overlay>
                            <Menu>
                                <MenuItem>
                                    <a target="_blank" rel="noopener noreferrer" @onclick="selectMainAccount">
                                        Main Account
                                    </a>
                                </MenuItem>
                                @foreach (var acc in AppData.Account.SubAccounts.Values)
                                {
                                    <MenuItem>
                                        <a rel="noopener noreferrer" @onclick="() => selectSubAddress(acc.Address)">
                                            @if (!string.IsNullOrEmpty(acc.Name))
                                            {
                                                @acc.Name
                                            }
                                            else
                                            {
                                                @acc.Address
                                            }
                                        </a>
                                    </MenuItem>
                                }
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            <a class="ant-dropdown-link" @onclick:preventDefault>
                                Select Account <Icon Type="down" />
                            </a>
                        </ChildContent>
                    </Dropdown>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(selectedAccountAddress))
            {
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex justify-content-center align-items-center">
                        <span>@selectedAccountAddress</span>
                    </div>
                </div>
            }
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <VENFTApp_Blazor.Components.AccountBalances Address="@selectedAccountAddress" SubAccount="@subAccount" />
                </div>
            </div>
            <!--
    <div class="row">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center" style="margin-top:10px;">
            <button class="btn btn-secondary" @onclick=showOrderTokens>Buy Tokens</button>
        </div>
    </div>-->
            <div class="row">
                <div class="col" style="margin-top:10px;">
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <span>Mint it with Source tokens:</span>
                        </div>
                    </div>
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            @if (SelectedAccountTotalSourceVENFT > 1 || SelectedAccountTotalSourceCORZT > 1)
                            {
                                <RadioGroup @bind-Value="@tokenId" OnChange="nftSourceTokensChangedHandler" TValue="string">
                                    @foreach (var t in SelectedAccountTokenSupply)
                                        {
                                            if (t.Value.Amount > 1 && NFTHelpers.AllowedTokens.Contains(t.Value.TokenId))
                                            {
                                            <Radio Value="t.Value.TokenId"><img style="width: 25px;margin-right: 10px;" src="@t.Value.ImageUrl" /> @t.Value.TokenSymbol - @t.Value.Amount</Radio>
                                            }
                                        }
                                </RadioGroup>
                            }
                            else if (SelectedAccountTotalSourceVENFT <= 1 || SelectedAccountTotalSourceCORZT <= 1)
                            {
                                <span class="text-danger text-center">You do not have any source tokens on the Address!</span>
                            }
                        </div>
                    </div>
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <RadioGroup @bind-Value="@NFTType">
                                <Radio Value="NFTTypes.Image">Image - Original</Radio>
                                <Radio Value="NFTTypes.Post">Post - Reusable</Radio>
                                <Radio Value="NFTTypes.Music">Music/Video - Original</Radio>
                                <Radio Value="NFTTypes.Event">Event</Radio>
                                <Radio Value="NFTTypes.Ticket">Ticket</Radio>
                                @if (SelectedAccountTotalSourceCORZT > 1 && tokenId == CoruzantNFTHelpers.CoruzantTokenId)
                                {
                                    <Radio Value="NFTTypes.CoruzantProfile">CoruzantProfile</Radio>
                                    <Radio Value="NFTTypes.CoruzantArticle">CoruzantArticle</Radio>
                                    <!--<Radio Value="NFTTypes.CoruzantPodcast">CoruzantPodcast - Reusable</Radio>-->
                                }
                            </RadioGroup>
                        </div>
                    </div>

                    <div class="row" style="margin-top:10px; margin-bottom:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (NFTType != NFTTypes.Ticket && NFTType != NFTTypes.Event && NFTType != NFTTypes.CoruzantArticle && NFTType != NFTTypes.CoruzantProfile)
                            {
                                <VENFTApp_Blazor.Components.MintNFTForm TokenId="@tokenId" Address="@selectedAccountAddress" SubAccount="subAccount" NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
                            }
                            else if (NFTType == NFTTypes.CoruzantArticle || NFTType == NFTTypes.CoruzantProfile)
                            {
                                <VENFTApp_Blazor.Components.MintCoruzantNFTForm SubAccount="subAccount" Address="@selectedAccountAddress" NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
                            }
                            else
                            {
                                <VENFTApp_Blazor.Components.MintEventAndTickets SubAccount="subAccount" Address="@selectedAccountAddress" TokenId="@tokenId" NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
                            }
                        </div>
                    </div>
                </div>
                <div class="col" style="margin-top:10px; margin-right:20px; max-width:250px;">
                    <div class="row" style="margin-top:10px; margin-bottom:10px;max-width:250px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>The 10 Newest NFTs</span>
                        </div>
                    </div>
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px; margin-bottom:10px; max-width:250px;">
                        <div class="col d-flex justify-content-center align-items-center" style="max-width:250px;">
                            <div class="card-group d-flex">
                                @for (var i = 0; i < 10; i++)
                                {
                                    if (i < NFTs.Count)
                                    {
                                        var nft = NFTs[i];
                                        if (nft.Type == NFTTypes.CoruzantProfile || nft.Type == NFTTypes.CoruzantArticle || nft.Type == NFTTypes.CoruzantPodcast)
                                        {
                                            <VENFTApp_Blazor.Components.CoruzantNFT Address="@selectedAccountAddress" SubAccount="@subAccount" InputNFT="@nft" OwnNFT="true" />
                                        }
                                        else if (nft.Type != NFTTypes.Message && nft.Type != NFTTypes.Profile && nft.Type != NFTTypes.Payment && nft.TypeText != "NFT Settings")
                                        {
                                            <VENFTApp_Blazor.Components.NFT Address="@selectedAccountAddress" SubAccount="@subAccount" InputNFT="@nft" OwnNFT="true" />
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <Modal Title="Buy Source tokens"
           Visible="@orderSourceTokensVisible"
           OnOk="@orderSourceTokensConfirm"
           OnCancel="@orderSourceTokensCancel">
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <Spin Tip="Processing the Order..." Spinning="@orderingTokens">
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Do you want to buy 100 VENFT tokens? It costs 1 NEBL.</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Whole order will be processed automatically. It can take few minutes due to speed of confirmations of the transactions.</p>
                        </div>
                    </div>
                    @if (orderingTokensDone)
                    {
                        <Alert Type="@AlertType.Success"
                               Message="Done."
                               Description="Tokens ordered correctly. Now it will take some minute to process order and delivery the tokens."
                               ShowIcon="true" />
                    }
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Order TxId: @orderTxId</p>
                        </div>
                    </div>
                </Spin>
            </div>
        </div>
    </Modal>

    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

@code {

    NFTTypes NFTType = NFTTypes.Image;

    string orderTxId = string.Empty;
    bool orderSourceTokensVisible = false;
    bool orderingTokens = false;
    bool orderingTokensDone = false;

    string tokenId = NFTHelpers.TokenId;
    private TokenSupplyDto selectedToken = new TokenSupplyDto();


    private CancellationTokenSource cts = new CancellationTokenSource();
    GetTokenMetadataResponse sourceTokensInfo = new GetTokenMetadataResponse();

    string selectedAccountAddress = string.Empty;
    bool mainAccountSelected = true;
    bool subAccount = false;

    public double SelectedAccountTotalSpendable
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TotalSpendableBalance;
            return AppData.Account.TotalSpendableBalance;
        }
    }
    public double SelectedAccountTotalUnconfirmed
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TotalUnconfirmedBalance;
            return AppData.Account.TotalUnconfirmedBalance;
        }
    }
    public double SelectedAccountTotalSourceVENFT
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.SourceTokensBalance;
            return AppData.Account.SourceTokensBalance;
        }
    }
    public double SelectedAccountTotalSourceCORZT
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.CoruzantSourceTokensBalance;
            return AppData.Account.CoruzantSourceTokensBalance;
        }
    }
    public Dictionary<string, TokenSupplyDto> SelectedAccountTokenSupply
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.TokensSupplies;
            return AppData.Account.TokensSupplies;
        }
    }
    public List<INFT> NFTs
    {
        get
        {
            if (!string.IsNullOrEmpty(selectedAccountAddress))
                if (AppData.Account.SubAccounts.TryGetValue(selectedAccountAddress, out var acc))
                    return acc.NFTs;
            return AppData.Account.NFTs;
        }
    }

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                InitWooCom();
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
                selectedAccountAddress = AppData.Account.Address;
                mainAccountSelected = true;
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    private async Task InitWooCom()
    {
        if (!WooCommerceHelpers.IsInitialized)
        {
            var apiurl = await localStorage.GetItemAsync<string>("woocom-apiurl");
            if (apiurl == null) apiurl = string.Empty;
            var apikey = await localStorage.GetItemAsync<string>("woocom-apikey");
            if (apikey == null) apikey = string.Empty;
            var apisecret = await localStorage.GetItemAsync<string>("woocom-apisecret");
            if (apisecret == null) apisecret = string.Empty;
            var jwt = await localStorage.GetItemAsync<string>("woocom-apisecret");
            if (jwt == null) jwt = string.Empty;
            await WooCommerceHelpers.InitStoreApiConnection(apiurl, apikey, apisecret, jwt);
        }
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task selectSubAddress(string address)
    {
        selectedAccountAddress = address;
        selectedToken = new TokenSupplyDto();
        tokenId = NFTHelpers.TokenId;
        mainAccountSelected = false;
        subAccount = true;
        StateHasChanged();
    }
    private async Task selectMainAccount(MouseEventArgs e)
    {
        selectedAccountAddress = AppData.Account.Address;
        selectedToken = new TokenSupplyDto();
        tokenId = NFTHelpers.TokenId;
        mainAccountSelected = true;
        subAccount = true;
        StateHasChanged();
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task nftTypeChangedHandler(NFTTypes type)
    {
        StateHasChanged();
    }

    private void nftSourceTokensChangedHandler(string tokid)
    {
        StateHasChanged();
    }

    private async Task orderSourceTokensCancel(MouseEventArgs e)
    {
        orderSourceTokensVisible = false;
    }

    private async Task showOrderTokens()
    {
        orderSourceTokensVisible = true;
    }

    private async Task orderSourceTokensConfirm(MouseEventArgs e)
    {
        try {
            orderingTokens = true;
            StateHasChanged();
            var res = await AppData.Account.OrderSourceTokens(1);
            orderingTokens = false;
            if (res.Item1)
            {
                orderTxId = res.Item2;
                orderingTokensDone = true;
            }
            else
            {
                orderTxId = res.Item2;
            }
            orderSourceTokensVisible = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            orderTxId = ex.Message;
            orderingTokens = false;
            Console.WriteLine(ex.Message);
            StateHasChanged();
        }
    }
}
