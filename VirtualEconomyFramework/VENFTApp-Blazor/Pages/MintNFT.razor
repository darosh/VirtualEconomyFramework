@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using Tewr.Blazor.FileReader
@using System.Threading
@using System.Threading.Tasks
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject HttpClient _client
@inject NavigationManager NavManager
@page "/mint"

<div class="container-fluid">

    <!--
    @if (!AppData.Account.EnoughBalanceToBuySourceTokens)
    {
        <Alert Type="@AlertType.Error"
               Message="Error"
               Description="Not enough of Neblio to buy the Source tokens. Please transfer at lease 1,0002 NEBL to this address"
               ShowIcon="true" />
    }
    -->

  
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <h3>Mint New NFT</h3>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>With Address:</p>
                </div>
            </div>

            <VENFTApp_Blazor.Components.AccountBalances />

            <!--
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center" style="margin-top:10px;">
                    <button class="btn btn-secondary" @onclick=showOrderTokens>Buy Tokens</button>
                </div>
            </div>-->
            <div class="row">
                <div class="col" style="margin-top:10px;">
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <RadioGroup @bind-Value="@NFTType" @onselectionchange="nftTypeChangedHandler">
                                <Radio Value="NFTTypes.Image">Image - Original</Radio>
                                <Radio Value="NFTTypes.Post">Post - Reusable</Radio>
                                <Radio Value="NFTTypes.Music">Music - Original</Radio>
                            </RadioGroup>
                        </div>
                    </div>

                    <div class="row" style="margin-top:10px; margin-bottom:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <VENFTApp_Blazor.Components.MintNFTForm NFTType="@NFTType" RedirectToNFTsAfterMint="false" />
                        </div>
                    </div>
                </div>
                <div class="col" style="margin-top:10px; margin-right:20px; max-width:250px;">
                    <div class="row" style="margin-top:10px; margin-bottom:10px;max-width:250px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <span>Last 10 Minted Items</span>
                        </div>
                    </div>
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px; margin-bottom:10px; max-width:250px;">
                        <div class="col d-flex justify-content-center align-items-center" style="max-width:250px;">
                            <div class="card-group">
                                @for (var i = 0; i < 10; i++)
                                {
                                    if (i < AppData.Account.NFTs.Count)
                                    {
                                        var nft = AppData.Account.NFTs[i];
                                        if (nft.Type != NFTTypes.Profile && nft.Type != NFTTypes.Payment && nft.TypeText != "NFT Settings")
                                        {
                                            <VENFTApp_Blazor.Components.NFT Address="@AppData.Account.Address" InputNFT="@nft" OwnNFT="true" />
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <Modal Title="Buy Source tokens"
           Visible="@orderSourceTokensVisible"
           OnOk="@orderSourceTokensConfirm"
           OnCancel="@orderSourceTokensCancel">
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <Spin Tip="Processing the Order..." Spinning="@orderingTokens">
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Do you want to buy 100 VENFT tokens? It costs 1 NEBL.</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Whole order will be processed automatically. It can take few minutes due to speed of confirmations of the transactions.</p>
                        </div>
                    </div>
                    @if (orderingTokensDone)
                    {
                        <Alert Type="@AlertType.Success"
                               Message="Done."
                               Description="Tokens ordered correctly. Now it will take some minute to process order and delivery the tokens."
                               ShowIcon="true" />
                    }
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Order TxId: @orderTxId</p>
                        </div>
                    </div>
                </Spin>
            </div>
        </div>
    </Modal>

    <VENFTApp_Blazor.Components.InfoEventModal />
</div>

@code {

    NFTTypes NFTType = NFTTypes.Image;

    string orderTxId = string.Empty;
    bool orderSourceTokensVisible = false;
    bool orderingTokens = false;
    bool orderingTokensDone = false;

    private CancellationTokenSource cts = new CancellationTokenSource();
    GetTokenMetadataResponse sourceTokensInfo = new GetTokenMetadataResponse();

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void nftTypeChangedHandler(EventArgs e)
    {
        StateHasChanged();
    }

    private async Task orderSourceTokensCancel(MouseEventArgs e)
    {
        orderSourceTokensVisible = false;
    }

    private async Task showOrderTokens()
    {
        orderSourceTokensVisible = true;
    }

    private async Task orderSourceTokensConfirm(MouseEventArgs e)
    {
        try {
            orderingTokens = true;
            StateHasChanged();
            var res = await AppData.Account.OrderSourceTokens(1);
            orderingTokens = false;
            if (res.Item1)
            {
                orderTxId = res.Item2;
                orderingTokensDone = true;
            }
            else
            {
                orderTxId = res.Item2;
            }
            orderSourceTokensVisible = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            orderTxId = ex.Message;
            orderingTokens = false;
            Console.WriteLine(ex.Message);
            StateHasChanged();
        }
    }
}
