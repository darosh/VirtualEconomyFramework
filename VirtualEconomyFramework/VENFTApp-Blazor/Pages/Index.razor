@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Security
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager

@page "/"


<div class="container-fluid">
    <Spin spinning="@creatingAddressSpinner" tip="Creating Address...">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <h1>Neblio NFT Web Wallet</h1>
                    </div>
                </div>
                <div class="row" style="margin-top:50px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <img src="images/Stacked-Slogan_Dark.png" style="max-height:200px; max-width: 200px;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <hr />
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Welcome to <a href="https://nebl.io/" target="_blank">Neblio</a> NFT App written in C# with <a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor" target="_blank">Blazor</a> and <a href="https://veframework.com/" target="_blank">VE Framework</a></span>
                    </div>
                </div>
            </div>
        </div>
        <VENFTApp_Blazor.Components.CreateAccount Visible="@createNewAddressModalVisible" AccountCreated="AccountCreated" />

        <VENFTApp_Blazor.Components.UnlockAccount Visible="@unlockAcocuntModalVisible" AccountUnlocked="AccountUnlocked" />

    </Spin>

</div>



@if (accountCreated)
{
    <Alert Type="@AlertType.Success"
           Message="Success"
           Description="Your Neblio address was created and stored in your browser local memory."
           ShowIcon="true" />
}

@if (accountUnlocked)
{
    <Alert Type="@AlertType.Success"
           Message="Success"
           Description="Your Neblio address was successfully unlocked."
           ShowIcon="true" />
}

@code {

    bool accountCreated = false;
    bool accountUnlocked = false;
    bool creatingAddressSpinner = false;
    private bool createNewAddressModalVisible = false;
    bool unlockAcocuntModalVisible = false;
    string key = string.Empty;
    string address = string.Empty;

    protected override Task OnInitializedAsync()
    {
        try
        {
            Load().Wait();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot init the page!" + ex.Message);
            try
            {
                AppData.Account = new NeblioAccount();
                Load().Wait();
            }
            catch (Exception e)
            {
                Console.WriteLine("Cannot init the page!" + e.Message);
            }
        }
        return base.OnInitializedAsync();
    }

    async Task Load()
    {
        if (string.IsNullOrEmpty(AppData.Account.Address))
        {
            address = await localStorage.GetItemAsync<string>("address");
            if (string.IsNullOrEmpty(address))
            {
                createNewAddressModalVisible = true;
            }
            else
            {
                key = await localStorage.GetItemAsync<string>("key");
                if (!string.IsNullOrEmpty(key))
                {
                    unlockAcocuntModalVisible = true;
                    await Task.Delay(50);
                    StateHasChanged();
                }
                else
                {
                    createNewAddressModalVisible = true;
                }
            }
        }
    }

    async Task WaitAndRedirect()
    {
        await Task.Delay(1000);
        NavManager.NavigateTo("/account");
        StateHasChanged();
    }

    private void AccountCreated(string msg)
    {
        accountCreated = true;
        createNewAddressModalVisible = false;

        StateHasChanged();
        WaitAndRedirect();
    }

    private void AccountUnlocked(string msg)
    {
        accountUnlocked = true;
        unlockAcocuntModalVisible = false;

        StateHasChanged();
        WaitAndRedirect();
    }
}
