@using VEDriversLite
@using VEDriversLite.NeblioAPI
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient _client
@inject AppData AppData
@page "/account"

<h1>Account Details</h1>

<p>Your Neblio Address: @AppData.Account.Address</p>

<hr />
<p>Actual Balance: @addressInfo.Balance NEBL</p>
<p>Unconfirmed Balance: @addressInfo.UnconfirmedBalance NEBL</p>
<p>Number Of Transactions: @addressInfo.Transactions.Count</p>
<hr />
<button class="btn btn-primary" @onclick="downloadAccountKey">Show Encrypted Private Key</button>
<p>Your Key: @accountKey</p>
<hr />
<h3>Transactions:</h3>

@if (addressInfo.Transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>TxId</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tx in addressInfo.Transactions)
            {
                <tr>
                    <td>@tx</td>
                    <td><button class="btn btn-primary" @onclick="async () => ShowTxDetails(tx)"><i class="oi oi-info"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GetAddressResponse addressInfo = new GetAddressResponse();
    private System.Threading.Timer timer;
    private string accountKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            addressInfo.Transactions = new List<string>();

            timer = new System.Threading.Timer(async (object stateInfo) =>
            {
                addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);
                StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
            }, new System.Threading.AutoResetEvent(false), 1000, 1000);
        }
    }

    private async Task downloadAccountKey()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            accountKey = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
        }
    }

    private async Task ShowTxDetails(string txId)
    {

    }
}
