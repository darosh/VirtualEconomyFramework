@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.NFT
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject ClipboardService ClipboardService
@inject NavigationManager NavManager
@page "/account"

<div class="container-fluid">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <h1>Account Details</h1>
        </div>
    </div>

    <VENFTApp_Blazor.Components.AccountBalances />

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <VENFTApp_Blazor.Components.Profile ReadOnlyProfile="@false" />
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <h6>Available Tokens:</h6>
        </div>
    </div>
    @if (AppData.Account != null)
    {
        @if (AppData.Account.TokensSupplies.Count > 0)
        {
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">

                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <table class="table" style="max-width:300px;">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Symbol</th>
                                        <th>Balance</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tok in AppData.Account.TokensSupplies.Values)
                                    {
                                        <tr>
                                            <td><img style="width: 25px;margin-right: 10px;;" src="@tok.ImageUrl" /></td>
                                            <td>@tok.TokenSymbol</td>
                                            <td>@tok.Amount.ToString()</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            @if (AppData.Account.IsLocked())
            {
                <span>Wallet is Locked</span>
            }
            else
            {
                <span>Wallet is Unlocked</span>
            }
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            @if (AppData.Account.IsLocked())
            {
                <button class="btn btn-primary" @onclick="unlockWallet">Unlock Wallet</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="lockWallet">Lock Wallet</button>
            }

        </div>
    </div>

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <span>Please dont forget to save your private key. It is unique key for your Neblio address. If you save it you can backup address anytime.</span>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <span>If your account is unlocked now you can display not encrypted private key. If account is locked the key is encrypted with your password.</span>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <button class="btn btn-primary" @onclick="downloadAccountKey">Show Private Key</button>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <p>Your Key: @accountKey</p>
        </div>
    </div>

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:30px;">
        <div class="col">
            <div class="row" style="margin-top:30px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <h3>Transactions:</h3>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span style="font-size:10px;">Number Of Transactions: @AppData.Account.AddressInfo.Transactions.Count</span>
                </div>
            </div>

            <div class="row" style="margin-top:30px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    @if (AppData.Account.AddressInfo.Transactions == null)
                    {
                        <p><em><Spin Tip="Loading..." /></em></p>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>TxId</th>
                                    <th>Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tx in AppData.Account.AddressInfo.Transactions)
                                {
                                    <tr>
                                        <td>@NeblioTransactionHelpers.ShortenTxId(tx)</td>
                                        <td><button class="btn btn-primary" @onclick="async () => ShowTxDetails(tx)"><i class="oi oi-info"></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>

    <Modal Title="Transaction Details"
           Visible="@txDetailsVisible"
           OnOk="@CloseTxDetails"
           OnCancel="@CloseTxDetails">
        <VENFTApp_Blazor.Components.TransactionDetails TxId="@txDetailsTxId" />
    </Modal>

    <Modal Title="Unlock Account"
           Visible="@unlockAcocuntModalVisible"
           OnOk="@UnlockAccountConfirm"
           OnCancel="@UnclockAccountCancel">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Please Input password</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <InputPassword Placeholder="Input password" @bind-Value=@password Style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>
            </div>
        </div>
    </Modal>
</div>

@code {

    string txDetailsTxId = string.Empty;
    bool txDetailsVisible = false;

    string password = string.Empty;
    bool unlockAcocuntModalVisible = false;

    private System.Threading.Timer hideTimer;
    private string accountKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                AppData.Account = new NeblioAccount();
                await Task.Delay(500);
                NavManager.NavigateTo("/");
            }
            else
            {
                var nfts = await NFTHelpers.LoadAddressNFTs(AppData.Account.Address);
                AppData.Account.NFTs = nfts;
                AppData.Account.Profile = await NFTHelpers.FindProfileNFT(AppData.Account);
            }
        }
        catch(Exception ex)
        {
            AppData.Account = new NeblioAccount();
            await Task.Delay(500);
            NavManager.NavigateTo("/");
        }
    }

    async Task CopyToClipboard(MouseEventArgs e)
    {
        try
        {
            await ClipboardService.WriteTextAsync(AppData.Account.Address);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Cannot write text to clipboard" + ex.Message);
        }
    }

    private async Task lockWallet()
    {
        AppData.Account.AccountKey.Lock();
        StateHasChanged();
    }

    private async Task unlockWallet()
    {
        unlockAcocuntModalVisible = true;
    }

    private async Task downloadAccountKey()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            if (AppData.Account.IsLocked())
            {
                accountKey = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
            }
            else
            {
                try
                {
                    accountKey = await AppData.Account.AccountKey.GetEncryptedKey();
                }
                catch (Exception ex)
                {
                    // todo
                }
            }

            hideTimer = new System.Threading.Timer(async (object stateInfo) =>
            {
                accountKey = string.Empty;
                StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                hideTimer.Dispose();
            }, new System.Threading.AutoResetEvent(false), 10000, 10000);
        }
    }

    private async Task UnlockAccountConfirm(MouseEventArgs e)
    {
        unlockAcocuntModalVisible = false;

        await AppData.Account.AccountKey.LoadPassword(password); // put here your password
        StateHasChanged();
    }

    private void UnclockAccountCancel(MouseEventArgs e)
    {
        unlockAcocuntModalVisible = false;
    }

    private async Task CloseTxDetails(MouseEventArgs e)
    {
        txDetailsVisible = false;
    }

    private async Task ShowTxDetails(string txId)
    {
        txDetailsTxId = txId;
        StateHasChanged();
        txDetailsVisible = true;
        StateHasChanged();
    }
}
