@using VEDriversLite
@using VEDriversLite.NeblioAPI
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient _client
@inject AppData AppData
@page "/account"

<div class="container-fluid">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <h1>Account Details</h1>
        </div>
    </div>
    <div class="row" style="margin-top:20px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <p>Your Neblio Address: <a href="https://explorer.nebl.io/address/@AppData.Account.Address" target="_blank">@AppData.Account.Address</a></p>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <p>Actual Balance: @addressInfo.Balance NEBL</p>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <p>Unconfirmed Balance: @addressInfo.UnconfirmedBalance NEBL</p>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <p>Number Of Transactions: @addressInfo.Transactions.Count</p>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <h6>Available Tokens:</h6>
        </div>
    </div>
    @if (AppData.Account != null)
    {
        @if (AppData.Account.TokensSupplies.Count > 0)
        {
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
 
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <table class="table" style="max-width:300px;">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Symbol</th>
                                        <th>Balance</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tok in AppData.Account.TokensSupplies.Values)
                                    {
                                        <tr>
                                            <td><img style="width: 25px;margin-right: 10px;;" src="@tok.ImageUrl" /></td>
                                            <td>@tok.TokenSymbol</td>
                                            <td>@tok.Amount.ToString()</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                         </div>
                    </div>
                </div>
             </div>
        }
    }
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            @if (AppData.Account.IsLocked())
            {
                <span>Wallet is Locked</span>
            }
            else
            {
                <span>Wallet is Unlocked</span>
            }
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            @if (AppData.Account.IsLocked())
            {
                <button class="btn btn-primary" @onclick="unlockWallet">Unlock Wallet</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="lockWallet">Lock Wallet</button>
            }

        </div>
    </div>

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <button class="btn btn-primary" @onclick="downloadAccountKey">Show Encrypted Private Key</button>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <p>Your Key: @accountKey</p>
        </div>
    </div>

    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <hr />
        </div>
    </div>
    <div class="row" style="margin-top:30px;">
        <div class="col">
            <div class="row" style="margin-top:30px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <h3>Transactions:</h3>
                </div>
            </div>

            <div class="row" style="margin-top:30px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    @if (addressInfo.Transactions == null)
                    {
                        <p><em><Spin Tip="Loading..." /></em></p>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>TxId</th>
                                    <th>Details</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tx in addressInfo.Transactions)
                                {
                                    <tr>
                                        <td>@ShortenTxId(tx)</td>
                                        <td><button class="btn btn-primary" @onclick="async () => ShowTxDetails(tx)"><i class="oi oi-info"></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>

    <Modal Title="Transaction Details"
           Visible="@txDetailsVisible"
           OnOk="@CloseTxDetails"
           OnCancel="@CloseTxDetails">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Tx Id</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>@txInDetails.Txid</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Total Send: @txInDetails.Totalsent NEBL</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Time: @txInDetailsTime.ToString()</span>
                    </div>
                </div>
                @if (NFTTransaction)
                {
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <span>This is NFT Transaction!</span>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <a href="http://explorer.nebl.io/tx/@nftTxId" target="_blank">Explore NFT</a>
                        </div>
                    </div>
                }
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="http://explorer.nebl.io/tx/@txInDetails.Txid" target="_blank">Explorer</a>
                    </div>
                </div>
            </div>
        </div>
    </Modal>

    <Modal Title="Unlock Account"
           Visible="@unlockAcocuntModalVisible"
           OnOk="@UnlockAccountConfirm"
           OnCancel="@UnclockAccountCancel">
        <div class="row">
            <div class="col">
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Please Input password</span>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <InputPassword Placeholder="Input password" @bind-Value=@password Style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>
            </div>
        </div>
    </Modal>
</div>

@code {
    bool txDetailsVisible = false;
    GetTransactionInfoResponse txInDetails;
    DateTime txInDetailsTime;
    Dictionary<string, string> txInDetailsMetadata = new Dictionary<string, string>();
    bool NFTTransaction = false;
    string nftTxId = string.Empty;
    string password = string.Empty;
    bool unlockAcocuntModalVisible = false;

    private GetAddressResponse addressInfo = new GetAddressResponse();
    private System.Threading.Timer timer;
    private System.Threading.Timer hideTimer;
    private string accountKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            addressInfo.Transactions = new List<string>();
            addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);

            timer = new System.Threading.Timer(async (object stateInfo) =>
            {
                addressInfo = await NeblioTransactionHelpers.AddressInfoAsync(AppData.Account.Address);
                StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
            }, new System.Threading.AutoResetEvent(false), 1000, 1000);

            await AppData.Account.ReloadTokenSupply();
        }
    }

    private string ShortenTxId(string txid)
    {
        var txids = txid.Remove(5, txid.Length - 5) + "....." + txid.Remove(0, txid.Length - 5);
        return txids;
    }

    private async Task lockWallet()
    {
        AppData.Account.AccountKey.Lock();
        StateHasChanged();
    }

    private async Task unlockWallet()
    {
        unlockAcocuntModalVisible = true;
    }

    private async Task downloadAccountKey()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            if (AppData.Account.IsLocked())
            {
                accountKey = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
            }
            else
            {
                try
                {
                    accountKey = await AppData.Account.AccountKey.GetEncryptedKey();
                }
                catch(Exception ex)
                {
                    // todo
                }
            }

            hideTimer = new System.Threading.Timer(async (object stateInfo) =>
            {
                accountKey = string.Empty;
                StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                hideTimer.Dispose();
            }, new System.Threading.AutoResetEvent(false), 10000, 10000);
        }
    }

    private async Task UnlockAccountConfirm(MouseEventArgs e)
    {
        unlockAcocuntModalVisible = false;

        await AppData.Account.AccountKey.LoadPassword(password); // put here your password
        StateHasChanged();
    }

    private void UnclockAccountCancel(MouseEventArgs e)
    {
        unlockAcocuntModalVisible = false;
    }

    private async Task CloseTxDetails(MouseEventArgs e)
    {
        txDetailsVisible = false;
    }

    private async Task ShowTxDetails(string txId)
    {
        var txinfo = await NeblioTransactionHelpers.GetTransactionInfo(txId);
        Dictionary<string, string> meta = new Dictionary<string, string>();
        try
        {
            meta = await NeblioTransactionHelpers.GetTransactionMetadata(NeblioTransactionHelpers.VENFTId, txId);
        }
        catch (Exception ex)
        {
            //todo
        }

        if (txinfo != null)
        {
            txInDetails = txinfo;
            if (meta != null)
            {
                txInDetailsMetadata = meta;

                if (meta.TryGetValue("NFT", out var nft))
                {
                    if (nft == "true")
                    {
                        NFTTransaction = true;
                        if (meta.TryGetValue("SourceUtxo", out var nfttxid))
                            nftTxId = nfttxid;
                    }
                }
            }

            txInDetailsTime = TimeHelpers.UnixTimestampToDateTime((double)txinfo.Time);

            txInDetails.Totalsent = await NeblioTransactionHelpers.GetSendAmount(txinfo, AppData.Account.Address);
            txDetailsVisible = true;
        }
    }
}
