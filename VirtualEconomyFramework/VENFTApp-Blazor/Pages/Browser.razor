@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Bookmarks
@using VEDriversLite.NFT
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@page "/browser"

<Spin Tip="Loading Browser..." Spinning="@loadingBrowser">
    <div class="container-fluid overflow-auto">
        <div class="row">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <h3>NFT Browser</h3>
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <VENFTApp_Blazor.Components.AccountBalances />
            </div>
        </div>

        <!--
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <button onclick="browseTabs" class="btn btn-secondary" type="button">Browse Tabs</button>
                <VENFTApp_Blazor.Components.OpenedTabList Open="openTabBrowser"
                                                          BrowseTabsClosed="browseTabsClosed"
                                                          TabSelected="TabSelectedHandler"
                                                          NewTabOpened="TabAddedHandler"
                                                          TabClosed="TabClosedHandler" />
            </div>
        </div>
        -->
        <div class="row d-flex justify-content-center align-items-center" style="margin-top:15px;">
            <div class="col">
                <div>
                    <ul class="nav nav-tabs" role="tablist" id="shopTabsHeadings">
                        @foreach (var tab in AppData.Account.Tabs)
                        {
                            <li class="nav-item" role="presentation">
                                <a class="nav-link" role="tab" data-toggle="tab" @onclick="async () => selectTab(tab.Address)">
                                    @if (!string.IsNullOrEmpty(tab.BookmarkFromAccount.Name))
                                    {
                                        if (tab.BookmarkFromAccount.Name.Length < 10)
                                        {
                                            @tab.BookmarkFromAccount.Name
                                        }
                                        else
                                        {
                                            @tab.BookmarkFromAccount.Name.Substring(0, 9)
                                        }
                                    }
                                    else
                                    {
                                        @tab.ShortAddress
                                    }
                                    <button class="btn btn-light" @onclick="async () => removeTab(tab.Address)" type="button" style="padding-top: 0px;padding-right: 5px;padding-bottom: 2px;padding-left: 4px;font-size: 12px;margin-left: 15px;margin-bottom: 5px;margin-right: -6px;">
                                        <i class="oi oi-x" style="font-size:7px;"></i>
                                    </button>
                                </a>
                            </li>
                        }
                        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-toggle="tab" @onclick="async () => addNewTabModal()"><i class="oi oi-plus" style="font-size: 20px;"></i></a></li>
                    </ul>
                    <div class="tab-content" id="shopTabsContent">

                        @foreach (var tab in AppData.Account.Tabs)
                        {
                            if (tab.Selected)
                            {
                                <div role="tabpanel" class="tab-pane active" style="min-height: 200px;">
                                    <div class="row">
                                        <div class="col">
                                            <div class="row" style="margin-top: 10px;">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    @if (!string.IsNullOrEmpty(tab.BookmarkFromAccount.Name))
                                                    {
                                                        <span>@tab.BookmarkFromAccount.Name - @NeblioTransactionHelpers.ShortenAddress(tab.Address)</span>
                                                    }
                                                    else
                                                    {
                                                        <span>@tab.Address</span>
                                                    }
                                                </div>
                                            </div>
                                            <div class="row" style="margin-top: 10px;">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <VENFTApp_Blazor.Components.CopyIcon MarginLeft="15" TextToCopy="@tab.Address" />
                                                    <VENFTApp_Blazor.Components.QRIcon MarginLeft="10" TextToCopy="@tab.Address" />
                                                    <VENFTApp_Blazor.Components.Bookmark IsInBookmarks="@tab.IsInBookmark"
                                                                                         Address="@addressInOpenTab"
                                                                                         BookmarkRefreshed="@BookmarkRefreshedHandler" />
                                                    <i class="oi oi-envelope-closed" style="margin-left:10px; margin-top:0px; font-size:14px;" @onclick="showSendMessage"></i>
                                                </div>
                                            </div>
                                            <!--
                                            <div class="row" style="margin-top:10px;">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <h3>Profile</h3>
                                                </div>
                                            </div>-->
                                            <div class="row bg-light" style="margin-top:5px;">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <div class="row">
                                                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                            <img src="@tab.Profile.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                                                        </div>
                                                    </div>
                                                    <div class="row" style="margin-left:20px;">
                                                        <div class="col">
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    <span>Name: @tab.Profile.Name @tab.Profile.Surname</span>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    Nick: @tab.Profile.Nickname
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    Bio: @tab.Profile.Description
                                                                </div>
                                                            </div>
                                                            @if (!string.IsNullOrEmpty(tab.Profile.Link))
                                                            {
                                                                <div class="row">
                                                                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                        <a href="@tab.Profile.Link" target="_blank">Webpage</a>
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row" style="margin-top:20px">
                                                <div class="col">
                                                    @if (tab.Selected)
                                                    {
                                                        <VENFTApp_Blazor.Components.NFTList Address="@tab.Address" MainAccount="@false" />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <VENFTApp_Blazor.Components.InfoEventModal />
    </div>
</Spin>

<Modal Title="Open Tab"
       Visible="@openTabVisible"
       OnOk="@addNewTab"
       OnCancel="@addNewTabCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Select from Bookmarks</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Dropdown Trigger="@(new TriggerType[] { TriggerType.Click })">
                        <Overlay>
                            <Menu>
                                @foreach (var b in AppData.Account.Bookmarks)
                                {
                                    <MenuItem>
                                        <span @onclick="() => selectNewTabAddressFromBookmark(b.Address, b.Name)">@b.Name</span>
                                    </MenuItem>
                                }
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            <a class="ant-dropdown-link" @onclick:preventDefault>
                                @selectedNewTabFromBookmarkName <Icon Type="down" />
                            </a>
                        </ChildContent>
                    </Dropdown>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <button @onclick="openPublicAddresses" class="btn btn-secondary" type="button">Or Browse Public Addresses</button>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Or Input Neblio Address</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Input Neblio address" @bind-Value="@newTabAddress" Style="font-size:12px; min-width:150px; max-width:250px;" />
                    <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="QRTextReaded" />-->
                </div>
            </div>
        </div>
    </div>
</Modal>

<Modal Title="Browse Public Addresses"
       Visible="@browsePublicAddresses"
       OnOk="@closePublicAddresses"
       OnCancel="@closePublicAddresses">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">

            @if (AppData.VENFTOwners.Count == 0)
            {
                <p><Spin Tip="Loading..."></Spin></p>
            }
            else
            {
                <table>
                    <thead>
                        <tr>
                            <th>Address</th>
                            <th>Number Of NFTs</th>
                            <th>Open In Tab</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var owner in AppData.VENFTOwners)
                        {
                            <tr style="margin-top:14px;">
                                <td>
                                    <a target="_blank" rel="noopener noreferrer" @onclick="async () => addNewPublicTabModal(owner.Address)">
                                        @PublicNameInBookmarks(owner.Address, owner.ShortenAddress)
                                    </a>
                                </td>
                                <td>
                                    <span style="margin-left:12px;">@owner.AmountOfNFTs NFTs</span>
                                </td>
                                <td>
                                    <a style="margin-left:20px;" target="_blank" rel="noopener noreferrer" @onclick="async () => addNewPublicTabModal(owner.Address)">
                                        <i class="oi oi-browser" style="font-size:25px;"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</Modal>

<Modal Title="Send Message"
       Visible="@sendMessageVisible"
       OnOk="@sendMessageConfirm"
       OnCancel="@sendMessageCancel">
    <VENFTApp_Blazor.Components.SendMessage Receiver="@addressInOpenTab" />
</Modal>

@code {
        bool sendMessageVisible = false;
        bool openTabBrowser = false;
        bool loadingBrowser = false;
        bool browsePublicAddresses = false;
        bool copyTextButtonCoppied = false;
        int holdersPage = 0;

    private string selectedNewTabFromBookmarkName = "Select From Bookmark";

    private bool openTabVisible = false;
    string addressInOpenTab = string.Empty;
    private string newTabAddress = string.Empty;

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
                Redirect();
            else
            {
                LoadBookmarksAndState();
                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task browseTabs(MouseEventArgs e)
    {
        openTabBrowser = true;
        StateHasChanged();
    }

    private string PublicNameInBookmarks(string address, string shortaddress)
    {
        var res = AppData.Account.IsInTheBookmarks(address).GetAwaiter().GetResult();
        if (res.Item1)
            if (!string.IsNullOrEmpty(res.Item2.Name))
                return res.Item2.Name;
        return shortaddress;
    }

    private void browseTabsClosed(bool e)
    {
        openTabBrowser = e;
        StateHasChanged();
    }
    private void TabClosedHandler(string addr)
    {
        StateHasChanged();
    }
    private void TabSelectedHandler(string addr)
    {
        StateHasChanged();
    }
    private void TabAddedHandler(string addr)
    {
        StateHasChanged();
    }

    private async Task QRTextReaded(string text)
    {
        newTabAddress = text;
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task closePublicAddresses(MouseEventArgs e)
    {
        browsePublicAddresses = false;
    }

    private async Task openPublicAddresses(MouseEventArgs e)
    {
        browsePublicAddresses = true;
    }

    private async Task LoadBookmarksAndState()
    {
        try
        {
            loadingBrowser = true;
            try
            {
                var bookmarks = await localStorage.GetItemAsync<string>("bookmarks");
                if (bookmarks == "{}" || bookmarks == "[]")
                    bookmarks = string.Empty;

                if (!string.IsNullOrEmpty(bookmarks))
                    if (AppData.Account.Bookmarks.Count == 0)
                        await AppData.Account.LoadBookmarks(bookmarks);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load bookmarks!" + ex.Message);
            }
            try
            {
                var browserTabs = await localStorage.GetItemAsync<string>("browserTabs");
                if (!string.IsNullOrEmpty(browserTabs))
                    if (AppData.Account.Tabs.Count == 0)
                        addressInOpenTab = await AppData.Account.LoadTabs(browserTabs);

            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load tabs history!" + ex.Message);
            }
            loadingBrowser = false;
            StateHasChanged();

            //if (AppData.VENFTOwners.Count == 0)
            await LoadVENFTOwners();
        }
        catch (Exception ex)
        {
            //todo
            Console.WriteLine("Error during loading browser. " + ex.Message);
            loadingBrowser = false;
        }
    }

    private async Task LoadVENFTOwners()
    {
        var req = new HttpRequestMessage(HttpMethod.Get, $"https://nftticketverifierapp.azurewebsites.net/api/GetVENFTOwners");
        req.Headers.Add("Accept", "application/json");
        req.Headers.Add("User-Agent", "VENFT-App");

        var resp = await _client.SendAsync(req);
        var respmsg = await resp.Content.ReadAsStringAsync();
        if (string.IsNullOrEmpty(respmsg))
            return;
        var tokowns = JsonConvert.DeserializeObject<Dictionary<string, TokenOwnerDto>>(respmsg);
        if (tokowns != null)
        {
            AppData.VENFTOwners.Clear();
            foreach (var o in tokowns.Values)
                AppData.VENFTOwners.Add(o);
        }
    }

    private void BookmarkRefreshedHandler(VEDriversLite.Bookmarks.Bookmark bookmark)
    {
        StateHasChanged();
    }

    private async Task addNewPublicTabModal(string address)
    {
        browsePublicAddresses = false;
        newTabAddress = address;
        openTabVisible = true;
    }

    private async Task addNewTabModal()
    {
        selectedNewTabFromBookmarkName = "Select From Bookmark";
        newTabAddress = string.Empty;
        StateHasChanged();
        openTabVisible = true;
    }

    private async Task addNewTab()
    {
        openTabVisible = false;
        var tab = AppData.Account.Tabs.Find(t => t.Address == newTabAddress);
        if (tab != null)
        {
            await selectTab(tab.Address);
            return;
        }
        loadingBrowser = true;
        StateHasChanged();
        var res = await AppData.Account.AddTab(newTabAddress);
        await Task.Delay(50);
        if (res.Item1)
            await localStorage.SetItemAsync("browserTabs", res.Item2);
        addressInOpenTab = newTabAddress;
        loadingBrowser = false;
        StateHasChanged();
    }

    private async Task addNewTabCancel()
    {
        openTabVisible = false;
    }

    private async Task selectTab(string address)
    {
        loadingBrowser = true;
        StateHasChanged();
        await AppData.Account.SelectTab(address);
        addressInOpenTab = address;
        loadingBrowser = false;
        await Task.Delay(50);
        StateHasChanged();
    }

    private async Task removeTab(string address)
    {
        var tbs = await AppData.Account.RemoveTab(address);
        if (tbs.Item1)
            await localStorage.SetItemAsync("browserTabs", tbs.Item2);
    }

    private async Task selectNewTabAddressFromBookmark(string address, string name)
    {
        selectedNewTabFromBookmarkName = name;
        newTabAddress = address;
        StateHasChanged();
    }


    private async Task showSendMessage()
    {
        sendMessageVisible = true;
        StateHasChanged();
    }

    private async Task sendMessageConfirm(MouseEventArgs e)
    {
        sendMessageVisible = false;
        StateHasChanged();
    }

    private async Task sendMessageCancel(MouseEventArgs e)
    {
        sendMessageVisible = false;
    }
}
