@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Bookmarks
@using VEDriversLite.NFT
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager
@page "/browser"

<Spin Tip="Loading Browser..." Spinning="@loadingBrowser">
    <div class="container-fluid">
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <h1>NFT Browser</h1>
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <h6>Browse All VENFT Holders</h6>
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <button @onclick="openPublicAddresses" class="btn btn-secondary" type="button">Browse Public Addresses</button>
            </div>
        </div>

        <div class="row d-flex justify-content-center align-items-center" style="margin-top:50px;">
            <div class="col">
                <div>
                    <ul class="nav nav-tabs" role="tablist" id="shopTabsHeadings">
                        @foreach (var tab in Tabs)
                        {
                            <li class="nav-item" role="presentation">
                                <a class="nav-link" role="tab" data-toggle="tab" @onclick="async () => selectTab(tab)">
                                    @tab.ShortAddress
                                    <button class="btn btn-secondary" @onclick="async () => removeTab(tab)" type="button" style="padding-top: 0px;padding-right: 5px;padding-bottom: 0px;padding-left: 4px;font-size: 12px;margin-left: 15px;margin-bottom: 5px;margin-right: -6px;">
                                        <i class="oi oi-circle-x"></i>
                                    </button>
                                </a>
                            </li>
                        }
                        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-toggle="tab" @onclick="async () => addNewTabModal()"><i class="oi oi-plus" style="font-size: 20px;"></i></a></li>
                    </ul>
                    <div class="tab-content" id="shopTabsContent">

                        @foreach (var tab in Tabs)
                        {
                            var selected = "";
                            if (tab.Selected)
                            {
                                <div role="tabpanel" class="tab-pane active" style="min-height: 200px;">
                                    <div class="row">
                                        <div class="col">
                                            <div class="row" style="margin-top: 10px;">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <h6>@tab.Address</h6>
                                                    <!--
                                                        <a style="font-size: 20px; margin-left:15px; margin-bottom: 10px">
                                                            <i class="oi oi-star"></i>
                                                        </a>-->
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <h3>Profile</h3>
                                                </div>
                                            </div>
                                            <div class="row bg-light">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <div class="row">
                                                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                            <img src="@tab.Profile.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                                                        </div>
                                                    </div>
                                                    <div class="row" style="margin-left:20px;">
                                                        <div class="col">
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    <span>Name: @tab.Profile.Name @tab.Profile.Surname</span>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    Nick: @tab.Profile.Nickname
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    Bio: @tab.Profile.Description
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    <a href="@tab.Profile.Link" target="_blank">Webpage</a>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row" style="margin-top:20px">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <div>
                                                        <div class="row">
                                                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                @if (tab.NFTs.Count == 0)
                                                                {
                                                                    <p><em><Spin Tip="Loading...No NFTs found yet"></Spin></em></p>
                                                                }
                                                                else
                                                                {
                                                                    @foreach (var nft in tab.NFTs)
                                                                    {
                                                                        if (nft.TypeText != "NFT Profile" && nft.TypeText != "NFT Settings")
                                                                        {
                                                                            <div class="card" style="margin-left:10px; margin-top:10px; max-width:250px; min-width:50px;">
                                                                                <img class="card-img-top" src="@nft.ImageLink" style="min-height:50px; max-height:250px; height:auto; max-width:250px; min-width:50px; width:auto;" />
                                                                                <div class="card-body">
                                                                                    <div class="row">
                                                                                        <div class="col">
                                                                                            <div class="row">
                                                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                                                    <VENFTApp_Blazor.Components.NFTThumbnail Name="@nft.Name" Type="@nft.Type" Author="@nft.Author" Description="@nft.Description" />
                                                                                                </div>
                                                                                            </div>
                                                                                            <div class="row">
                                                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                                                    <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft)" style="margin-top:10px; width: 50px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;"><i class="oi oi-info" style="font-size:12px;"></i></button>
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</Spin>

<Modal Title="Open Tab"
       Visible="@openTabVisible"
       OnOk="@addNewTab"
       OnCancel="@addNewTabCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Please Input Neblio Address</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Input Neblio address" @bind-Value="@newTabAddress" Style="font-size:12px; min-width:150px; max-width:250px;" />
                </div>
            </div>
        </div>
    </div>
</Modal>

<Modal Title="@nftInDetails.Name"
       Visible="@nftDetailsVisible"
       OnOk="@CloseNFTDetails"
       OnCancel="@CloseNFTDetails">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Name: @nftInDetails.Name</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Author: @nftInDetails.Author</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Description: @nftInDetails.Description</span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(nftInDetails.Link))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="@nftInDetails.Link" target="_blank">Connected Link</a>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <a href="https://explorer.nebl.io/tx/@nftInDetails.NFTOriginTxId" target="_blank">Mint Tx In Explorer</a>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <a href="@nftInDetails.ImageLink" target="_blank"><img src="@nftInDetails.ImageLink" style="min-height:50px; max-height:100px; width:auto;" /></a>
                </div>
            </div>


            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <hr />
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <button class="btn btn-primary" @onclick="async () => LoadNFTHistory(nftInDetails)"><i class="oi oi-timer"></i> Load NFT History</button>
                </div>
            </div>
            <div class="row" style="margin-top:30px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Spin Tip="Loading History..." Spinning="@loadingNFTHistory">
                        <table>
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Image</th>
                                </tr>
                            </thead>
                            <tbody style="margin-top:10px;">
                                @if (nftInDetailsHistory != null)
                                {
                                    @if (nftInDetailsHistory.Count > 0)
                                    {
                                        @foreach (var nft in nftInDetailsHistory)
                                        {
                                            <tr>
                                                <td>@nft.Name</td>
                                                <td>@nft.Description</td>
                                                <td>
                                                    <a href="@nft.ImageLink" target="_blank">
                                                        <img src="@nft.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td>History Not Loaded</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </Spin>
                </div>
            </div>
        </div>
    </div>
</Modal>

<Modal Title="Browse Public Addresses"
       Visible="@browsePublicAddresses"
       OnOk="@closePublicAddresses"
       OnCancel="@closePublicAddresses">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">

            @if (VENFTOwners.Count == 0)
            {
                <p><Spin Tip="Loading..."></Spin></p>
            }
            else
            {
                <table>
                    <thead>
                        <tr>
                            <th>Address</th>
                            <th>Number Of NFTs</th>
                            <th>Balance of VENFT</th>
                            <th>Open In Tab</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var owner in VENFTOwners)
                        {
                            <tr style="margin-top:10px;">
                                <td>
                                    <a target="_blank" rel="noopener noreferrer" @onclick="async () => addNewPublicTabModal(owner.Address)">
                                        @owner.ShortenAddress
                                    </a>
                                </td>
                                <td>
                                    <span style="margin-left:10px;">@owner.AmountOfNFTs NFTs</span>
                                </td>
                                <td>
                                    <span style="margin-left:10px;">@owner.AmountOfTokens VENFT</span>
                                </td>
                                <td>
                                    <a style="margin-left:20px;" target="_blank" rel="noopener noreferrer" @onclick="async () => addNewPublicTabModal(owner.Address)">
                                        <i class="oi oi-browser" style="font-size:16px;"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</Modal>

@code {
    bool loadingBrowser = false;
    bool browsePublicAddresses = false;

    List<TokenOwnerDto> VENFTOwners = new List<TokenOwnerDto>();

    bool nftDetailsVisible = false;
    private INFT nftInDetails = new ImageNFT("");
    bool loadingNFTHistory = false;
    List<INFT> nftInDetailsHistory = new List<INFT>();

    int holdersPage = 0;

    private bool openTabVisible = false;
    private string newTabAddress = string.Empty;
    private List<ActiveTab> Tabs = new List<ActiveTab>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                AppData.Account = new NeblioAccount();
                await Task.Delay(500);
                NavManager.NavigateTo("/");
            }
            else
            {
                await LoadBookmarksAndState();
            }
        }
        catch(Exception ex)
        {
            AppData.Account = new NeblioAccount();
            await Task.Delay(500);
            NavManager.NavigateTo("/");
        }
    }

    private async Task closePublicAddresses(MouseEventArgs e)
    {
        browsePublicAddresses = false;
    }

    private async Task openPublicAddresses(MouseEventArgs e)
    {
        browsePublicAddresses = true;
    }

    private async Task CloseNFTDetails(MouseEventArgs e)
    {
        nftDetailsVisible = false;
    }

    private async Task ShowNFTDetails(INFT nft)
    {
        nftInDetailsHistory = new List<INFT>();
        nftInDetails = nft;
        nftDetailsVisible = true;
    }

    private async Task LoadBookmarksAndState()
    {
        try
        {
            loadingBrowser = true;
            var bookmarks = await localStorage.GetItemAsync<string>("bookmarks");
            if (!string.IsNullOrEmpty(bookmarks))
            {
                await AppData.Account.LoadBookmarks(bookmarks);
            }

            var browserTabs = await localStorage.GetItemAsync<string>("browserTabs");

            try
            {
                if (!string.IsNullOrEmpty(browserTabs))
                    Tabs = await NFTHelpers.GetTabs(browserTabs);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load tabs history!");
            }

            if (Tabs == null)
                Tabs = new List<ActiveTab>();

            var setFirst = true;
            if (Tabs.Count > 0)
            {
                foreach (var t in Tabs)
                {
                    t.Selected = setFirst;
                    if (setFirst)
                    {
                        setFirst = false;
                        try
                        {
                            t.NFTs = await NFTHelpers.LoadAddressNFTs(t.Address);
                        }
                        catch (Exception ex)
                        {
                            // todo
                        }
                        StateHasChanged();
                        try
                        {
                            t.Profile = await NFTHelpers.FindProfileNFT(t.NFTs);
                        }
                        catch (Exception ex)
                        {
                            // todo
                        }
                    }
                }
            }
            loadingBrowser = false;
            StateHasChanged();
            VENFTOwners = await NeblioTransactionHelpers.GetTokenOwners("La58e9EeXUMx41uyfqk6kgVWAQq9yBs44nuQW8");
        }
        catch (Exception ex)
        {
            //todo
            Console.WriteLine("Error during loading browser. " + ex.Message);
            loadingBrowser = false;
        }
    }

    private async Task AddBookmark(string name, string address, string note)
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(address))
        {
            if (string.IsNullOrEmpty(note))
                note = string.Empty;

            var bks = await AppData.Account.AddBookmark(name, address, note);
            if (bks.Item1)
                await localStorage.SetItemAsync("bookmarks", bks.Item2);
        }
    }

    private async Task RemoveBookmark(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            var bks = await AppData.Account.RemoveBookmark(address);
            await localStorage.SetItemAsync("bookmarks", bks);
        }
    }

    private async Task addNewTabModal()
    {
        openTabVisible = true;
    }

    private async Task addNewPublicTabModal(string address)
    {
        browsePublicAddresses = false;
        newTabAddress = address;
        openTabVisible = true;
    }

    private async Task addNewTab()
    {
        if (Tabs.Count > 0)
            foreach (var t in Tabs)
                t.Selected = false;

        var tab = new ActiveTab(newTabAddress);
        tab.Selected = true;
        openTabVisible = false;
        Tabs.Add(tab);
        StateHasChanged();

        try
        {
            tab.NFTs = await NFTHelpers.LoadAddressNFTs(newTabAddress);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            //
        }

        try
        {
            tab.Profile = await NFTHelpers.FindProfileNFT(tab.NFTs);
        }
        catch (Exception ex)
        {
            //todo
        }

        var bst = await NFTHelpers.SerializeTabs(Tabs);
        await localStorage.SetItemAsync("browserTabs", bst);
    }

    private async Task addNewTabCancel()
    {
        openTabVisible = false;
    }

    private async Task selectTab(ActiveTab tab)
    {
        foreach (var t in Tabs)
            t.Selected = false;

        Tabs.FirstOrDefault(t => t.Address == tab.Address).Selected = true;

        if (tab.NFTs.Count == 0)
        {
            try
            {
                tab.NFTs = await NFTHelpers.LoadAddressNFTs(tab.Address);
            }
            catch (Exception ex)
            {
                // todo
            }

            try
            {
                tab.Profile = await NFTHelpers.FindProfileNFT(tab.NFTs);
            }
            catch (Exception ex)
            {
                // todo
            }
            StateHasChanged();
        }
    }

    private async Task removeTab(ActiveTab tab)
    {
        if (Tabs.Count > 0)
        {
            Tabs.Remove(tab);

            var t = Tabs.FirstOrDefault();
            if (t != null)
                t.Selected = true;

            var bst = await NFTHelpers.SerializeTabs(Tabs);
            await localStorage.SetItemAsync("browserTabs", bst);
        }
    }

    private async Task LoadNFTHistory(INFT nft)
    {
        loadingNFTHistory = true;
        await Task.Delay(50);
        StateHasChanged();
        nftInDetailsHistory = await NFTHelpers.LoadNFTsHistory(nft.Utxo);
        loadingNFTHistory = false;
        await Task.Delay(50);
        StateHasChanged();
    }
}
