@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Bookmarks
@using VEDriversLite.NFT
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient _client
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@page "/browser"

<Spin Tip="Loading Browser..." Spinning="@loadingBrowser">
    <div class="container-fluid">
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <h3>NFT Browser</h3>
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <VENFTApp_Blazor.Components.AccountBalances />
            </div>
        </div>

        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <h6>Browse All VENFT Holders</h6>
            </div>
        </div>
        <div class="row" style="margin-top:10px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <button @onclick="openPublicAddresses" class="btn btn-secondary" type="button">Browse Public Addresses</button>
            </div>
        </div>

        <div class="row d-flex justify-content-center align-items-center" style="margin-top:50px;">
            <div class="col">
                <div>
                    <ul class="nav nav-tabs" role="tablist" id="shopTabsHeadings">
                        @foreach (var tab in AppData.Tabs)
                        {
                            <li class="nav-item" role="presentation">
                                <a class="nav-link" role="tab" data-toggle="tab" @onclick="async () => selectTab(tab)">
                                    @tab.ShortAddress
                                    <button class="btn btn-light" @onclick="async () => removeTab(tab)" type="button" style="padding-top: 0px;padding-right: 5px;padding-bottom: 2px;padding-left: 4px;font-size: 12px;margin-left: 15px;margin-bottom: 5px;margin-right: -6px;">
                                        <i class="oi oi-x" style="font-size:7px;"></i>
                                    </button>
                                </a>
                            </li>
                        }
                        <li class="nav-item" role="presentation"><a class="nav-link" role="tab" data-toggle="tab" @onclick="async () => addNewTabModal()"><i class="oi oi-plus" style="font-size: 20px;"></i></a></li>
                    </ul>
                    <div class="tab-content" id="shopTabsContent">

                        @foreach (var tab in AppData.Tabs)
                        {
                            var selected = "";
                            if (tab.Selected)
                            {
                                <div role="tabpanel" class="tab-pane active" style="min-height: 200px;">
                                    <div class="row">
                                        <div class="col">
                                            <div class="row" style="margin-top: 10px;">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <h6>@tab.Address</h6>
                                                    @if (!copyTextButtonCoppied)
                                                    {
                                                        <i class="oi oi-share-boxed" style="margin-left:10px; font-size:12px;" @onclick="async () => copyCodeToClipboard(tab.Address)"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="oi oi-check" style="margin-left:10px; font-size:12px;"></i>
                                                    }
                                                    <i class="oi oi-grid-four-up" style="margin-left:10px; font-size:12px;" @onclick="showQRDialogOpen"></i>
                
                                                    <!--
                                                    <a style="font-size: 20px; margin-left:15px; margin-bottom: 10px">
                                                        <i class="oi oi-star"></i>
                                                    </a>-->
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <h3>Profile</h3>
                                                </div>
                                            </div>
                                            <div class="row bg-light">
                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                    <div class="row">
                                                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                            <img src="@tab.Profile.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                                                        </div>
                                                    </div>
                                                    <div class="row" style="margin-left:20px;">
                                                        <div class="col">
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    <span>Name: @tab.Profile.Name @tab.Profile.Surname</span>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    Nick: @tab.Profile.Nickname
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    Bio: @tab.Profile.Description
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                                                    <a href="@tab.Profile.Link" target="_blank">Webpage</a>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row" style="margin-top:20px">
                                                <div class="col">
                                                    @if (tab.Selected)
                                                    {
                                                        <VENFTApp_Blazor.Components.NFTList Address="@tab.Address" MainAccount="@false" />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <VENFTApp_Blazor.Components.InfoEventModal />
    </div>
</Spin>

<Modal Title="Open Tab"
       Visible="@openTabVisible"
       OnOk="@addNewTab"
       OnCancel="@addNewTabCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Please Input Neblio Address</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Input Neblio address" @bind-Value="@newTabAddress" Style="font-size:12px; min-width:150px; max-width:250px;" />
                </div>
            </div>
        </div>
    </div>
</Modal>

<Modal Title="Browse Public Addresses"
       Visible="@browsePublicAddresses"
       OnOk="@closePublicAddresses"
       OnCancel="@closePublicAddresses">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">

            @if (AppData.VENFTOwners.Count == 0)
            {
                <p><Spin Tip="Loading..."></Spin></p>
            }
            else
            {
                <table>
                    <thead>
                        <tr>
                            <th>Address</th>
                            <th>Number Of NFTs</th>
                            <th>Balance of VENFT</th>
                            <th>Open In Tab</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var owner in AppData.VENFTOwners)
                        {
                            <tr style="margin-top:14px;">
                                <td>
                                    <a target="_blank" rel="noopener noreferrer" @onclick="async () => addNewPublicTabModal(owner.Address)">
                                        @owner.ShortenAddress
                                    </a>
                                </td>
                                <td>
                                    <span style="margin-left:12px;">@owner.AmountOfNFTs NFTs</span>
                                </td>
                                <td>
                                    <span style="margin-left:12px;">@owner.AmountOfTokens VENFT</span>
                                </td>
                                <td>
                                    <a style="margin-left:20px;" target="_blank" rel="noopener noreferrer" @onclick="async () => addNewPublicTabModal(owner.Address)">
                                        <i class="oi oi-browser" style="font-size:25px;"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</Modal>

<Modal Title="Address"
       Visible="@showQRDialogVisible"
       OnOk="@showQRDialogCancel"
       Style="width:auto; max-width:300px;"
       OnCancel="@showQRDialogCancel">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <span>@addressInOpenTab</span>
        </div>
    </div>
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <div @ref=qrCodeRef></div>
        </div>
    </div>
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex justify-content-center align-items-center">
            @if (!copyTextButtonCoppied)
            {
                <button class="btn btn-light" @onclick="async () => copyCodeToClipboard(addressInOpenTab)">Copy <i class="oi oi-share"></i></button>
            }
            else
            {
                <button class="btn btn-light" @onclick="async () => copyCodeToClipboard(addressInOpenTab)">Copied <i class="oi oi-check"></i></button>
            }
        </div>
    </div>
</Modal>

@code {
    bool loadingBrowser = false;
    bool browsePublicAddresses = false;
    bool copyTextButtonCoppied = false;
    int holdersPage = 0;

    bool showQRDialogVisible = false;
    private ElementReference qrCodeRef;

    private bool openTabVisible = false;
    string addressInOpenTab = string.Empty;
    private string newTabAddress = string.Empty;

    protected override Task OnInitializedAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(AppData.Account.Address))
            {
                Redirect();
            }
            else
            {
                LoadBookmarksAndState();

                if (AppData.Account != null)
                    AppData.Account.Refreshed += RefreshedHandler;
            }
        }
        catch (Exception ex)
        {
            Redirect();
        }

        return base.OnInitializedAsync();
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task Redirect()
    {
        AppData.Account = new NeblioAccount();
        await Task.Delay(500);
        NavManager.NavigateTo("/");
    }

    private async Task showQRDialogOpen(MouseEventArgs e)
    {
        showQRDialogVisible = true;
        StateHasChanged();
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("jsFunctions.getQRCode", new object[] { addressInOpenTab, qrCodeRef });
        StateHasChanged();
    }

    private async Task showQRDialogCancel(MouseEventArgs e)
    {
        showQRDialogVisible = false;
    }

    private async Task copyCodeToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("jsFunctions.copyToClipboard", text);
        await copyCodeToClipboardButtonTextEfect();
    }

    private async Task copyCodeToClipboardButtonTextEfect()
    {
        copyTextButtonCoppied = true;
        StateHasChanged();
        await Task.Delay(1000);
        copyTextButtonCoppied = false;
        StateHasChanged();
    }

    private async Task closePublicAddresses(MouseEventArgs e)
    {
        browsePublicAddresses = false;
    }

    private async Task openPublicAddresses(MouseEventArgs e)
    {
        browsePublicAddresses = true;
    }

    private async Task LoadBookmarksAndState()
    {
        try
        {
            var setFirst = true;
            loadingBrowser = true;
            var bookmarks = await localStorage.GetItemAsync<string>("bookmarks");
            if (!string.IsNullOrEmpty(bookmarks))
            {
                await AppData.Account.LoadBookmarks(bookmarks);
            }

            var browserTabs = await localStorage.GetItemAsync<string>("browserTabs");

            try
            {
                if (!string.IsNullOrEmpty(browserTabs))
                    if (AppData.Tabs.Count == 0)
                        AppData.Tabs = await NFTHelpers.GetTabs(browserTabs);
                    else
                        setFirst = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot load tabs history!");
            }

            if (AppData.Tabs == null)
                AppData.Tabs = new List<ActiveTab>();

            if (setFirst)
            {
                if (AppData.Tabs.Count > 0)
                {
                    foreach (var t in AppData.Tabs)
                    {
                        t.Selected = setFirst;
                        if (setFirst)
                        {
                            setFirst = false;
                            try
                            {
                                await t.Reload();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("Exception during loading NFTs and Profile of the tab. " + ex.Message);
                            }
                        }
                    }
                }
            }

            loadingBrowser = false;
            StateHasChanged();

            if (AppData.VENFTOwners.Count == 0)
                AppData.VENFTOwners = await NeblioTransactionHelpers.GetTokenOwners(NFTHelpers.TokenId);
        }
        catch (Exception ex)
        {
            //todo
            Console.WriteLine("Error during loading browser. " + ex.Message);
            loadingBrowser = false;
        }
    }

    private async Task AddBookmark(string name, string address, string note)
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(address))
        {
            if (string.IsNullOrEmpty(note))
                note = string.Empty;

            var bks = await AppData.Account.AddBookmark(name, address, note);
            if (bks.Item1)
                await localStorage.SetItemAsync("bookmarks", bks.Item2);
        }
    }

    private async Task RemoveBookmark(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            var bks = await AppData.Account.RemoveBookmark(address);
            await localStorage.SetItemAsync("bookmarks", bks);
        }
    }

    private async Task addNewTabModal()
    {
        openTabVisible = true;
    }

    private async Task addNewPublicTabModal(string address)
    {
        browsePublicAddresses = false;
        newTabAddress = address;
        openTabVisible = true;
    }

    private async Task addNewTab()
    {
        loadingBrowser = true;

        if (AppData.Tabs.Count > 0)
            foreach (var t in AppData.Tabs)
                t.Selected = false;

        var tab = new ActiveTab(newTabAddress);
        tab.Selected = true;
        openTabVisible = false;
        AppData.Tabs.Add(tab);
        addressInOpenTab = tab.Address;
        StateHasChanged();

        try
        {
            await tab.Reload();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception during loading NFTs and Profile of the tab. " + ex.Message);
        }
        loadingBrowser = false;
        StateHasChanged();

        var bst = await NFTHelpers.SerializeTabs(AppData.Tabs);
        await localStorage.SetItemAsync("browserTabs", bst);
    }

    private async Task addNewTabCancel()
    {
        openTabVisible = false;
    }

    private async Task selectTab(ActiveTab tab)
    {
        loadingBrowser = true;
        foreach (var t in AppData.Tabs)
            t.Selected = false;

        AppData.Tabs.FirstOrDefault(t => t.Address == tab.Address).Selected = true;

        addressInOpenTab = tab.Address;

        if (tab.NFTs.Count == 0)
        {
            await tab.Reload();
        }
        loadingBrowser = false;
        StateHasChanged();
    }

    private async Task removeTab(ActiveTab tab)
    {
        if (AppData.Tabs.Count > 0)
        {
            AppData.Tabs.Remove(tab);

            var t = AppData.Tabs.FirstOrDefault();
            if (t != null)
                t.Selected = true;

            var bst = await NFTHelpers.SerializeTabs(AppData.Tabs);
            await localStorage.SetItemAsync("browserTabs", bst);
        }
    }
}
