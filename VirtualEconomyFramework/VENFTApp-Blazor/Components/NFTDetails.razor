@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using Newtonsoft.Json
@inject AppData AppData
@inject HttpClient _client
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <Spin Tip="Loading..." Spinning="@loading">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Name: @NFT.Name</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Author: @NFT.Author</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Description: @NFT.Description</span>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(NFT.Link) && NFT.Type != NFTTypes.Music)
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="@NFT.Link" target="_blank">Connected Link</a>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(NFT.NFTOriginTxId))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="https://explorer.nebl.io/tx/@NFT.NFTOriginTxId" target="_blank">Mint Tx In Explorer</a>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(NFT.Utxo))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="https://explorer.nebl.io/tx/@NFT.Utxo" target="_blank">Tx In Explorer</a>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Confirmations: @NFT.TxDetails.Confirmations.ToString()</span>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <a href="@NFT.ImageLink" target="_blank">
                        @if (NFT.Type == NFTTypes.Music)
                        {
                            <video controls="" autoplay="" name="media">
                                <source src="@NFT.Link" type="audio/mpeg">
                            </video>
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(NFT.ImageLink))
                            {
                                <img src="@NFT.ImageLink" style="min-height:50px; max-height:150px; width:auto;" />
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <img src="@NFT.ImageLink" style="min-height:100px; max-height:150px; width:auto; min-width:50px; max-width:250px;" />
                                </Spin>
                            }
                        }
                    </a>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                @if (!AppData.Account.ReceivedPayments.ContainsKey(NFT.Utxo))
                {
                    @if (OwnNFT)
                    {
                        @if (NFT.PriceActive)
                        {
                            <div class="col w-100 d-flex justify-content-center align-items-center">
                                <small class="text-muted">Setted Price: @NFT.Price NEBL</small>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="col w-100 d-flex justify-content-center align-items-center">
                        <small class="text-muted">Sold. Waiting for processing.</small>
                    </div>
                }
            </div>
            @if (OwnNFT)
            {
                @if (NFT.TxDetails.Confirmations > 1)
                {
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            @if (NFT.Type == NFTTypes.Post)
                            {
                                <button class="btn btn-secondary" @onclick="async () => ShowUpdatePostNFTDialog()" style="width:65px; height:65px; margin-right:20px;">
                                    <div class="row">
                                        <div class="col">
                                            <div class="row d-flex justify-content-center align-items-center">
                                                <div class="col">
                                                    <i class="oi oi-pencil"></i>
                                                </div>
                                            </div>
                                            <div class="row d-flex justify-content-center align-items-center">
                                                <div class="col">
                                                    <span style="font-size: 12px;">Edit</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </button>
                            }
                            <button class="btn btn-primary" @onclick="async () => ShowSendNFTDialog()" style="width:65px; height:65px;">
                                <div class="row">
                                    <div class="col">
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <i class="oi oi-location"></i>
                                            </div>
                                        </div>
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <span style="font-size: 12px;">Send</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </button>
                            <button class="btn btn-primary" @onclick="async () => ShowSetPriceNFTDialog()" style="width:65px; height:65px; margin-left:20px;">
                                <div class="row">
                                    <div class="col">
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <i class="oi oi-dollar"></i>
                                            </div>
                                        </div>
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <span style="font-size: 12px;">Sell</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </button>
                            <button class="btn btn-primary" @onclick="async () => await ShowOwnershipQRCode()" style="width:65px; height:65px; margin-left:20px;">
                                <div class="row">
                                    <div class="col">
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <i class="oi oi-grid-four-up"></i>
                                            </div>
                                        </div>
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <span style="font-size: 12px;">QR</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </button>
                        </div>
                    </div>
                }
            }

            <VENFTApp_Blazor.Components.NFTHistory Utxo="@NFT.Utxo" />
        </Spin>
    </div>

    <SendNFT NFT="@NFT" NFTSent="@NFTSentHandler" @bind-SendNFTDialogVisible="sendNFTDialogVisible" />
    <SetNFTPrice NFT="@NFT" NFTSent="@NFTSentHandler" @bind-SetPriceNFTDialogVisible="setPriceNFTDialogVisible" />

    <Modal Title="Create or edit post NFT"
           Visible="@createNewPostVisible"
           OnOk="@createNewPostConfirm"
           OnCancel="@createNewPostCancel">
        <MintNFTForm NFTType="NFTTypes.Post" NFT="@NFT" RedirectToNFTsAfterMint="false" NFTMinted="@NFTMinted" />
    </Modal>

    <Modal Title="Ownership QR Code"
           Visible="@showOwnershipDialogVisible"
           OnOk="@showOwnershipDialogCancel"
           Style="width:auto; max-width:300px;"
           OnCancel="@showOwnershipDialogCancel">
        <Spin Tip="@creatingOwnerQRCodeState" Spinning="@showOwnershipDialogLoading">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span class="text-center">Code is valid for: @qrCodeRefreshCounter s</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <small>Signature</small>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h6 class="text-center">@ownershipDialogCode</h6>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <!--<img src="@ownershipDialogQRCodeImage" style="max-width:250px;" />-->
                    <!--<div id="qrCodeRef"></div>-->
                    <div @ref=qrCodeRef></div>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    @if (!copyTextButtonCoppied)
                    {
                        <button class="btn btn-light" @onclick="copyCodeToClipboard">Copy <i class="oi oi-share"></i></button>
                    }
                    else
                    {
                        <button class="btn btn-light" @onclick="copyCodeToClipboard">Copied <i class="oi oi-check"></i></button>
                    }
                </div>
            </div>
        </Spin>
    </Modal>
</div>



@code {

    private INFT NFT { get; set; } = new ImageNFT("");

    private string _utxo = string.Empty;
    [Parameter]
    public string Utxo
    {
        get => _utxo;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                if (_utxo != value)
                {
                    _utxo = value;
                    Load();
                }
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    bool createNewPostVisible = false;
    bool sendNFTDialogVisible = false;
    bool showOwnershipDialogVisible = false;
    bool showOwnershipDialogLoading = false;
    bool setPriceNFTDialogVisible = false;
    bool loading = false;
    bool copyTextButtonCoppied = false;

    private System.Threading.Timer qrCodeRefreshTimer;
    private int qrCodeRefreshCounter = 30;

    string creatingOwnerQRCodeState = string.Empty;
    string ownershipDialogQRCodeImage = string.Empty;
    string ownershipDialogCode = string.Empty;
    string status = string.Empty;
    bool qrrefreshed = false;
    private ElementReference qrCodeRef;

    protected override Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(_utxo))
            Load();
        return base.OnInitializedAsync();
    }

    private async Task Load()
    {
        loading = true;
        StateHasChanged();
        NFT.TxDataRefreshed -= TxDataRefreshedHandler;
        await NFT.StopRefreshingData();
        NFT = await NFTFactory.GetNFT(NFTHelpers.TokenId, _utxo);

        if (NFT == null)
            return;

        await NFT.StartRefreshingTxData();
        NFT.TxDataRefreshed += TxDataRefreshedHandler;
        loading = false;
        StateHasChanged();
    }

    private void TxDataRefreshedHandler(object sender, GetTransactionInfoResponse info)
    {
        StateHasChanged();
    }

    private async Task ShowSendNFTDialog()
    {
        sendNFTDialogVisible = true;
        StateHasChanged();
    }

    private async Task copyCodeToClipboard(MouseEventArgs e)
    {
        var dto = new OwnershipVerificationCodeDto()
        {
            TxId = NFT.Utxo,
            Signature = ownershipDialogCode
        };
        await JSRuntime.InvokeVoidAsync("jsFunctions.copyToClipboard", JsonConvert.SerializeObject(dto));
        await copyCodeToClipboardButtonTextEfect();
    }

    private async Task copyCodeToClipboardButtonTextEfect()
    {
        copyTextButtonCoppied = true;
        StateHasChanged();
        await Task.Delay(1000);
        copyTextButtonCoppied = false;
        StateHasChanged();
    }

    private async Task RefreshQRCode()
    {
        showOwnershipDialogLoading = true;
        StateHasChanged();
        await Task.Delay(100);
        //var res = await AppData.Account.GetNFTVerifyCode(NFT.Utxo);
        //var res = await OwnershipVerifier.GetCodeInDto(NFT.Utxo, AppData.Account.Secret);
        //ownershipDialogCode = res.Signature;
        var res = await AppData.Account.GetNFTVerifyQRCode(_utxo);
        ownershipDialogCode = res.Item1.Signature;
        //var base64 = Convert.ToBase64String(res.Item2);
        //var imgSrc = String.Format("data:image;base64,{0}", base64);

        // direct request to get qr code image data
        //HttpResponseMessage responsePhoto = await _client.GetAsync(imgSrc);
        //byte[] byteArrayPhoto = await responsePhoto.Content.ReadAsByteArrayAsync();
        //var base64 = Convert.ToBase64String(byteArrayPhoto);
        //imgSrc = String.Format("data:image;base64,{0}", base64);
        /*

        var imgSrc = "https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=" + sdto;

        if (!string.IsNullOrEmpty(imgSrc))
            ownershipDialogQRCodeImage = imgSrc;
        */
        var sdto = JsonConvert.SerializeObject(res.Item1);
        await JSRuntime.InvokeVoidAsync("jsFunctions.getQRCode", new object[] { sdto, qrCodeRef });
        creatingOwnerQRCodeState = "Refreshing Key...";
        showOwnershipDialogLoading = false;
        StateHasChanged();
    }
    private async Task ShowOwnershipQRCode()
    {
        creatingOwnerQRCodeState = "Initializing Verification Module...";
        showOwnershipDialogVisible = true;
        StateHasChanged();
        await Task.Delay(50);
        await RefreshQRCode();

        if (qrCodeRefreshTimer != null)
        {
            qrCodeRefreshTimer.Dispose();
        }

        qrCodeRefreshTimer = new System.Threading.Timer(async (object stateInfo) =>
        {
            try
            {
                var utc = DateTime.UtcNow;
                if ((utc.Second >= 0 && utc.Second < 50) && !qrrefreshed)
                {
                    await RefreshQRCode();
                    qrCodeRefreshCounter = 60 - utc.Second;
                    qrrefreshed = true;
                }
                else if (utc.Second > 50 && utc.Second < 55)
                {
                    qrrefreshed = false;
                    qrCodeRefreshCounter--;
                }
                else
                {
                    qrCodeRefreshCounter--;
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot read tx details. " + ex.Message);
            }
        }, new System.Threading.AutoResetEvent(false), 1000, 1000);
    }

    private async Task showOwnershipDialogCancel(MouseEventArgs e)
    {
        showOwnershipDialogVisible = false;
        StateHasChanged();
    }

    private async Task ShowSetPriceNFTDialog()
    {
        setPriceNFTDialogVisible = true;
        StateHasChanged();
    }

    private async Task ShowUpdatePostNFTDialog()
    {
        createNewPostVisible = true;
        StateHasChanged();
    }

    private async Task createNewPostConfirm(MouseEventArgs e)
    {
        createNewPostVisible = false;
        StateHasChanged();
    }

    private async Task createNewPostCancel(MouseEventArgs e)
    {
        createNewPostVisible = false;
    }

    void NFTSentHandler(string e)
    {
        sendNFTDialogVisible = false;
        StateHasChanged();
    }

    void NFTMinted(string e)
    {
        createNewPostVisible = false;
        StateHasChanged();
    }
}
