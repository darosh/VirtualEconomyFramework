@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.Security
@using Newtonsoft.Json
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReaderService
@inject IJSRuntime JSRuntime
@inject AppData AppData

<div class="card" style="margin-top:10px; min-width:250px; max-width:350px;">
    <div class="card-header" style="padding-top: 5px;padding-bottom: 5px;">
        <h5 class="text-center">NFT Ownership Verifier</h5>
    </div>
    <div class="card-body" style="padding: 5px;padding-left: 20px;padding-right: 20px;padding-bottom: 10px; min-height:620px;">
        <div class="row">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center w-100 h-100">

                <div class="row">
                    <div class="col">
                        <!--
                        <div class="row">
                            <div class="col">
                                <input type="file" ref=inputTypeFileElement accept="image/*" capture/>
                            </div>
                        </div>
                        -->
                        <div class="row">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small class="text-center">
                                This tool can verify ownership of the NFT. It need to run camera (sometimes it turn on front camera instead of back camera).
                                When someone will show you the ownership QR code of NFT you can read it with this verifier and check if he is really owner.
                            </small>
                        </div>
                        </div>
                        <Spin Tip="Processing..." Spinning="@processing">
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <button @onclick=ReadCode>Verify</button>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <div id="CameraStream" @ref=qrCodeRef></div>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <h4>Results</h4>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <h6>Read: @readresult</h6>
                                </div>
                            </div>
                            <!--
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <textarea>message</textarea>
                                </div>
                            </div>
                            -->
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <h6>Result</h6>
                                </div>
                            </div>
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <span>@result</span>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <small>Owner: @ownerAddress</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <small>Sender: @senderAddress</small>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col d-flex justify-content-center align-items-center">
                                    @if (!string.IsNullOrEmpty(NFT.Utxo))
                                    {
                                        <NFT InputNFT="@NFT" OwnNFT="false" />
                                    }
                                </div>
                            </div>
                        </Spin>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    INFT NFT = new ImageNFT("");
    string ownerAddress = string.Empty;
    string senderAddress = string.Empty;
    private ElementReference inputTypeFileElement;
    private ElementReference qrCodeRef;
    private static String result = string.Empty;
    string dtores = string.Empty;
    string readresult = string.Empty;
    string message = string.Empty;
    bool processing = false;

    private string name = "NFTVerifierCameraStream";
    [Parameter]
    public string Name
    {
        get => name;
        set
        {
            if (!string.IsNullOrEmpty(value))
                name = value;
        }
    }

    protected override void OnInitialized()
    {
        result = string.Empty;
        JSRuntime.InvokeVoidAsync("jsFunctions.init", DotNetObjectReference.Create(this));
    }

    public async Task ReadCode()
    {
        await JSRuntime.InvokeVoidAsync("jsFunctions.startScanning", "CameraStream");
    }

    [JSInvokable]
    public void ReturnBarcodeResultsAsync(String text)
    {
        if (dtores != text)
        {
            processing = true;
            dtores = text;
            this.StateHasChanged();
            VerifyFromText(text);
        }

        this.StateHasChanged();
    }

    public async Task VerifyFromText(string text)
    {
        try
        {
            var d = JsonConvert.DeserializeObject<OwnershipVerificationCodeDto>(text);
            if (d != null)
            {
                readresult = "Reading Correct.";
                var dto = await OwnershipVerifier.VerifyOwner(d);

                if (dto.NFT != null && !string.IsNullOrEmpty(dto.NFT.Utxo) && dto.NFT.Utxo != NFT.Utxo)
                    NFT = await NFTFactory.CloneNFT(dto.NFT);

                result = dto.VerifyResult;
                message = dto.Message;
                ownerAddress = dto.Owner;
                senderAddress = dto.Sender;
            }
            else
            {
                readresult = "Reading Wrong.";
                result = "Cannot deserialize data.";
            }
        }
        catch (Exception ex)
        {
            result = text;
        }
        finally
        {
            processing = false;
            dtores = string.Empty;
            this.StateHasChanged();
        }
    }

    public async Task Verify()
    {
        try
        {
            //StateHasChanged();
            foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
            {
                // Read into buffer and act (uses less memory)
                //await using (Stream stream = await file.OpenReadAsync())

                await using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
                {
                    var fileinfo = await file.ReadFileInfoAsync();

                    memoryStream.Seek(0, SeekOrigin.Begin);
                    // drawing doesnt work in blazor webassebmly :(
                    System.Drawing.Image image = null;
                    await Task.Run(() => { image = System.Drawing.Image.FromStream(memoryStream); });

                    var dto = await OwnershipVerifier.VerifyFromImage(image);

                    var nft = await NFTFactory.GetNFT(NFTHelpers.TokenId, dto.TxId);
                    if (nft != null)
                        NFT = await NFTFactory.CloneNFT(nft);

                    result = dto.VerifyResult;
                    ownerAddress = dto.Owner;
                    senderAddress = dto.Sender;

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            result = ex.Message;
            StateHasChanged();
        }
    }


}
