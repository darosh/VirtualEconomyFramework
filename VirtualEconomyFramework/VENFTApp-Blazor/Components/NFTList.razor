@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData

<div class="container-fluid overflow-auto">
    <div class="row">
        <div class="col">

            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-end justify-content-xl-end align-items-xl-end">
                    <button class="btn btn-light" @onclick="ReloadNFTs"><i class="oi oi-reload"></i></button>
                </div>
            </div>

            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    @if (_nfts.Count == 0)
                    {
                        <p><em><Spin Tip="Loading...No NFTs found yet" Style="min-width:100px;"></Spin></em></p>
                    }
                    else
                    {
                        <div class="card-group">
                            @foreach (var nft in _nfts)
                            {
                                if (nft.Type != NFTTypes.Profile && nft.Type != NFTTypes.Payment && nft.TypeText != "NFT Settings")
                                {
                                    <NFT Address="@_address" InputNFT="@nft" NFTSent="@NFTSentHandler" OwnNFT="@MainAccount" />
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    private List<INFT> _nfts = new List<INFT>();
    [Parameter]
    public List<INFT> NFTs {
        get => _nfts;
        set
        {
            if (value != null)
            {
                _nfts = value;
            }
        }
    }

    [Parameter]
    public EventCallback<List<INFT>> NFTsChanged { get; set; }

    private string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                if (_address != value)
                {
                    if (!MainAccount)
                    {
                        _nfts = new List<INFT>();
                        _address = value;
                        LoadNFTs();
                    }
                    else
                    {
                        _nfts = new List<INFT>();
                        _address = value;
                        _nfts = AppData.Account.NFTs;

                    }
                }
            }
        }
    }

    [Parameter]
    public bool MainAccount { get; set; } = false;

    bool nftDetailsVisible = false;

    string lastAddress = string.Empty;

    int refresh = 10;

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
            AppData.Account.Refreshed += RefreshedHandler;
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        if (MainAccount)
        {
            if (_nfts.Count != AppData.Account.NFTs.Count || refresh < 0)
            {
                _nfts = AppData.Account.NFTs;
                refresh = 10;
            }
            else
            {
                refresh--;
            }
        }

        StateHasChanged();
    }

    private async Task ReloadNFTs()
    {
        if (!string.IsNullOrEmpty(_address))
        {
            if (!MainAccount)
            {
                var tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == _address);
                if (tab != null)
                    await tab.Reload();

                _nfts = tab.NFTs;
            }
            else
            {
                await AppData.Account.ReLoadNFTs();
                _nfts = AppData.Account.NFTs;
            }

            lastAddress = _address;
            await Task.Delay(50);
            StateHasChanged();
        }
    }

    private async Task LoadNFTs()
    {
        if (!string.IsNullOrEmpty(_address))
        {
            if (!MainAccount)
            {
                var tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == _address);
                if (tab != null)
                    if (tab.NFTs.Count == 0)
                        await tab.Reload();
                _nfts = tab.NFTs;

                lastAddress = _address;
                await Task.Delay(50);
                StateHasChanged();
            }
        }
    }

    void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
        ReloadNFTs();
    }
}
