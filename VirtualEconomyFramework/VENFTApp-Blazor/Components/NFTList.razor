@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData

<div class="container-fluid overflow-auto">
    <div class="row">
        <div class="col">
            <div class="row d-flex justify-content-end align-items-end" style="margin-top:10px;">
                <div class="col d-flex justify-content-end align-items-end">
                    <button class="btn btn-light" @onclick="ReloadNFTs"><i class="oi oi-reload"></i></button>
                    @if (MainAccount)
                    {
                        @if (NFTsSelectedForAction.Count == 0)
                        {
                            <button class="btn btn-light" @onclick="AllowCheckField" style="margin-left:20px;"><i class="oi oi-pencil"></i></button>
                        }
                        else
                        {
                            <button class="btn btn-light" @onclick="AllowCheckField" style="margin-left:20px;"><i class="oi oi-pencil"></i><span class="badge badge-info" style="margin-left:5px;">@NFTsSelectedForAction.Count</span></button>
                        }
                        <button class="btn btn-light" @onclick="DestroSelectedNFTs" style="margin-left:20px;"><i class="oi oi-trash"></i></button>
                    }
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayVENFTChanged(eventArgs.Value); }" /><span style="margin-left:10px;">VENFT</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayCoruzantChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Coruzant</span><br />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayImagesChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Images</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayPostsChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Posts</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayMusicChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Music</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayTicketsChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Tickets</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayEventsChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Events</span><br />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    @if (NFTsList.Count == 0)
                    {
                        <p><em><Spin Tip="Loading...No NFTs found yet" Style="min-width:100px;"></Spin></em></p>
                    }
                    else
                    {
                        <div class="card-group">
                            @foreach (var nft in NFTsList)
                            {
                                if (displayCoruzant && (nft.Type == NFTTypes.CoruzantProfile || nft.Type == NFTTypes.CoruzantArticle || nft.Type == NFTTypes.CoruzantPodcast))
                                {
                                    <CoruzantNFT Address="@_address" 
                                                 InputNFT="@nft" 
                                                 NFTSent="@NFTSentHandler" 
                                                 OwnNFT="@MainAccount" 
                                                 DisplayCheckField="@allowNFTCheckField" 
                                                 NFTCheckedChanged="@NFTCheckChangedHandler" />
                                }
                                else if (nft.Type != NFTTypes.Profile && nft.Type != NFTTypes.Payment && nft.TypeText != "NFT Settings" && nft.Type != NFTTypes.Message)
                                {
                                    if ((displayImages && nft.Type == NFTTypes.Image) ||
                                        (displayPosts && nft.Type == NFTTypes.Post) ||
                                        (displayMusic && nft.Type == NFTTypes.Music) ||
                                        (displayEvents && nft.Type == NFTTypes.Event) ||
                                        (displayTickets && nft.Type == NFTTypes.Ticket))
                                    {
                                        if ((displayVENFT && nft.TokenId == NFTHelpers.TokenId) ||
                                            (!displayVENFT && nft.TokenId != NFTHelpers.TokenId))
                                        {
                                            <NFT Address="@_address" InputNFT="@nft"
                                                 NFTSent="@NFTSentHandler"
                                                 OwnNFT="@MainAccount"
                                                 DisplayCheckField="@allowNFTCheckField"
                                                 NFTCheckedChanged="@NFTCheckChangedHandler" />
                                        }
                                    }
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<Modal Title="Destroy NFTs"
       Style="min-height:200px; min-width:200px;"
       Visible="@destroyNFTsVisible"
       OnOk="@destroyNFTsConfirm"
       OnCancel="@destroyNFTsCancel">
    <Spin Spinning="@destroyingNFTs" Tip="Destroying NFTs...">
        <div class="row">
            <div class="col d-flex justify-content-center align-items-center">
                <span>Do you really want to destroy selected NFTs? All will be returned back to you address as source tokens.</span>
            </div>
        </div>
    </Spin>
</Modal>

@code {

    private List<INFT> _nfts = new List<INFT>();
    [Parameter]
    public List<INFT> NFTs {
        get => _nfts;
        set
        {
            if (value != null)
                _nfts = value;
        }
    }

    public List<INFT> NFTsList
    {
        get
        {
            if (MainAccount)
            {
                return AppData.Account.NFTs;
            }
            else if (SubAccount)
            {
                var nfts = AppData.Account.GetNFTsOnSubAccount(Address).GetAwaiter().GetResult();
                if (nfts.Item1)
                    return nfts.Item2.ToList();
            }
            else if (InBrowser)
            {
                var tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == _address);
                if (tab != null && tab.NFTs != null)
                    return tab.NFTs;
                 
            }

            return new List<INFT>();
        }
    }

    [Parameter]
    public EventCallback<List<INFT>> NFTsChanged { get; set; }

    private string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value) && _address != value)
            {
                _address = value;
                LoadNFTs();
            }
        }
    }

    [Parameter]
    public bool MainAccount { get; set; } = false;

    [Parameter]
    public bool InBrowser { get; set; } = false;

    [Parameter]
    public bool SubAccount { get; set; } = false;


    bool nftDetailsVisible = false;
    bool displayImages = true;
    bool displayPosts = true;
    bool displayMusic = true;
    bool displayTickets = true;
    bool displayEvents = true;
    bool displayVENFT = true;
    bool displayCoruzant = true;
    bool displayYouTube = false;
    bool displaySpotify = false;
    bool allowNFTCheckField = false;
    bool destroyNFTsVisible = false;
    bool destroyingNFTs = false;

    string lastAddress = string.Empty;

    int refresh = 5;

    private List<INFT> NFTsSelectedForAction = new List<INFT>();

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
        {
            AppData.Account.Refreshed -= RefreshedHandler;
            AppData.Account.Refreshed += RefreshedHandler;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        
        if (MainAccount)
        {
            var nf = _nfts.FirstOrDefault();
            var anf = AppData.Account.NFTs.FirstOrDefault();
            if (anf != null)
            {
                if (nf == null)
                {
                    Task.Delay(500).Wait();
                    _nfts.Clear();
                    StateHasChanged();
                    _nfts = AppData.Account.NFTs;
                }
                else if (nf != null && (nf.Time != anf.Time))
                {
                    Task.Delay(500).Wait();
                    _nfts.Clear();
                    StateHasChanged();
                    _nfts = AppData.Account.NFTs;
                }
                else if (_nfts.Count != AppData.Account.NFTs.Count)
                {
                    Task.Delay(500).Wait();
                    _nfts.Clear();
                    StateHasChanged();
                    _nfts = AppData.Account.NFTs;
                }
            }
        }
        StateHasChanged();
    }

    private async Task AllowCheckField(MouseEventArgs e)
    {
        allowNFTCheckField = !allowNFTCheckField;
        NFTsSelectedForAction.Clear();
        StateHasChanged();
    }

    private async Task NFTCheckChangedHandler((INFT,bool) e)
    {
        if (NFTsSelectedForAction.Count > 10 && e.Item2)
            return; // todo alert messagebox

        if (e.Item2 && !NFTsSelectedForAction.Contains(e.Item1))
            NFTsSelectedForAction.Add(e.Item1);
        else
        {
            if (NFTsSelectedForAction.Contains(e.Item1))
                NFTsSelectedForAction.Remove(e.Item1);
        }
        StateHasChanged();
    }

    private async Task DestroSelectedNFTs(MouseEventArgs e)
    {
        destroyNFTsVisible = true;
    }

    private async Task destroyNFTsConfirm(MouseEventArgs e)
    {
        destroyingNFTs = true;
        StateHasChanged();
        if (NFTsSelectedForAction.Count > 0)
        {
            var res = await AppData.Account.DestroyNFTs(NFTsSelectedForAction);
            if (res.Item1)
                NFTsSelectedForAction.Clear();
        }
        _nfts.Clear();
        StateHasChanged();
        await LoadNFTs();
        allowNFTCheckField = false;
        destroyingNFTs = false;
        destroyNFTsVisible = false;
        StateHasChanged();
    }
    private async Task destroyNFTsCancel(MouseEventArgs e)
    {
        destroyNFTsVisible = false;
    }

    private async Task ReloadNFTs()
    {
        if (!string.IsNullOrEmpty(_address))
        {
            if (!MainAccount)
            {
                if (InBrowser)
                {
                    var tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == _address);
                    if (tab != null)
                    {
                        _nfts.Clear();
                        StateHasChanged();
                        await tab.Reload();
                        if (tab.NFTs != null)
                            _nfts = tab.NFTs;
                    }
                }
                else if (SubAccount && !string.IsNullOrEmpty(Address))
                {
                    var nfts = await AppData.Account.GetNFTsOnSubAccount(Address);
                    if (nfts.Item1)
                    {
                        _nfts.Clear();
                        StateHasChanged();
                        _nfts = nfts.Item2.ToList();
                    }
                }
            }
            else
            {
                _nfts.Clear();
                StateHasChanged();
                //await AppData.Account.ReLoadNFTs();
                _nfts = AppData.Account.NFTs;
            }

            lastAddress = _address;
            await Task.Delay(50);
            StateHasChanged();
        }
    }

    private async Task LoadNFTs()
    {
        if (!string.IsNullOrEmpty(_address))
        {
            _nfts.Clear();
            StateHasChanged();
            if (!MainAccount && InBrowser)
            {
                var tab = AppData.Account.Tabs.FirstOrDefault(t => t.Address == _address);
                if (tab != null)
                    if (tab.NFTs.Count == 0)
                        await tab.Reload();
                if (tab.NFTs != null)
                    _nfts = tab.NFTs;

                lastAddress = _address;

            }
            else if (SubAccount && !string.IsNullOrEmpty(Address))
            {
                var nfts = await AppData.Account.GetNFTsOnSubAccount(Address);
                if (nfts.Item1)
                    _nfts = nfts.Item2.ToList();
            }
            else if (MainAccount)
            {
                await Task.Delay(500); // wait before close all nft details windows.
                _nfts.Clear();
                StateHasChanged();
                _nfts = AppData.Account.NFTs;
            }

            await Task.Delay(50);
            StateHasChanged();
        }
    }

    void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
        LoadNFTs();
        StateHasChanged();
    }

    private async Task displayImagesChanged(object e)
    {
        displayImages = (bool)e;
        StateHasChanged();
    }
    private async Task displayMusicChanged(object e)
    {
        displayMusic = (bool)e;
        StateHasChanged();
    }
    private async Task displayPostsChanged(object e)
    {
        displayPosts = (bool)e;
        StateHasChanged();
    }
    private async Task displayTicketsChanged(object e)
    {
        displayTickets = (bool)e;
        StateHasChanged();
    }
    private async Task displayEventsChanged(object e)
    {
        displayEvents = (bool)e;
        StateHasChanged();
    }
    private async Task displayVENFTChanged(object e)
    {
        displayVENFT = (bool)e;
        StateHasChanged();
    }
    private async Task displayCoruzantChanged(object e)
    {
        displayCoruzant = (bool)e;
        StateHasChanged();
    }

}
