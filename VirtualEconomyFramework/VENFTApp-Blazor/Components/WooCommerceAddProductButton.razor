@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.WooCommerce
@using VEDriversLite.WooCommerce.Dto
@using Newtonsoft.Json
@inject AppData AppData
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

@if (WooCommerceHelpers.IsInitialized && loadedNFT != null && !string.IsNullOrEmpty(loadedNFT.Utxo))
{
    <button class="btn btn-primary" @onclick="async () => ShowConfirm()" style="width:65px; height:65px; margin-left:20px;">
        <div class="row">
            <div class="col">
                <div class="row d-flex justify-content-center align-items-center">
                    <div class="col">
                        <i class="oi oi-cloud-upload"></i>
                    </div>
                </div>
                <div class="row d-flex justify-content-center align-items-center">
                    <div class="col">
                        <span style="font-size: 12px;">WooCom</span>
                    </div>
                </div>
            </div>
        </div>
    </button>
}

<Modal Title="Woo Commerce Product"
        Visible="@showWooComProductVisible"
        OnOk="@showWooComProductCancel"
        OnCancel="@showWooComProductCancel">
    <WooCommerceProduct NFT="@loadedNFT" InputProduct="@product" />
</Modal>

<Modal Title="Product Without price"
       Visible="@withoutPriceVisible"
       OnOk="@withoutPriceConfirm"
       OnCancel="@withoutPriceCancel">
    <Spin spinning="@processingSending" tip="Sending...">
        <p>This product does not have setted the price. Do you want to continue?</p>
    </Spin>
</Modal>

<Modal Title="Add product to WooCommerce Shop"
       Visible="@confirmVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <Spin spinning="@processingSending" tip="Sending...">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="col">
                <span style="font-size: 12px;">Do you really want to upload this product to your store?</span>
            </div>
        </div>
        <div class="row d-flex justify-content-center align-items-center" style="margin-top:20px;">
            <div class="col">
                <span>Selected Store API</span>
            </div>
        </div>
        <div class="row d-flex justify-content-center align-items-center" style="margin-top:5px;">
            <div class="col">
                <small>@VEDLDataContext.WooCommerceStoreUrl</small>
            </div>
        </div>

        <div class="row d-flex justify-content-center align-items-center" style="margin-top:20px;">
            <div class="col">
                <span>Do you want to put it to store as original on with multiple supply?</span>
            </div>
        </div>
        <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px;">
            <div class="col">
                <RadioGroup @bind-Value="@productUploadNFTType">
                    <Radio Value="ProductUploadNFTType.Unique">Unique</Radio>
                    <Radio Value="ProductUploadNFTType.Multiple">Multiple Supply </Radio>
                </RadioGroup>
            </div>
        </div>
        @if (productUploadNFTType == ProductUploadNFTType.Multiple)
        {
            <div class="row d-flex justify-content-center align-items-center" style="margin-top:20px;">
                <div class="col">
                    <span>Please specify name of the group product name.</span>
                </div>
            </div>
            <div class="row" style="margin-top:5px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <Input MaxLength="50" Placeholder="Type name of the category" @bind-Value=@category @onfocusout="categoryChanged" Style="font-size:12px; min-width:250px; max-width:300px;" />
                </div>
            </div>
            @if (!string.IsNullOrEmpty(category) && validCategoryName)
            {
                <div class="row d-flex justify-content-center align-items-center" style="margin-top:3px;">
                    <div class="col">
                        <small class="text-success">This is valid name.</small>
                    </div>
                </div>
            }
            else if (!string.IsNullOrEmpty(category) && !validCategoryName)
            {
                <div class="row d-flex justify-content-center align-items-center" style="margin-top:3px;">
                    <div class="col">
                        <small class="text-danger">This name is already exists.</small>
                    </div>
                </div>
            }

            <div class="row d-flex justify-content-center align-items-center" style="margin-top:20px;">
                <div class="col">
                    <span>Please specify quantity (max 100).</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <input type="number" step="1" min="1" max="100" @bind="@maxsupply" />
                </div>
            </div>
        }
    </Spin>
</Modal>

<Modal Title="NFT Details"
        Visible="@showNFTDetailsVisible"
        OnOk="@showNFTDetailsCancel"
        OnCancel="@showNFTDetailsCancel">
    <div class="row" style="margin-top:10px;">
        <div class="col d-flex justify-content-center align-items-center">
            @if (loadedNFT != null)
            {
                @if (loadedNFT.Type == NFTTypes.CoruzantArticle || loadedNFT.Type == NFTTypes.CoruzantProfile)
                {
                    <CoruzantNFT InputNFT="@loadedNFT"
                                    OwnNFT="@true"
                                    Address="@AppData.Account.Address"
                                    SubAccount="@false" />
                }
                else
                {
                    <NFT InputNFT="@loadedNFT"
                            OwnNFT="@true"
                            Address="@AppData.Account.Address"
                            SubAccount="@false" />
                }
            }
        </div>
    </div>
</Modal>

@code {

    private enum ProductUploadNFTType
    {
        Unique,
        Multiple
    }
    ProductUploadNFTType productUploadNFTType = ProductUploadNFTType.Unique;
    [Parameter]
    public EventCallback<string> WooCommerceAPIConnected { get; set; }

    private string apiurl = string.Empty;
    private string apikey = string.Empty;
    private string apisecret = string.Empty;
    private string txid = string.Empty;
    private string productId = string.Empty;
    private string category = string.Empty;
    private int maxsupply = 1;

    Product product = new Product();

    bool confirmVisible = false;
    bool processingSending = false;
    bool initialized = false;
    bool showNFTDetailsVisible = false;
    bool showWooComProductVisible = false;
    bool withoutPriceVisible = false;
    bool validCategoryName = false;

    INFT loadedNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => loadedNFT;
        set
        {
            loadedNFT = value;
            category = loadedNFT.Name + "-" + loadedNFT.ShortHash;
            CheckCategory();
        }
    }

    protected override Task OnInitializedAsync()
    {
        init();
        return base.OnInitializedAsync();
    }

    private async Task init()
    {
        if (!WooCommerceHelpers.IsInitialized)
        {
            apiurl = await localStorage.GetItemAsync<string>("woocom-apiurl");
            if (apiurl == null) apiurl = string.Empty;
            apikey = await localStorage.GetItemAsync<string>("woocom-apikey");
            if (apikey == null) apikey = string.Empty;
            apisecret = await localStorage.GetItemAsync<string>("woocom-apisecret");
            if (apisecret == null) apisecret = string.Empty;
            await WooCommerceHelpers.InitStoreApiConnection(apiurl, apikey, apisecret);
        }
        StateHasChanged();
    }

    void ShowConfirm()
    {
        confirmVisible = true;
    }

    private void categoryChanged(FocusEventArgs e)
    {
        CheckCategory();
    }

    private async Task CheckCategory()
    {
        if (await WooCommerceHelpers.Shop.CheckIfCategoryExists(category))
            validCategoryName = true;
        else
            validCategoryName = false;
        StateHasChanged();
    }

    private async Task showWooComProductCancel(MouseEventArgs e)
    {
        showWooComProductVisible = false;
    }

    private async Task withoutPriceConfirm(MouseEventArgs e)
    {
        await AddProduct();
    }
    private async Task withoutPriceCancel(MouseEventArgs e)
    {
        withoutPriceVisible = false;
        confirmVisible = false;
    }
    private async Task HandleOk(MouseEventArgs e)
    {
        if (!loadedNFT.PriceActive && !loadedNFT.DogePriceActive)
            withoutPriceVisible = true;
        else
            await AddProduct();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task showNFTDetails(MouseEventArgs e)
    {
        showNFTDetailsVisible = true;
    }
    private async Task showNFTDetailsCancel(MouseEventArgs e)
    {
        showNFTDetailsVisible = false;
    }

    private async Task AddProduct()
    {
        try
        {
            if (loadedNFT == null)
                return;

            processingSending = true;
            StateHasChanged();
            Product prd = null;

            if (productUploadNFTType == ProductUploadNFTType.Unique)
            {
                prd = await WooCommerceHelpers.Shop.AddProduct(loadedNFT);
            }
            else
            {
                var options = new Dictionary<string, string>();
                options.Add("Category", category);
                prd = await WooCommerceHelpers.Shop.AddProduct(loadedNFT, maxsupply, options);
            }

            if (prd == null)
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during try to connect.");
            else
            {
                product = prd;
                StateHasChanged();
                showWooComProductVisible = true;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingSending = false;
            confirmVisible = false;
            StateHasChanged();
        }
    }
}
