@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.WooCommerce
@using VEDriversLite.WooCommerce.Dto
@using Newtonsoft.Json
@inject AppData AppData
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <Spin spinning="@processingSending" tip="Sending...">
            <div class="row">
                <div class="col">
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>API Url</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <Input Placeholder="Add your eshop url" MaxLength="200" @bind-Value=@apiurl Style="font-size:12px; min-width:250px; max-width:250px;" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>API Key</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <Input Placeholder="Add your API Key" MaxLength="200" @bind-Value=@apikey Style="font-size:12px; min-width:250px; max-width:250px;" />
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>API Secret</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <Input Placeholder="Add your API Key" MaxLength="200" @bind-Value=@apisecret Style="font-size:12px; min-width:250px; max-width:250px;" />
                        </div>
                    </div>



                    @if (string.IsNullOrEmpty(apiurl))
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="ShowConfirm">Fill API Url</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary" @onclick="ShowConfirm">Init connection</button>
                            </div>
                        </div>

                        @if (initialized)
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>NFT TxId</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:5px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <Input Placeholder="Add your NFT txid" MaxLength="200" @onfocusout="eventIdFilled" @bind-Value=@txid Style="font-size:12px; min-width:250px; max-width:250px;" />
                                </div>
                            </div>
                            @if (loadedNFT != null)
                            {
                                @if (!string.IsNullOrEmpty(loadedNFT.Utxo))
                                {
                                    <div class="row" style="margin-top:10px;">
                                        <div class="col d-flex justify-content-center align-items-center">
                                            <button class="btn btn-primary" @onclick="showNFTDetails">Show NFT Details</button>
                                        </div>
                                    </div>
                                }
                            }
                            <div class="row" style="margin-top:20px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <button class="btn btn-primary" @onclick="AddProduct">Add Products</button>
                                </div>
                            </div>

                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>Get Product</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:5px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <Input Placeholder="Fill product Id" MaxLength="200" @bind-Value=@productId Style="font-size:12px; min-width:250px; max-width:250px;" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:30px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <button class="btn btn-primary" @onclick="GetProduct">Get Product</button>
                                </div>
                            </div>
                            @if (product != null && !string.IsNullOrEmpty(product.name))
                            {
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <small>Product Data</small>
                                    </div>
                                </div>
                                <div class="row" style="margin-top:10px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <textarea style="min-width:200px; min-height:100px;">@JsonConvert.SerializeObject(product, Formatting.Indented)</textarea>
                                    </div>
                                </div>
                            }
                        }

                    }

                    @if (initialized && products != null && products.Count > 0)
                    {
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                Products
                            </div>
                        </div>
                        @foreach (var p in products)
                        {
                            <div class="row" style="margin-top:5px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    @p.name
                                </div>
                            </div>
                            if (p.images.Count > 0)
                            {
                                <div class="row" style="margin-top:5px;">
                                    <div class="col d-flex justify-content-center align-items-center">
                                        <img src="@p.images[0].src" style="max-width:100px;" />
                                    </div>
                                </div>
                            }
                            <hr />
                        }
                    }
                </div>
            </div>
        </Spin>

        <Modal Title="Mint New NFT"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <p>Do you really want to use this url and credentials?</p>
        </Modal>

        <Modal Title="Required"
               Visible="@emptyInfoVisible"
               OnOk="@HandleEmptyInfoCancel"
               OnCancel="@HandleEmptyInfoCancel">
            <p>You must fill API URL, Key and Secret.</p>
        </Modal>

        <Modal Title="NFT Details"
               Visible="@showNFTDetailsVisible"
               OnOk="@showNFTDetailsCancel"
               OnCancel="@showNFTDetailsCancel">
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    @if (loadedNFT != null)
                    {
                        @if (loadedNFT.Type == NFTTypes.CoruzantArticle || loadedNFT.Type == NFTTypes.CoruzantProfile)
                        {
                            <CoruzantNFT InputNFT="@loadedNFT"
                                         OwnNFT="@true"
                                         Address="@AppData.Account.Address"
                                         SubAccount="@false" />
                        }
                        else
                        {
                            <NFT InputNFT="@loadedNFT"
                                 OwnNFT="@true"
                                 Address="@AppData.Account.Address"
                                 SubAccount="@false" />
                        }
                    }
                </div>
            </div>
        </Modal>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<string> WooCommerceAPIConnected { get; set; }

    private string apiurl = string.Empty;
    private string apikey = string.Empty;
    private string apisecret = string.Empty;
    private string txid = string.Empty;
    private string productId = string.Empty;

    List<Product> products = new List<Product>();
    Product product = new Product();

    bool emptyInfoVisible = false;
    bool confirmVisible = false;
    bool processingSending = false;
    bool initialized = false;
    bool showNFTDetailsVisible = false;

    INFT loadedNFT = new ImageNFT("");

    protected override Task OnInitializedAsync()
    {
        init();
        return base.OnInitializedAsync();
    }

    private async Task init()
    {
        apiurl = await localStorage.GetItemAsync<string>("woocom-apiurl");
        if (apiurl == null) apiurl = string.Empty;
        apikey = await localStorage.GetItemAsync<string>("woocom-apikey");
        if (apikey == null) apikey = string.Empty;
        apisecret = await localStorage.GetItemAsync<string>("woocom-apisecret");
        if (apisecret == null) apisecret = string.Empty;
        await InitConnection();
        StateHasChanged();
    }

    private void eventIdFilled(EventArgs e)
    {
        LoadNFT();
    }
    private async Task LoadNFT()
    {
        loadedNFT = null;
        loadedNFT = await NFTFactory.GetNFT("", txid, 0, 0, true);
        if (loadedNFT != null)
        {
            await showNFTDetails(null);
        }
        StateHasChanged();
    }

    void ShowConfirm()
    {
        confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await InitConnection();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private void HandleEmptyInfoCancel(MouseEventArgs e)
    {
        emptyInfoVisible = false;
    }
    private async Task showNFTDetails(MouseEventArgs e)
    {
        showNFTDetailsVisible = true;
    }
    private async Task showNFTDetailsCancel(MouseEventArgs e)
    {
        showNFTDetailsVisible = false;
    }

    private async Task InitConnection()
    {
        try
        {
            if (string.IsNullOrEmpty(apiurl) || string.IsNullOrEmpty(apikey) || string.IsNullOrEmpty(apisecret))
            {
                emptyInfoVisible = true;
                return;
            }

            processingSending = true;
            confirmVisible = false;
            StateHasChanged();

            if (await WooCommerceHelpers.InitStoreApiConnection(apiurl, apikey, apisecret))
            {
                initialized = true;
                await localStorage.SetItemAsync("woocom-apiurl", apiurl);
                await localStorage.SetItemAsync("woocom-apikey", apikey);
                await localStorage.SetItemAsync("woocom-apisecret", apisecret);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during try to connect.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingSending = false;
            StateHasChanged();
        }
    }

    private async Task GetProduct()
    {
        try
        {
            if (string.IsNullOrEmpty(apiurl) || string.IsNullOrEmpty(apikey) || string.IsNullOrEmpty(apisecret))
            {
                emptyInfoVisible = true;
                return;
            }

            processingSending = true;
            confirmVisible = false;
            StateHasChanged();

            var prd = await WooCommerceHelpers.GetProduct(productId);

            if (prd == null)
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during try to connect.");
            else
                product = prd;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingSending = false;
            StateHasChanged();
        }
    }

    private async Task AddProduct()
    {
        try
        {
            if (string.IsNullOrEmpty(apiurl) || string.IsNullOrEmpty(apikey) || string.IsNullOrEmpty(apisecret) || string.IsNullOrEmpty(txid))
            {
                emptyInfoVisible = true;
                return;
            }

            var nft = await NFTFactory.GetNFT("", txid, 0, 0, true);
            if (nft == null)
                return;

            processingSending = true;
            confirmVisible = false;
            StateHasChanged();

            var prd = await WooCommerceHelpers.AddNewProduct(nft);

            if (prd == null)
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during try to connect.");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingSending = false;
            StateHasChanged();
        }
    }
}
