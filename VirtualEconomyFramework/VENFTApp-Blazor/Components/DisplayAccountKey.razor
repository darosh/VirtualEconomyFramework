@inject AppData AppData
 
<div class="row" style="margin-top:10px;">
    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
        <span>If your account is unlocked now you can display not encrypted private key. If account is locked the key is encrypted with your password.</span>
    </div>
</div>
<div class="row" style="margin-top:10px;">
    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
        <button class="btn btn-primary" @onclick="downloadAccountKey">Show Private Key</button>
    </div>
</div>

<Modal Title="Your Private Key"
       Visible="@privateKeyDialogVisible"
       OnOk="@privateKeyDialogClose"
       OnCancel="@privateKeyDialogClose">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Your Private Key</span>
                </div>
            </div>
            <div class="row d-flex justify-content-center align-items-center text-wrap">
                <div class="col">
                    <h6 class="text-center text-wrap">@accountKey</h6>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <VENFTApp_Blazor.Components.CopyIcon TextToCopy="@accountKey" />
                    @try
                    {
                    <VENFTApp_Blazor.Components.QRIcon MarginLeft="10" TextToCopy="@accountKey" Close="@closeQRModal" />
                    }
                    catch (Exception ex)
                    {
                        //todo
                    }
                </div>
            </div>
        </div>
    </div>
</Modal>

@code {

    private bool closeQRModal = false;
    private bool privateKeyDialogVisible = false;
    private System.Threading.Timer hideTimer;
    private string accountKey = string.Empty;

    private async Task downloadAccountKey()
    {
        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            closeQRModal = false;
            StateHasChanged();
            if (AppData.Account.IsLocked())
            {
                accountKey = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
                privateKeyDialogVisible = true;
            }
            else
            {
                try
                {
                    accountKey = await AppData.Account.AccountKey.GetEncryptedKey();
                    privateKeyDialogVisible = true;
                }
                catch (Exception ex)
                {
                    accountKey = "Exception during display key. " + ex.Message;
                }
            }

            hideTimer = new System.Threading.Timer(async (object stateInfo) =>
            {
                accountKey = string.Empty;
                privateKeyDialogVisible = false;
                StateHasChanged();
                hideTimer.Dispose();
            }, new System.Threading.AutoResetEvent(false), 10000, 10000);
        }
    }

    private async Task privateKeyDialogClose(MouseEventArgs e)
    {
        closeQRModal = true;
        StateHasChanged();
        await Task.Delay(50);
        accountKey = string.Empty;
        privateKeyDialogVisible = false;
    }

}
