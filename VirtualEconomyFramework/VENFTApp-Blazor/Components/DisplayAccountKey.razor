@using Newtonsoft.Json
@inject AppData AppData

<div class="row" style="margin-top:10px;">
    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
        <span>If your account is unlocked now you can display not encrypted private key. If account is locked the key is encrypted with your password.</span>
    </div>
</div>
<div class="row" style="margin-top:10px;">
    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
        <button class="btn btn-primary" @onclick="downloadAccountKey">Show Private Key</button>
    </div>
</div>

<Modal Title="Your Private Key"
       Visible="@privateKeyDialogVisible"
       OnOk="@privateKeyDialogClose"
       OnCancel="@privateKeyDialogClose">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Your Private Key</span>
                </div>
            </div>
            <div class="row d-flex justify-content-center align-items-center text-wrap">
                <div class="col">
                    <h6 class="text-center text-wrap">@accountKey</h6>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <VENFTApp_Blazor.Components.CopyIcon TextToCopy="@accountKey" />
                    @try
                    { 
                    <VENFTApp_Blazor.Components.QRIcon MarginLeft="10" TextToCopy="accountKey" Close="closeQRModal" />
                    }
                    catch (Exception ex)
                    {
                        //todo
                    }
                    <VENFTApp_Blazor.Components.SaveTextAsFile MarginLeft="10" TextToSave="@keyToSave" FileName="@filename" />
                </div>
            </div>
        </div>
    </div>
</Modal>

@code {

    private bool closeQRModal = false;
    private bool privateKeyDialogVisible = false;
    private System.Threading.Timer hideTimer;
    private string accountKey = string.Empty;
    private string ekey = string.Empty;
    private string keyToSave = string.Empty;
    private string filename = string.Empty;

    [Parameter]
    public bool DogeAccountKey { get; set; } = false;

    private async Task downloadAccountKey()
    {
        if (string.IsNullOrEmpty(AppData.Account.Address))
            return;

        var addr = string.Empty;
        var ekey = string.Empty;

        if (!DogeAccountKey)
        {
            addr = AppData.Account.Address;
            ekey = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
            if (AppData.Account.IsLocked())
            {
                accountKey = ekey;
                privateKeyDialogVisible = true;
            }
            else
            {
                try
                {
                    accountKey = await AppData.Account.AccountKey.GetEncryptedKey();
                    privateKeyDialogVisible = true;
                }
                catch (Exception ex)
                {
                    accountKey = "Exception during display key. " + ex.Message;
                }
            }
        }
        else
        {
            addr = AppData.DogeAccount.Address;
            ekey = await AppData.DogeAccount.AccountKey.GetEncryptedKey(returnEncrypted: true);
            if (AppData.DogeAccount.IsLocked())
            {
                accountKey = ekey;
                privateKeyDialogVisible = true;
            }
            else
            {
                try
                {
                    accountKey = await AppData.DogeAccount.AccountKey.GetEncryptedKey();
                    privateKeyDialogVisible = true;
                }
                catch (Exception ex)
                {
                    accountKey = "Exception during display key. " + ex.Message;
                }
            }
        }

        closeQRModal = false;
        StateHasChanged();

        //keyToSave = "{ Address:\"" + AppData.Account.Address + "\", EncryptedKey:\"" + ekey + "\", DecryptedKey:\"" + accountKey + "\" }";
        keyToSave = "{ \"Address\":\"" + addr + "\", \"EncryptedKey\":\"" + ekey + "\" }";
        if (!DogeAccountKey && AppData.Account.SubAccounts.Count > 0)
        {
            var saccnts = await AppData.Account.SerializeSubAccounts();
            keyToSave = "{ \"Address\":\"" + addr + "\", \"EncryptedKey\":\"" + ekey + "\", \"SubAccounts\": " + saccnts + " }";
        }
        if (!DogeAccountKey)
            filename = "Key-Export-" + addr + ".txt";
        else
            filename = "Doge-Key-Export-" + addr + ".txt";

        hideTimer = new System.Threading.Timer(async (object stateInfo) =>
        {
            accountKey = string.Empty;
            privateKeyDialogVisible = false;
            StateHasChanged();
            hideTimer.Dispose();
        }, new System.Threading.AutoResetEvent(false), 10000, 10000);
    }

    private async Task privateKeyDialogClose(MouseEventArgs e)
    {
        accountKey = string.Empty;
        closeQRModal = true;
        StateHasChanged();
        await Task.Delay(100);
        privateKeyDialogVisible = false;
    }

}
