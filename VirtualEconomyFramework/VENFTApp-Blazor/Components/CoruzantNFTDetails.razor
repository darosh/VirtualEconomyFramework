@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@using VEDriversLite.NeblioAPI
@using Newtonsoft.Json
@inject AppData AppData
@inject HttpClient _client
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <Spin Tip="Loading..." Spinning="@loading">
            @if (NFT.Type == NFTTypes.CoruzantProfile && !string.IsNullOrEmpty(NFT.ImageLink))
            {
                var pnft = NFT as CoruzantProfileNFT;
                @if (!string.IsNullOrEmpty(NFT.ImageLink))
                {
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <img src="@NFT.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                        </div>
                    </div>
                }
                else
                {
                    <Spin Tip="Loading..." Spinning="true">
                        <div class="row">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <img src="@NFT.ImageLink" style="min-height:50px; max-height:100px; width:auto; min-width:50px; max-width:200px;" />
                            </div>
                        </div>
                    </Spin>
                }
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Name: @pnft.Name @pnft.Surname (@pnft.Nickname)</span>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Name: @NFT.Name</span>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Author: @NFT.Author</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Description: @NFT.Description</span>
                </div>
            </div>

            @if (NFT.Type == NFTTypes.CoruzantProfile && !string.IsNullOrEmpty(NFT.ImageLink))
            {
                var pnft = NFT as CoruzantProfileNFT;
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="@pnft.PersonalPageLink" target="_blank">Profile Page Link</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Company: @pnft.CompanyName</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="@pnft.CompanyLink" target="_blank">Company Link</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Position: @pnft.WorkingPosition</span>
                    </div>
                </div>
            }
            <hr />
            @if (!string.IsNullOrEmpty(NFT.NFTOriginTxId))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="https://explorer.nebl.io/tx/@NFT.NFTOriginTxId" target="_blank">Mint Tx In Explorer</a>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(NFT.Utxo))
            {
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <a href="https://explorer.nebl.io/tx/@NFT.Utxo" target="_blank">Tx In Explorer</a>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Confirmations: @NFT.TxDetails.Confirmations.ToString()</span>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <a href="@NFT.ImageLink" target="_blank">
                        @if (NFT.Type == NFTTypes.CoruzantProfile)
                        {
                            var tnft = NFT as CoruzantProfileNFT;
                            @if (!string.IsNullOrEmpty(tnft.PodcastLink))
                            {
                                <video controls="" autoplay="" name="media" title="@NFT.Name" @onplay="VideoStartedPlay" style="min-height: 100px; max-height: 150px; width: auto; min-width: 150px; max-width: 250px;">
                                    <source src="@tnft.PodcastLink" type="audio/mpeg">
                                </video>
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <div style="width:100px; height:50px;"></div>
                                </Spin>
                            }
                        }
                        else if (NFT.Type == NFTTypes.CoruzantPost)
                        {
                            var tnft = NFT as CoruzantPostNFT;
                            @if (!string.IsNullOrEmpty(tnft.PodcastLink) || !string.IsNullOrEmpty(tnft.ImageLink))
                            {
                                @if (!string.IsNullOrEmpty(tnft.PodcastLink))
                                {
                                    <video controls="" autoplay="" name="media" title="@NFT.Name" @onplay="VideoStartedPlay" style="min-height: 100px; max-height: 150px; width: auto; min-width: 150px; max-width: 250px;">
                                        <source src="@tnft.PodcastLink" type="audio/mpeg">
                                    </video>
                                }
                                else if (string.IsNullOrEmpty(tnft.PodcastLink) && !string.IsNullOrEmpty(tnft.ImageLink))
                                {
                                    <img src="@NFT.ImageLink" style="min-height:50px; max-height:150px; width:auto;" />
                                }
                            }
                            else
                            {
                                <Spin Tip="Loading..." Spinning="true">
                                    <div style="width:100px; height:50px;"></div>
                                </Spin>
                            }
                        }
                    </a>
                </div>
            </div>
            @if (OwnNFT)
            {
                @if (NFT.TxDetails.Confirmations > 1)
                {
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            @if (NFT.Type == NFTTypes.CoruzantPost)
                            {
                                <button class="btn btn-secondary" @onclick="async () => ShowUpdatePostNFTDialog()" style="width:65px; height:65px; margin-right:20px;">
                                    <div class="row">
                                        <div class="col">
                                            <div class="row d-flex justify-content-center align-items-center">
                                                <div class="col">
                                                    <i class="oi oi-pencil"></i>
                                                </div>
                                            </div>
                                            <div class="row d-flex justify-content-center align-items-center">
                                                <div class="col">
                                                    <span style="font-size: 12px;">Edit</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </button>
                            }
                            <button class="btn btn-primary" @onclick="async () => ShowSendNFTDialog()" style="width:65px; height:65px;">
                                <div class="row">
                                    <div class="col">
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <i class="oi oi-location"></i>
                                            </div>
                                        </div>
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <span style="font-size: 12px;">Send</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </button>
                            <button class="btn btn-primary" @onclick="async () => await ShowOwnershipQRCode()" style="width:65px; height:65px; margin-left:20px;">
                                <div class="row">
                                    <div class="col">
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <i class="oi oi-grid-four-up"></i>
                                            </div>
                                        </div>
                                        <div class="row d-flex justify-content-center align-items-center">
                                            <div class="col">
                                                <span style="font-size: 12px;">QR</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </button>
                        </div>
                    </div>
                }
            }

            <VENFTApp_Blazor.Components.NFTHistory Utxo="@NFT.Utxo" />
        </Spin>
    </div>

    <SendNFT NFT="@NFT" 
             NFTSent="@NFTSentHandler" 
             @bind-SendNFTDialogVisible="sendNFTDialogVisible"
             Address="@Address"
             SubAccount="@SubAccount"/>

    <Modal Title="Create or edit post NFT"
           Visible="@createNewPostVisible"
           OnOk="@createNewPostConfirm"
           OnCancel="@createNewPostCancel">
        <MintNFTForm NFTType="NFTTypes.Post" 
                     NFT="@NFT" 
                     RedirectToNFTsAfterMint="false" 
                     NFTMinted="@NFTMinted"
                     Address="@Address"
                     SubAccount="@SubAccount"/>
    </Modal>

    <Modal Title="Ownership QR Code"
           Visible="@showOwnershipDialogVisible"
           OnOk="@showOwnershipDialogCancel"
           Style="width:auto; max-width:300px;"
           OnCancel="@showOwnershipDialogCancel">
        <Spin Tip="@creatingOwnerQRCodeState" Spinning="@showOwnershipDialogLoading">
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <span class="text-center">Code is valid for: @qrCodeRefreshCounter s</span>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <small>Signature</small>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h6 class="text-center">@ownershipDialogCode</h6>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-center align-items-center">
                    <!--<img src="@ownershipDialogQRCodeImage" style="max-width:250px;" />-->
                    <!--<div id="qrCodeRef"></div>-->
                    <div @ref=qrCodeRef></div>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    @if (!copyTextButtonCoppied)
                    {
                        <button class="btn btn-light" @onclick="copyCodeToClipboard">Copy <i class="oi oi-share"></i></button>
                    }
                    else
                    {
                        <button class="btn btn-light" @onclick="copyCodeToClipboard">Copied <i class="oi oi-check"></i></button>
                    }
                </div>
            </div>
        </Spin>
    </Modal>
</div>


@code {

    private INFT NFT { get; set; } = new CoruzantProfileNFT("");

    private string _utxo = string.Empty;
    [Parameter]
    public string Utxo
    {
        get => _utxo;
        set
        {
            if (!string.IsNullOrEmpty(value) && _utxo != value)
            {
                _utxo = value;
                Load();
            }
        }
    }
    private int _utxoIndex = 0;
    [Parameter]
    public int UtxoIndex
    {
        get => _utxoIndex;
        set
        {
            if (_utxoIndex != value)
            {
                _utxoIndex = value;
            }
        }
    }

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    bool createNewPostVisible = false;
    bool sendNFTDialogVisible = false;
    bool showOwnershipDialogVisible = false;
    bool showOwnershipDialogLoading = false;
    bool setPriceNFTDialogVisible = false;
    bool loading = false;
    bool copyTextButtonCoppied = false;

    private System.Threading.Timer qrCodeRefreshTimer;
    private int qrCodeRefreshCounter = 30;

    string creatingOwnerQRCodeState = string.Empty;
    string ownershipDialogQRCodeImage = string.Empty;
    string ownershipDialogCode = string.Empty;
    string status = string.Empty;
    bool qrrefreshed = false;
    private ElementReference qrCodeRef;
    private string songName = string.Empty;

    protected override Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(_utxo))
            Load();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (NFT != null)
        {
            if (NFT.Type == NFTTypes.CoruzantProfile || NFT.Type == NFTTypes.CoruzantPost || NFT.Type == NFTTypes.CoruzantPodcast)
            {
                var nft = NFT as CommonCoruzantNFT;
                if (!string.IsNullOrEmpty(nft.PodcastLink) &&
                    !string.IsNullOrEmpty(NFT.Name) && NFT.Name != songName)
                {
                    songName = NFT.Name;
                    VideoStartedPlay();
                }
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task Load()
    {
        loading = true;
        StateHasChanged();
        NFT.TxDataRefreshed -= TxDataRefreshedHandler;
        await NFT.StopRefreshingData();

        NFT = await NFTFactory.GetNFT(CoruzantNFTHelpers.CoruzantTokenId, _utxo, 0, true);
        NFT.UtxoIndex = _utxoIndex;

        if (NFT == null)
            return;

        await NFT.StartRefreshingTxData();
        NFT.TxDataRefreshed += TxDataRefreshedHandler;
        loading = false;
        StateHasChanged();
    }

    private async Task VideoStartedPlay()
    {
        await JSRuntime.InvokeVoidAsync("setMusicInfo", NFT.Name, NFT.Author, NFT.Description);

        // not work - handler is not called, I had to add little hack in onafterrender
    }

    private void TxDataRefreshedHandler(object sender, GetTransactionInfoResponse info)
    {
        StateHasChanged();
    }

    private async Task ShowSendNFTDialog()
    {
        sendNFTDialogVisible = true;
        StateHasChanged();
    }

    private async Task copyCodeToClipboard(MouseEventArgs e)
    {
        var dto = new OwnershipVerificationCodeDto()
        {
            TxId = NFT.Utxo,
            Signature = ownershipDialogCode
        };
        await JSRuntime.InvokeVoidAsync("jsFunctions.copyToClipboard", JsonConvert.SerializeObject(dto));
        await copyCodeToClipboardButtonTextEfect();
    }

    private async Task copyCodeToClipboardButtonTextEfect()
    {
        copyTextButtonCoppied = true;
        StateHasChanged();
        await Task.Delay(1000);
        copyTextButtonCoppied = false;
        StateHasChanged();
    }

    private async Task RefreshQRCode()
    {
        showOwnershipDialogLoading = true;
        StateHasChanged();
        await Task.Delay(100);

        (OwnershipVerificationCodeDto, byte[]) res;
        if (!SubAccount)
            res = await AppData.Account.GetNFTVerifyQRCode(_utxo);
        else
            res = await AppData.Account.GetNFTVerifyQRCodeFromSubAccount(Address, _utxo);
        ownershipDialogCode = res.Item1.Signature;

        var sdto = JsonConvert.SerializeObject(res.Item1);
        await JSRuntime.InvokeVoidAsync("jsFunctions.getQRCode", new object[] { sdto, qrCodeRef });
        creatingOwnerQRCodeState = "Refreshing Key...";
        showOwnershipDialogLoading = false;
        StateHasChanged();
    }
    private async Task ShowOwnershipQRCode()
    {
        creatingOwnerQRCodeState = "Initializing Verification Module...";
        showOwnershipDialogVisible = true;
        StateHasChanged();
        await Task.Delay(50);
        await RefreshQRCode();

        if (qrCodeRefreshTimer != null)
        {
            qrCodeRefreshTimer.Dispose();
        }

        qrCodeRefreshTimer = new System.Threading.Timer(async (object stateInfo) =>
        {
            try
            {
                var utc = DateTime.UtcNow;
                if ((utc.Second >= 0 && utc.Second < 50) && !qrrefreshed)
                {
                    await RefreshQRCode();
                    qrCodeRefreshCounter = 60 - utc.Second;
                    qrrefreshed = true;
                }
                else if (utc.Second > 50 && utc.Second < 55)
                {
                    qrrefreshed = false;
                    qrCodeRefreshCounter--;
                }
                else
                {
                    qrCodeRefreshCounter--;
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Cannot read tx details. " + ex.Message);
            }
        }, new System.Threading.AutoResetEvent(false), 1000, 1000);
    }

    private async Task showOwnershipDialogCancel(MouseEventArgs e)
    {
        showOwnershipDialogVisible = false;
        StateHasChanged();
    }

    private async Task ShowSetPriceNFTDialog()
    {
        setPriceNFTDialogVisible = true;
        StateHasChanged();
    }

    private async Task ShowUpdatePostNFTDialog()
    {
        createNewPostVisible = true;
        StateHasChanged();
    }

    private async Task createNewPostConfirm(MouseEventArgs e)
    {
        createNewPostVisible = false;
        StateHasChanged();
    }

    private async Task createNewPostCancel(MouseEventArgs e)
    {
        createNewPostVisible = false;
    }

    void NFTSentHandler(string e)
    {
        sendNFTDialogVisible = false;
        StateHasChanged();
    }

    void NFTMinted(string e)
    {
        createNewPostVisible = false;
        StateHasChanged();
    }
}
