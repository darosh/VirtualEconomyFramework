@using System.IO;
@using VEDriversLite.NFT
@using Ipfs.Http
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReaderService
@inject AppData AppData
@inject HttpClient _client

<div class="row">
    <div class="col">
        <div class="row" style="margin-top:20px;">
            <div class="col">
                <Spin spinning="@uploadingImage" tip="Uploading to IPFS...">
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <p>Select and Upload Image:</p>
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <input type="file" @ref=inputTypeFileElement />
                        </div>
                    </div>
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <button @onclick=ReadFile>Upload Image</button>
                        </div>
                    </div>
                </Spin>
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <Input Placeholder="Image Link" @bind-Value=@_imageLink Style="font-size:12px; min-width:250px; max-width:350px;" />
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <p>Image Preview:</p>
            </div>
        </div>
        <div class="row" style="margin-top:20px;">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                @switch (loadingImageStage)
                {
                    case LoadingImageStages.NotStarted:
                        <p>No image loaded</p>
                        break;
                    case LoadingImageStages.Loading:
                        <Spin Tip="Uploading..." />
                        break;
                    case LoadingImageStages.Loaded:
                        <a href="@_imageLink" target="_blank"><img src="@_imageLink" style="max-width:350px; min-width:40px;" alt="Probably still waiting for ipfs confirmation. Wait a minute please..." /></a>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    bool uploadingImage = false;
    bool errorUpload = false;
    private static int attemptsToDisplay = 10;
    LoadingImageStages loadingImageStage = LoadingImageStages.NotStarted;
    private System.Threading.Timer timer;
    private ElementReference inputTypeFileElement;
    private static readonly IpfsClient ipfs = new IpfsClient("https://ipfs.infura.io:5001");

    private string _imageLink = string.Empty;
    [Parameter]
    public string ImageLink
    {
        get => _imageLink;
        set
        {
            if (_imageLink == value) return;
            _imageLink = value;
            loadingImageStage = LoadingImageStages.Loaded;
            StateHasChanged();
        }
    }
    [Parameter]
    public EventCallback<string> ImageLinkChanged { get; set; }

    public async Task ReadFile()
    {
        try
        {
            errorUpload = false;
            uploadingImage = true;
            attemptsToDisplay = 10;
            //StateHasChanged();
            foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
            {
                loadingImageStage = LoadingImageStages.Loading;
                StateHasChanged();

                // Read into buffer and act (uses less memory)
                await using (Stream stream = await file.OpenReadAsync())
                {
                    var fileinfo = await file.ReadFileInfoAsync();
                    var link = string.Empty;
                    try
                    {
                        var imageLink = await NFTHelpers.ipfs.FileSystem.AddAsync(stream, fileinfo.Name);
                        link = "https://gateway.ipfs.io/ipfs/" + imageLink.ToLink().Id.ToString();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Error during uploading the image to the IPFS." + ex.Message);
                    }

                    timer = new System.Threading.Timer(async (object stateInfo) =>
                    {
                        try
                        {
                            if (!string.IsNullOrEmpty(link))
                            {
                                using var httpResponse = await _client.GetAsync(link);

                                if (httpResponse.IsSuccessStatusCode)
                                {
                                    loadingImageStage = LoadingImageStages.Loaded;
                                    uploadingImage = false;

                                    ImageLink = link;
                                    StateHasChanged(); // MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                                    ImageLinkChanged.InvokeAsync(link);
                                    timer.Dispose();
                                }

                                attemptsToDisplay--;
                                if (attemptsToDisplay < 0)
                                {
                                    loadingImageStage = LoadingImageStages.Loaded;
                                    uploadingImage = false;
                                    ImageLink = link;
                                    StateHasChanged();
                                    ImageLinkChanged.InvokeAsync(link);
                                    timer.Dispose();
                                }
                            }
                            else
                            {
                                loadingImageStage = LoadingImageStages.NotStarted;
                                uploadingImage = false;
                                errorUpload = true;
                                StateHasChanged();
                                timer.Dispose();
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Error during checking uploaded image!" + ex.Message);
                            attemptsToDisplay--;
                            if (attemptsToDisplay < 0)
                            {
                                loadingImageStage = LoadingImageStages.NotStarted;
                                uploadingImage = false;
                                errorUpload = true;
                                StateHasChanged();
                                timer.Dispose();
                            }
                        }
                    }, new System.Threading.AutoResetEvent(false), 4000, 4000);
                }
            }
        }
        catch (Exception ex)
        {
            loadingImageStage = LoadingImageStages.NotStarted;
            uploadingImage = false;
            errorUpload = true;
            //StateHasChanged();
        }
    }
}
