@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData

<a style="font-size: 16px; margin-left:10px; margin-bottom: 5px" @onclick="showAddOrRemoveBookmark">
    @if (IsInBookmarks)
    {
        <i class="oi oi-star text-warning"></i>
    }
    else
    {
        <i class="oi oi-star text-secondary"></i>
    }
</a>

<Modal Title="Add Bookmark"
       Visible="@addBookmarkVisible"
       OnOk="@AddBookmarkConfirm"
       OnCancel="@AddBookmarkCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Please Input Name</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Name" @bind-Value="@newBookmark.Name" Style="font-size:12px; min-width:150px; max-width:250px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>You can add some note</span>
                </div>
            </div>
            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Note" @bind-Value="@newBookmark.Note" Style="font-size:12px; min-width:150px; max-width:250px;" />
                </div>
            </div>
        </div>
    </div>
</Modal>

<Modal Title="Remove Bookmark"
       Visible="@removeBookmarkVisible"
       OnOk="@RemoveBookmarkConfirm"
       OnCancel="@RemoveBookmarkCancel">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <span>Do you really want to remove this bookmark?</span>
                </div>
            </div>
        </div>
    </div>
</Modal>

@code {

    [Parameter]
    public bool IsInBookmarks { get; set; }

    bool addBookmarkVisible = false;
    bool removeBookmarkVisible = false;
    VEDriversLite.Bookmarks.Bookmark newBookmark = new VEDriversLite.Bookmarks.Bookmark();

    [Parameter]
    public EventCallback<VEDriversLite.Bookmarks.Bookmark> BookmarkRefreshed { get; set; }

    private string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
                _address = value;
        }
    }

    private async Task showAddOrRemoveBookmark(MouseEventArgs e)
    {
        if (!IsInBookmarks)
            addBookmarkVisible = true;
        else
            removeBookmarkVisible = true;
    }

    private async Task AddBookmarkConfirm(MouseEventArgs e)
    {
        newBookmark.Address = _address;
        await AddBookmark(newBookmark.Name, newBookmark.Address, newBookmark.Note);
        addBookmarkVisible = false;
        StateHasChanged();
    }
    private async Task AddBookmarkCancel(MouseEventArgs e)
    {
        addBookmarkVisible = false;
    }
    private async Task RemoveBookmarkConfirm(MouseEventArgs e)
    {
        await RemoveBookmark(_address);
        removeBookmarkVisible = false;
        StateHasChanged();
    }
    private async Task RemoveBookmarkCancel(MouseEventArgs e)
    {
        removeBookmarkVisible = false;
    }

    private async Task AddBookmark(string name, string address, string note)
    {
        if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(address))
        {
            if (string.IsNullOrEmpty(note))
                note = string.Empty;

            var bks = await AppData.Account.AddBookmark(name, address, note);
            if (bks.Item1)
                await localStorage.SetItemAsync("bookmarks", bks.Item2);

            BookmarkRefreshed.InvokeAsync(newBookmark);
        }
    }

    private async Task RemoveBookmark(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            var bks = await AppData.Account.RemoveBookmark(address);
            if (bks.Item1)
                await localStorage.SetItemAsync("bookmarks", bks.Item2);
        }
        newBookmark = new VEDriversLite.Bookmarks.Bookmark() { Address = address };
        BookmarkRefreshed.InvokeAsync(newBookmark);
    }
}
