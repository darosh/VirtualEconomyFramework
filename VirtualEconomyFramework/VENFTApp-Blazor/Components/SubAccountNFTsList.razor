@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData

<div class="container-fluid overflow-auto">
    <div class="row">
        <div class="col">
            <div class="row d-flex justify-content-end align-items-end" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <a href="https://explorer.nebl.io/address/@Address" style="font-size:11px;" target="_blank">@Address</a>
                    <CopyIcon MarginLeft="15" TextToCopy="@Address" />
                    <QRIcon MarginLeft="10" TextToCopy="@Address" />
                </div>
            </div>
            <div class="row d-flex justify-content-end align-items-end" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Total Spendable Balance: @AppData.Account.GetSubAccounTotaltSpendableActualBalance(Address) NEBL</span>
                </div>
            </div>
            <div class="row d-flex justify-content-end align-items-end" style="margin-top:10px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <span>Unconfirmed Balance: @AppData.Account.GetSubAccounUnconfirmedActualBalance(Address) NEBL</span>
                </div>
            </div>
            <div class="row d-flex justify-content-end align-items-end" style="margin-top:10px;">
                <div class="col d-flex justify-content-end align-items-end">
                    @if (NFTsSelectedForAction.Count == 0)
                    {
                        <button class="btn btn-light" @onclick="AllowCheckField" style="margin-left:20px;"><i class="oi oi-pencil"></i></button>
                    }
                    else
                    {
                        <button class="btn btn-light" @onclick="AllowCheckField" style="margin-left:20px;"><i class="oi oi-pencil"></i><span class="badge badge-info" style="margin-left:5px;">@NFTsSelectedForAction.Count</span></button>
                    }
                    <button class="btn btn-light" @onclick="DestroSelectedNFTs" style="margin-left:20px;"><i class="oi oi-trash"></i></button>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayVENFTChanged(eventArgs.Value); }" /><span style="margin-left:10px;">VENFT</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayCoruzantChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Coruzant</span><br />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex justify-content-center align-items-center">
                    <div class="row d-flex justify-content-center align-items-center" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayImagesChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Images</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayPostsChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Posts</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayMusicChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Music</span><br />
                        </div>
                        <div class="col d-flex justify-content-center align-items-center w-auto">
                            <input type="checkbox" checked="checked" @onchange="eventArgs => { displayTicketsChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Tickets</span><br />
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    @if (_nfts.Count == 0)
                    {
                        <p><em><Spin Tip="Loading...No NFTs found yet" Style="min-width:100px;"></Spin></em></p>
                    }
                    else
                    {
                        <div class="card-group">
                            @foreach (var nft in _nfts)
                            {
                                if (displayCoruzant && (nft.Type == NFTTypes.CoruzantProfile || nft.Type == NFTTypes.CoruzantArticle || nft.Type == NFTTypes.CoruzantPodcast))
                                {
                                    <CoruzantNFT Address="@_address"
                                                 InputNFT="@nft"
                                                 NFTSent="@NFTSentHandler"
                                                 OwnNFT="@true"
                                                 SubAccount="true"
                                                 DisplayCheckField="@allowNFTCheckField"
                                                 NFTCheckedChanged="@NFTCheckChangedHandler" />
                                }
                                else if (nft.Type != NFTTypes.Profile && nft.Type != NFTTypes.Payment && nft.TypeText != "NFT Settings" && nft.Type != NFTTypes.Message)
                                {
                                    if ((displayImages && nft.Type == NFTTypes.Image) ||
                                        (displayPosts && nft.Type == NFTTypes.Post) ||
                                        (displayMusic && nft.Type == NFTTypes.Music) ||
                                        (displayTickets && nft.Type == NFTTypes.Ticket) ||
                                        (displayTickets && nft.Type == NFTTypes.Event))
                                    {
                                        if ((displayVENFT && nft.TokenId == NFTHelpers.TokenId) ||
                                            (!displayVENFT && nft.TokenId != NFTHelpers.TokenId))
                                        {
                                        <NFT Address="@_address" InputNFT="@nft"
                                             NFTSent="@NFTSentHandler"
                                             OwnNFT="@true"
                                             SubAccount="true"
                                             DisplayCheckField="@allowNFTCheckField"
                                             NFTCheckedChanged="@NFTCheckChangedHandler" />
                                        }
                                    }
                                }
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<Modal Title="Destroy NFTs"
       Style="min-height:200px; min-width:200px;"
       Visible="@destroyNFTsVisible"
       OnOk="@destroyNFTsConfirm"
       OnCancel="@destroyNFTsCancel">
    <Spin Spinning="@destroyingNFTs" Tip="Destroying NFTs...">
        <div class="row">
            <div class="col d-flex justify-content-center align-items-center">
                <span>Do you really want to destroy selected NFTs? All will be returned back to you address as source tokens.</span>
            </div>
        </div>
    </Spin>
</Modal>

@code {

    private List<INFT> _nfts = new List<INFT>();

    [Parameter]
    public EventCallback<List<INFT>> NFTsChanged { get; set; }

    private string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value) && _address != value)
            {
                _nfts = new List<INFT>();
                lastAddress = _address;
                _address = value;
                LoadNFTs();
                StateHasChanged();
            }
        }
    }

    bool nftDetailsVisible = false;
    bool displayImages = true;
    bool displayPosts = true;
    bool displayMusic = true;
    bool displayTickets = true;
    bool displayVENFT = true;
    bool displayCoruzant = true;
    bool displayYouTube = false;
    bool displaySpotify = false;
    bool allowNFTCheckField = false;
    bool destroyNFTsVisible = false;
    bool destroyingNFTs = false;

    string lastAddress = string.Empty;

    private List<INFT> NFTsSelectedForAction = new List<INFT>();

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
            AppData.Account.Refreshed += RefreshedHandler;
    }

    void RefreshedHandler(object sender, EventArgs e)
    {
        LoadNFTs();
        StateHasChanged();
    }

    private async Task AllowCheckField(MouseEventArgs e)
    {
        allowNFTCheckField = !allowNFTCheckField;
        NFTsSelectedForAction.Clear();
        StateHasChanged();
    }

    private async Task NFTCheckChangedHandler((INFT, bool) e)
    {
        if (NFTsSelectedForAction.Count > 10 && e.Item2)
            return; // todo alert messagebox

        if (e.Item2 && !NFTsSelectedForAction.Contains(e.Item1))
            NFTsSelectedForAction.Add(e.Item1);
        else
        {
            if (NFTsSelectedForAction.Contains(e.Item1))
                NFTsSelectedForAction.Remove(e.Item1);
        }
        StateHasChanged();
    }

    private async Task DestroSelectedNFTs(MouseEventArgs e)
    {
        destroyNFTsVisible = true;
    }

    private async Task destroyNFTsConfirm(MouseEventArgs e)
    {
        destroyingNFTs = true;
        StateHasChanged();
        if (NFTsSelectedForAction.Count > 0)
        {
            var res = await AppData.Account.DestroyNFTOnSubAccount(_address, NFTsSelectedForAction, true);
            if (res.Item1)
                NFTsSelectedForAction.Clear();
        }
        _nfts.Clear();
        StateHasChanged();
        allowNFTCheckField = false;
        destroyingNFTs = false;
        destroyNFTsVisible = false;
        StateHasChanged();
    }
    private async Task destroyNFTsCancel(MouseEventArgs e)
    {
        destroyNFTsVisible = false;
    }

    private async Task LoadNFTs()
    {
        if (!string.IsNullOrEmpty(_address))
        {
            var nfts = await AppData.Account.GetNFTsOnSubAccount(_address);
            if (nfts.Item1 && _nfts.Count != nfts.Item2.Count)
            {
                _nfts.Clear();
                _nfts = nfts.Item2.ToList();

                if (!string.IsNullOrEmpty(lastAddress))
                    await AppData.Account.StopSubAccountAutorefreshing(lastAddress);
                await AppData.Account.AllowSubAccountAutorefreshing(_address);
                lastAddress = _address;
                await Task.Delay(50);
                StateHasChanged();
            }
        }
    }

    void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
    }

    private async Task displayImagesChanged(object e)
    {
        displayImages = (bool)e;
        StateHasChanged();
    }
    private async Task displayMusicChanged(object e)
    {
        displayMusic = (bool)e;
        StateHasChanged();
    }
    private async Task displayPostsChanged(object e)
    {
        displayPosts = (bool)e;
        StateHasChanged();
    }
    private async Task displayTicketsChanged(object e)
    {
        displayTickets = (bool)e;
        StateHasChanged();
    }
    private async Task displayVENFTChanged(object e)
    {
        displayVENFT = (bool)e;
        StateHasChanged();
    }
    private async Task displayCoruzantChanged(object e)
    {
        displayCoruzant = (bool)e;
        StateHasChanged();
    }

}
