@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@inject AppData AppData
@inject IJSRuntime jsRuntime

<div class="card" style="margin-left:10px; margin-top:10px;min-width:250px; width:250px; max-width:250px; min-height:400px; max-height:600px;">
    <div class="card-header" style="padding: 0px;">
        <div class="row" style="max-width: 250px;height:200px;margin: 0px;">
            <div class="col d-flex justify-content-center align-items-center" style="padding: 0px;">
                @switch (nft.Type)
                {
                    case NFTTypes.CoruzantProfile:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                            </Spin>
                        }
                        break;
                    case NFTTypes.CoruzantPost:
                        @if (!string.IsNullOrEmpty(nft.ImageLink))
                        {
                            <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                        }
                        else
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                            </Spin>
                        }
                        break;
                    case NFTTypes.CoruzantPodcast:
                        var tnft = nft as CoruzantPostNFT;
                        @if (!string.IsNullOrEmpty(tnft.PodcastLink) || !string.IsNullOrEmpty(tnft.ImageLink))
                        {
                            @if (!string.IsNullOrEmpty(tnft.PodcastLink))
                            {
                                <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                    <source src="@tnft.PodcastLink" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(nft.ImageLink))
                                {
                                    <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                }
                            }
                        }
                        else
                        {
                            <Spin Tip="Loading..." Style="min-width:50px;">
                                <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                            </Spin>
                        }
                        break;
                }
            </div>
        </div>
    </div>

    <div class="card-body d-flex justify-content-center align-items-end">
        <span class="badge badge-primary" style="position: absolute;right: 190px;top: 207px;">Coruzant</span>
        @switch (nft.Type)
        {
            case NFTTypes.CoruzantProfile:
                <span class="badge badge-primary" style="position: absolute;right: 7px;top: 207px;">Profile</span>
                break;
            case NFTTypes.CoruzantPost:
                <span class="badge badge-secondary" style="position: absolute;right: 7px;top: 207px;">Post</span>
                break;
            case NFTTypes.CoruzantPodcast:
                <span class="badge badge-info" style="position: absolute;right: 7px;top: 207px;">Podcast</span>
                break;
        }
        <button class="btn btn-light" @onclick="async () => ShowShareNFT(nft.Utxo)"
                style="position:absolute; right: 7px;top: 230px; width: 30px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
            <i class="oi oi-share" style="font-size:12px;"></i>
        </button>
        <div class="row" style="margin: 0px;">
            <div class="col" style="padding: 0px;">
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (nft.Name.Length > 20)
                        {
                            <h6 class="text-center">@nft.Name.Substring(0, 19) ...</h6>
                        }
                        else
                        {
                            <h6 class="text-center">@nft.Name</h6>
                        }
                    </div>
                </div>
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        <small class="text-center">@nft.Author</small>
                    </div>
                </div>
                <div class="row text-center" style="margin: 0px;">
                    <div class="col text-center" style="padding: 0px;">
                        @if (nft.Description.Length > 80)
                        {
                            <small>@nft.Description.Substring(0, 79) ...</small>
                        }
                        else
                        {
                            <small>@nft.Description</small>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!--
    <div class="row">
        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
            <VENFTApp_Blazor.Components.NFTThumbnail Name="nft.Name" Type="nft.Type" Author="nft.Author" Description="nft.Description" />
        </div>
    </div>
    -->
    </div>
    @if (!HideButtons)
    {
        <div class="card-footer d-flex justify-content-center align-items-center">
            <small class="text-muted">
                <div class="row d-flex justify-content-center align-items-center">
                    <div class="col d-flex w-auto">
                        <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 40px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                            <i class="oi oi-info" style="font-size:12px;"></i>
                        </button>
                    </div>

                    @if (!IsInThePayments(nft.Utxo) && !OwnNFT && nft.PriceActive && nft.Type != NFTTypes.Payment && !string.IsNullOrEmpty(_address))
                    {
                        <div class="col d-flex w-auto" style="margin-left:15px;">
                            <SendNFTPayment Utxo="@nft.Utxo" UtxoIndex="@nft.UtxoIndex" OwnNFT="false" Receiver="@_address" Price="@nft.Price" NFTSent="@NFTSent" />
                        </div>
                    }
                </div>
                <div class="row d-flex justify-content-center align-items-center">
                    @if (!IsInThePayments(nft.Utxo))
                    {
                        @if (OwnNFT && nft.PriceActive)
                        {
                            <div class="col">
                                <small class="text-muted">Setted Price: @nft.Price NEBL</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col">
                            <small class="text-muted">Sold. Waiting for processing.</small>
                        </div>
                    }
                </div>
            </small>
        </div>
    }
</div>

<Modal Title="NFT Details"
       Visible="@nftDetailsVisible"
       OnOk="@CloseNFTDetails"
       OnCancel="@CloseNFTDetails">
    <CoruzantNFTDetails UtxoIndex="@nft.UtxoIndex" Utxo="@nftDetailsUtxo" NFTSent="@NFTSentHandler" OwnNFT="@OwnNFT" />
</Modal>

<Modal Title="NFT Image"
       Style="min-height:200px; min-width:200px;"
       Visible="@modalWithImageVisible"
       OnOk="@modalWithImageClose"
       OnCancel="@modalWithImageClose">
    <div class="row">
        <div class="col d-flex justify-content-center align-items-center">
            <img class="card-img-top" src="@modalWithImageLink" style="min-height:100px; height:auto; min-width:200px; width:auto;" />
        </div>
    </div>
</Modal>

<Modal Title="Share NFT"
       Visible="@shareNFTVisible"
       OnOk="@CloseShareNFT"
       OnCancel="@CloseShareNFT">
    <div class="row">
        <div class="col">
            <a href="@shareNFTUtxo" target="_blank">@shareNFTUtxo</a>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <CopyButton TextToCopy="@shareNFTUtxo" />
        </div>
    </div>
</Modal>

@code {


    bool shareNFTVisible = false;
    string shareNFTUtxo = string.Empty;

    string nftDetailsUtxo = string.Empty;
    bool nftDetailsVisible = false;

    string modalWithImageLink = string.Empty;
    bool modalWithImageVisible = false;

    [Parameter]
    public bool HideButtons { get; set; } = false;

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    private INFT nft = new CoruzantProfileNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => nft;
        set
        {
            if (value != null && value.Utxo != nft.Utxo)
            {
                nft = value;
                StateHasChanged();
            }
        }
    }

    string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                _address = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
        NFTSent.InvokeAsync(nfttx);
    }

    private bool IsInThePayments(string utxo)
    {
        if (OwnNFT)
        {
            if (AppData.Account.ReceivedPayments.TryGetValue(utxo, out var mnft))
                if ((mnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                    return true;

        }
        else
        {
            if (!string.IsNullOrEmpty(_address))
            {
                var tab = AppData.Account.Tabs.Find(t => t.Address == _address);
                if (tab != null && tab.ReceivedPayments.TryGetValue(utxo, out var nnft))
                    if ((nnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                        return true;
            }
        }

        return false;
    }

    private async Task CloseNFTDetails(MouseEventArgs e)
    {
        await nft.StopRefreshingData();
        nftDetailsVisible = false;
    }

    private async Task ShowShareNFT(string utxo)
    {
        shareNFTUtxo = "https://nft.ve-nft.com/?txid=" + utxo;
        shareNFTVisible = true;
    }

    private async Task CloseShareNFT(MouseEventArgs e)
    {
        shareNFTVisible = false;
    }

    private async Task ShowNFTDetails(string utxo)
    {
        nftDetailsUtxo = utxo;
        StateHasChanged();
        nftDetailsVisible = true;
        StateHasChanged();
    }

    public async Task OpenModalWithImage(string url)
    {
        modalWithImageVisible = true;
        modalWithImageLink = url;
        StateHasChanged();
    }

    public async Task modalWithImageClose(MouseEventArgs e)
    {
        modalWithImageVisible = false;
        StateHasChanged();
    }
}
