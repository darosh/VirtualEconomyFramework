@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@inject AppData AppData

<div class="row">
    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
        <button class="btn btn-primary" @onclick="ShowSendNFTDialog" style="margin-top:10px; width: 50px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;"><i class="oi oi-dollar" style="font-size:12px;"></i></button>
    </div>
</div>

<Modal Title="Send NFT"
       Visible="@sendNFTDialogVisible"
       OnOk="@sendNFTDialogOK"
       OnCancel="@sendNFTDialogCancel">
    <p>
        <div class="row">
            <div class="col">
                <Spin Tip="Sending..." Spinning="@sendingTransaction">
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            Receiver Address: @receiverAddress
                        </div>
                    </div>
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            Price @NFT.Price
                        </div>
                    </div>
                </Spin>
            </div>
        </div>
    </p>
</Modal>

<Modal Title="@confirmTitle"
       Visible="@confirmVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <p>@confirmContent</p>
</Modal>

@code {

    [Parameter]
    public INFT NFT { get; set; }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    string receiverAddress = string.Empty;
    [Parameter]
    public string Receiver
    {
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                receiverAddress = value;
            }
        }
    }

    [Parameter]
    public EventCallback<string> NFTSent { get; set; }

    [Parameter]
    public double Price { get; set; }

    bool sendingTransaction = false;
    string sendingTransactionState = "Sending NFT...";
    bool sendNFTDialogVisible = false;
    bool errorDuringSend = false;
    string errorMessage = string.Empty;

    bool confirmVisible = false;
    string confirmTitle = "Send NFT?";
    string confirmContent = "Do you realy want to buy this NFT?";

    string tokentxid = string.Empty;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task HandleOk(MouseEventArgs e)
    {
        confirmVisible = false;
        sendNFTDialogVisible = false;

        await sendNFT();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task sendNFTDialogOK(MouseEventArgs e)
    {
        confirmVisible = true;
    }

    private void sendNFTDialogCancel(MouseEventArgs e)
    {
        sendNFTDialogVisible = false;
    }

    private async Task ShowSendNFTDialog(MouseEventArgs e)
    {
        sendNFTDialogVisible = true;
    }

    private async Task sendNFT()
    {
        errorDuringSend = false;

        if (AppData.Account.IsLocked())
        {
            sendingTransaction = false;
            StateHasChanged();
            return;
        }

        var tu = await AppData.Account.HasSomeSpendableNeblio();
        if (!tu.Item1)
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "You dont have Neblio on the address. Probably waiting for more than 1 confirmation.";
            StateHasChanged();
            return;
        }

        var mu = await AppData.Account.HasSomeSourceForMinting();
        if (!mu.Item1)
        {
            sendingTransaction = false;
            errorDuringSend = true;
            errorMessage = "You dont have VENFT tokens on the address. Probably waiting for more than 1 confirmation.";
            StateHasChanged();
            return;
        }

        sendingTransaction = true;
        tokentxid = "Sending...";
        StateHasChanged();
        await Task.Delay(50);

        try
        {
            // send tx
            var rtxid = await NFTHelpers.SendNFTPayment(AppData.Account, receiverAddress, NFT, NFT.Utxo, Price);
            if (rtxid != null)
            {
                sendingTransactionState = "Transaction Send right!";
                tokentxid = rtxid;
                NFTSent.InvokeAsync(rtxid);
                AppData.Account.NFTs.Clear();
                StateHasChanged();
                sendingTransaction = false;
                errorMessage = string.Empty;
                errorDuringSend = false;
            }
        }
        catch (Exception ex)
        {
            NFTSent.InvokeAsync(ex.Message);
            tokentxid = ex.Message;
            errorDuringSend = true;
            errorMessage = ex.Message;

        }
    }

}
