@using VEDriversLite
@using VEDriversLite.NFT
@inject AppData AppData
@inject NavigationManager NavManager

<div class="row">
    <div class="col">
        <Spin spinning="@processingMinting" tip="Sending...">
            <div class="row">
                <div class="col">
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <small>Name</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            @if (nftType == NFTTypes.Profile)
                            {
                                <Input Placeholder="Type your Name" MaxLength="50" @bind-Value=@newProfileNFT.Name Style="font-size:12px; min-width:250px; max-width:350px;" />
                            }
                            else
                            {
                                <Input Placeholder="Add Name of the NFT" MaxLength="50" @bind-Value=@newNFT.Name Style="font-size:12px; min-width:250px; max-width:350px;" />
                            }
                        </div>
                    </div>
                    @if (nftType == NFTTypes.Profile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Surname</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <Input Placeholder="Type your surname" MaxLength="50" @bind-Value=@newProfileNFT.Surname Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Nickname</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <Input MaxLength="50" Placeholder="Type your nickname" @bind-Value=@newProfileNFT.Nickname Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Author</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <Input Placeholder="Add Author of the NFT" MaxLength="50" @bind-Value=@newNFT.Author Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }
                    @if (nftType != NFTTypes.Profile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Description</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <Input Placeholder="Add Description of the NFT" MaxLength="160" @bind-Value=@newNFT.Description Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Bio</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <Input Placeholder="Type your Bio" MaxLength="160" @bind-Value=@newNFT.Description Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }

                    @if (newNFT.Description.Length >= 159)
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Maximum length is 160 characters</small>
                            </div>
                        </div>
                    }

                    @if (nftType == NFTTypes.Music)
                    {
                        <VENFTApp_Blazor.Components.UploadImage NFTType="@nftType" ImageLink="@newNFT.Link" ImageLinkChanged="@ImageLinkChanged" />
                    }
                    else
                    {
                        <VENFTApp_Blazor.Components.UploadImage NFTType="@nftType" ImageLink="@newNFT.ImageLink" ImageLinkChanged="@ImageLinkChanged" />
                    }

                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <input type="checkbox" @onchange="eventArgs => { withPriceChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Price</span><br />
                        </div>
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <input type="checkbox" @onchange="eventArgs => { withCoppiesChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Coppies</span><br />
                        </div>
                    </div>

                    @if (withPrice)
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Price in Neblio</small>
                            </div>
                        </div>

                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <input type="number" step="0.0001" min="0.0005" max="1000000" @bind="@newNFT.Price" />
                            </div>
                        </div>
                    }

                    @if (withCoppies)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <small>Coppies</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                <input type="number" step="1" min="0" max="@(AppData.Account.SourceTokensBalance-1)" @bind="@NumberOfCoppies" />
                            </div>
                        </div>
                    }

                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <small class="text-center">Minting costs 0.0002 NEBL (fee) and @(NumberOfCoppies + 1) VENFT (carrier). The VENFT token will stay on your address as NFT. </small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <button class="btn btn-primary" @onclick="ShowMintConfirm">Create NFT</button>
                        </div>
                    </div>
                </div>
            </div>
        </Spin>

        <Modal Title="Mint New NFT"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <p>"Do you realy want to mint this NFT?"</p>
        </Modal>
    </div>
</div>

@code {


        bool withPrice = false;
        bool withCoppies = false;

        [Parameter]
        public bool RedirectToNFTsAfterMint { get; set; } = false;

        [Parameter]
        public EventCallback<string> NFTMinted { get; set; }

    private NFTTypes nftType = NFTTypes.Image;
    [Parameter]
    public NFTTypes NFTType
    {
        get => nftType;
        set => nftType = value;
    }

    private INFT sourceNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != newNFT.Utxo)
            {
                sourceNFT = value;
                if (value.Type == NFTTypes.Profile)
                {
                    newNFT.FillCommon(value);
                    newProfileNFT.Fill(value).Wait();
                }
                else
                {
                    newNFT.Fill(value);
                }
                StateHasChanged();
            }
        }
    }

    private int NumberOfCoppies = 0;

    INFT newNFT = new ImageNFT("");
    ProfileNFT newProfileNFT = new ProfileNFT("");
    bool uploadingImage = false;
    bool confirmVisible = false;
    bool processingMinting = false;

    void ImageLinkChanged(string newLink)
    {
        if (nftType == NFTTypes.Music)
        {
            newNFT.Link = newLink;
            newNFT.ImageLink = newLink;
        }
        else
        {
            newNFT.ImageLink = newLink;
            newProfileNFT.ImageLink = newLink;
        }
    }

    private async Task withPriceChanged(object e)
    {
        withPrice = (bool)e;
        if (withPrice)
            newNFT.Price = 0.0005;
        else
            newNFT.Price = 0;
        StateHasChanged();
    }
    private async Task withCoppiesChanged(object e)
    {
        withCoppies = (bool)e;
        StateHasChanged();
    }

    void ShowMintConfirm()
    {
        confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await MintNewNFT();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task MintNewNFT()
    {
        try
        {
            processingMinting = true;
            confirmVisible = false;
            StateHasChanged();

            newNFT.Type = nftType;

            if (!withPrice)
                newNFT.Price = 0.0;

            if (nftType == NFTTypes.Profile)
            {
                await newProfileNFT.FillCommon(newNFT);
                newNFT = newProfileNFT;
            }

            if (nftType == NFTTypes.Music)
            {
                var nft = await NFTFactory.CloneNFT(newNFT, true, NFTTypes.Music);
                newNFT = nft; // hotfix
            }

            (bool, string) res;
            if (nftType == NFTTypes.Post && !string.IsNullOrEmpty(newNFT.Utxo))
                res = await AppData.Account.ChangePostNFT(newNFT);
            else if (nftType == NFTTypes.Profile && !string.IsNullOrEmpty(newNFT.Utxo))
                res = await AppData.Account.ChangeProfileNFT(newNFT);
            else if (NumberOfCoppies > 0 && nftType != NFTTypes.Profile)
                res = await AppData.Account.MintMultiNFT(NFTHelpers.TokenId, newNFT, NumberOfCoppies);
            else
                res = await AppData.Account.MintNFT(NFTHelpers.TokenId, newNFT);

            if (res.Item1)
            {
                await NFTMinted.InvokeAsync(res.Item2);

                if (RedirectToNFTsAfterMint)
                {
                    processingMinting = false;
                    StateHasChanged();
                    await Task.Delay(500);
                    NavManager.NavigateTo("/nfts");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingMinting = false;
            StateHasChanged();
        }
    }
}
