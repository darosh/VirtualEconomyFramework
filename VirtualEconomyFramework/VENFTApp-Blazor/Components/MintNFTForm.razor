@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@using Markdig
@inject AppData AppData
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col">
        <Spin spinning="@processingMinting" tip="Sending...">
            <div class="row">
                <div class="col">
                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Name</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            @if (nftType == NFTTypes.Profile)
                            {
                                <Input Placeholder="Type your Name" MaxLength="50" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                            }
                            else
                            {
                                <Input Placeholder="Add Name of the NFT" MaxLength="100" @bind-Value=@name Style="font-size:12px; min-width:250px; max-width:350px;" />
                            }
                        </div>
                    </div>
                    @if (nftType == NFTTypes.Profile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Surname</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Type your surname" MaxLength="50" @bind-Value=@surname Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Nickname</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input MaxLength="50" Placeholder="Type your nickname" @bind-Value=@nickname Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Author</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add Author of the NFT" MaxLength="50" @bind-Value=@author Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                    }
                    @if (nftType != NFTTypes.Profile)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Webpage</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <Input Placeholder="Add your webpage" MaxLength="50" @bind-Value=@link Style="font-size:12px; min-width:250px; max-width:350px;" />
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(link))
                        {
                            <div class="row" style="margin-top:3px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <a href=="@link" target="_blank" class="text-info">Test the link</a>
                                </div>
                            </div>
                        }
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Description</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Add Description of the NFT" MaxLength="160" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:50px;" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Bio</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Type your Bio" MaxLength="300" @bind-Value=@description Style="font-size:12px; min-width:250px; max-width:350px; min-height:50px;" />
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(description))
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small class="text-info">Remaining @(300-description.Length) from 300 characters.</small>
                            </div>
                        </div>
                    }
                    @if (nftType == NFTTypes.Post)
                    {
                        <div class="row" style="margin-top:10px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Text</small>
                            </div>
                        </div>
                        <div class="row" style="margin-top:5px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <TextArea Placeholder="Add Text" MaxLength="8000" @bind-Value=@text Style="font-size:12px; min-width:250px; width:350px; max-width:350px; min-height:400px;" />
                            </div>
                            @if (!string.IsNullOrEmpty(text))
                            {
                                <div class="col d-flexjustify-content-center align-items-center" style="width: 350px; min-height:400px; max-width:350px;">
                                    <span class="border-light">@((MarkupString)NFTmarkuptext)</span>
                                </div>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(text))
                        {
                            <div class="row" style="margin-top:2px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small class="text-info">Remaining @(8000-text.Length) from 8000 characters.</small>
                                </div>
                            </div>
                        }
                    }


                    <div class="row" style="margin-top:10px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small>Tags</small>
                        </div>
                    </div>
                    <div class="row" style="margin-top:5px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <Input Placeholder="Add Tags - splitted by space" MaxLength="200" @bind-Value=@tags Style="font-size:12px; min-width:250px; max-width:350px;" />
                        </div>
                    </div>

                    @if (nftType == NFTTypes.Music)
                    {
                        <div class="row" style="margin-top:2px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <small>Uplod Music</small>
                            </div>
                        </div>
                        <VENFTApp_Blazor.Components.UploadImage NFTType="@NFTTypes.Music" ImageLink="@link" ImageLinkChanged="@LinkChanged" />
                    }
                    else
                    {
                        <VENFTApp_Blazor.Components.UploadImage NFTType="@nftType" ImageLink="@imagelink" ImageLinkChanged="@ImageLinkChanged" />
                    }
                    @if (nftType == NFTTypes.Profile || (nftType == NFTTypes.Post && !string.IsNullOrEmpty(NFT.Utxo)))
                    {
                        <!--no price or coppy option now-->
                    }
                    else
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="checkbox" @onchange="eventArgs => { withPriceChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Price</span><br />
                            </div>
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="checkbox" @onchange="eventArgs => { withCoppiesChanged(eventArgs.Value); }" /><span style="margin-left:10px;">With Coppies</span><br />
                            </div>
                            <div class="col d-flex justify-content-center align-items-center">
                                <input type="checkbox" @onchange="eventArgs => { toAnotherAddressChanged(eventArgs.Value); }" /><span style="margin-left:10px;">Mint To Another Address</span><br />
                            </div>
                        </div>

                        @if (withPrice)
                        {
                            <div class="row" style="margin-top:20px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>Price in Neblio</small>
                                </div>
                            </div>

                            <div class="row" style="margin-top:5px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <input type="number" step="0.0001" min="0.0005" max="1000000" @bind="@newNFT.Price" />
                                </div>
                            </div>
                        }

                        @if (withCoppies)
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>Coppies</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:5px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <input type="number" step="1" min="0" max="20" @bind="@NumberOfCoppies" />
                                </div>
                            </div>
                        }
                        @if (toAnotherAddres)
                        {
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <small>Fill Receiver Address</small>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <VENFTApp_Blazor.Components.CreateNeblioSubAccount NewAddressCreated="newSubAccountCreated" />
                                </div>
                            </div>
                            <div class="row" style="margin-top:15px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <NeblioAddressInput AddressCheckedInputed="mintReceiverAddressChecked" Receiver="@mintReceiverAddress" />
                                </div>
                            </div>
                        }
                    }
                    <div class="row" style="margin-top:20px;">
                        <div class="col d-flex justify-content-center align-items-center">
                            <small class="text-center">Minting costs 0.0002 NEBL (fee) and @(NumberOfCoppies + 1) VENFT (carrier). The VENFT token will stay on your address as NFT. </small>
                        </div>
                    </div>
                    @if ((string.IsNullOrEmpty(imagelink) && (nftType == NFTTypes.Image)) || (string.IsNullOrEmpty(link) && (nftType == NFTTypes.Music)))
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary disabled" @onclick="ShowMintConfirm">Create NFT</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row" style="margin-top:20px;">
                            <div class="col d-flex justify-content-center align-items-center">
                                <button class="btn btn-primary" @onclick="ShowMintConfirm">Create NFT</button>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(multimintStatus))
                        {
                            <div class="row" style="margin-top:20px;">
                                <div class="col d-flex justify-content-center align-items-center">
                                    <span>@multimintStatus</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </Spin>

        <Modal Title="Mint New NFT"
               Visible="@confirmVisible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel">
            <p>"Do you realy want to mint this NFT?"</p>
        </Modal>

        <Modal Title="Mint To Another Address"
               Visible="@mintToAnotherAddressConfirmModalVisible"
               OnOk="@MintToAnotherAddressOk"
               OnCancel="@MintToAnotherAddressCancel">
            <p>"You selected another address as receiver of these NFTs. Is it correct?"</p>
        </Modal>

    </div>
</div>

@code {

    bool withPrice = false;
    bool withCoppies = false;

    [Parameter]
    public bool RedirectToNFTsAfterMint { get; set; } = false;

    [Parameter]
    public EventCallback<string> NFTMinted { get; set; }

    [Parameter]
    public bool SubAccount { get; set; } = false;

    [Parameter]
    public string Address { get; set; } = string.Empty;

    [Parameter]
    public string TokenId { get; set; } = string.Empty;

    private NFTTypes nftType = NFTTypes.Image;
    [Parameter]
    public NFTTypes NFTType
    {
        get => nftType;
        set => nftType = value;
    }

    private INFT sourceNFT = new ImageNFT("");
    [Parameter]
    public INFT NFT
    {
        get => sourceNFT;
        set
        {
            if (value != null && !string.IsNullOrEmpty(value.Utxo) && value.Utxo != sourceNFT.Utxo)
            {
                sourceNFT = null;
                sourceNFT = value;
                LoadData();
                StateHasChanged();
            }
        }
    }

    private int NumberOfCoppies = 0;

    INFT newNFT = new ImageNFT("");
    ProfileNFT newProfileNFT = new ProfileNFT("");
    bool uploadingImage = false;
    bool confirmVisible = false;
    bool processingMinting = false;

    public string NFTmarkuptext => Markdown.ToHtml(text);
    string description = string.Empty;
    string text = string.Empty;
    string tags = string.Empty;
    string name = string.Empty;
    string surname = string.Empty;
    string nickname = string.Empty;
    string author = string.Empty;
    string imagelink = string.Empty;
    string link = string.Empty;

    string multimintStatus = string.Empty;

    bool toAnotherAddres = false;
    string mintReceiverAddress = string.Empty;

    bool mintToAnotherAddressConfirmModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        if (AppData.Account != null)
            if (!string.IsNullOrEmpty(AppData.Account.Profile.Nickname))
                nickname = AppData.Account.Profile.Nickname;

        if (!string.IsNullOrEmpty(AppData.Account.Address))
        {
            AppData.Account.NewMintingProcessInfo -= multimintStateChangedHandler;
            AppData.Account.NewMintingProcessInfo += multimintStateChangedHandler;
        }
    }

    private void multimintStateChangedHandler(object sender, string e)
    {
        multimintStatus = e;
        StateHasChanged();
    }

    void ImageLinkChanged(string newLink)
    {
        imagelink = newLink;
    }

    void LinkChanged(string newLink)
    {
        link = newLink;
    }

    private void newSubAccountCreated(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            mintReceiverAddress = address;
        }
        StateHasChanged();
    }
    private void mintReceiverAddressChecked(string address)
    {
        if (!string.IsNullOrEmpty(address))
        {
            mintReceiverAddress = address;
        }
        StateHasChanged();
    }
    private async Task toAnotherAddressChanged(object e)
    {
        toAnotherAddres = (bool)e;
        StateHasChanged();
    }

    private async Task withPriceChanged(object e)
    {
        withPrice = (bool)e;
        if (withPrice)
            newNFT.Price = 0.0005;
        else
            newNFT.Price = 0;
        StateHasChanged();
    }
    private async Task withCoppiesChanged(object e)
    {
        withCoppies = (bool)e;
        StateHasChanged();
    }

    void ShowMintConfirm()
    {
        if (!string.IsNullOrEmpty(mintReceiverAddress))
            mintToAnotherAddressConfirmModalVisible = true;
        else
            confirmVisible = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await MintNewNFT();
    }

    private async Task MintToAnotherAddressOk(MouseEventArgs e)
    {
        mintToAnotherAddressConfirmModalVisible = false;
        confirmVisible = true;
    }
    private void MintToAnotherAddressCancel(MouseEventArgs e)
    {
        mintToAnotherAddressConfirmModalVisible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        confirmVisible = false;
    }

    private async Task LoadData()
    {
        if (sourceNFT != null)
        {
            switch (sourceNFT.Type)
            {
                case NFTTypes.Profile:
                    newNFT = new ProfileNFT("");
                    surname = (sourceNFT as ProfileNFT).Surname;
                    nickname = (sourceNFT as ProfileNFT).Nickname;
                    break;
                case NFTTypes.Post:
                    newNFT = new PostNFT("");
                    break;
            }
            description = sourceNFT.Description;
            text = sourceNFT.Text;
            tags = sourceNFT.Tags;
            name = sourceNFT.Name;
            author = sourceNFT.Author;
            imagelink = sourceNFT.ImageLink;
            link = sourceNFT.Link;
            StateHasChanged();
        }
    }

    private async Task MintNewNFT()
    {
        try
        {
            processingMinting = true;
            confirmVisible = false;
            StateHasChanged();

            newNFT.Type = nftType;

            if (!withPrice)
                newNFT.Price = 0.0;

            if (!string.IsNullOrEmpty(TokenId))
                newNFT.TokenId = TokenId;

            switch (nftType)
            {
                case NFTTypes.Profile:
                    newNFT = new ProfileNFT("")
                    {
                        Surname = surname,
                        Nickname = nickname,
                    };
                    break;
                case NFTTypes.Music:
                    newNFT = new MusicNFT("");
                    break;
                case NFTTypes.Post:
                    //
                    break;
            }

            if (!string.IsNullOrEmpty(TokenId))
                newNFT.TokenId = TokenId;

            if (name != null)
                newNFT.Name = name;
            if (tags != null)
                newNFT.Tags = tags;
            if (author != null)
                newNFT.Author = author;
            if (description != null)
                newNFT.Description = description;
            if (text != null)
                newNFT.Text = text;
            if (link != null)
                newNFT.Link = link;
            if (imagelink != null)
                newNFT.ImageLink = imagelink;

            (bool, string) res;
            if (!string.IsNullOrEmpty(newNFT.Utxo))
            {
                if (!SubAccount)
                    res = await AppData.Account.ChangeNFT(newNFT);
                else
                    res = await AppData.Account.ChangeNFTOnSubAccount(Address, newNFT);
            }
            else if (string.IsNullOrEmpty(newNFT.Utxo) && NumberOfCoppies > 0 && nftType != NFTTypes.Profile)
            {
                if (!SubAccount)
                    res = await AppData.Account.MintMultiNFT(newNFT, NumberOfCoppies);
                else
                    res = await AppData.Account.MultimintNFTLargeOnSubAccount(Address, newNFT, NumberOfCoppies);
            }
            else
            {
                if (!SubAccount)
                    res = await AppData.Account.MintNFT(newNFT);
                else
                    res = await AppData.Account.MintNFTOnSubAccount(Address, newNFT);
            }

            if (res.Item1)
            {
                await NFTMinted.InvokeAsync(res.Item2);

                if (RedirectToNFTsAfterMint)
                {
                    processingMinting = false;
                    StateHasChanged();
                    await Task.Delay(500);
                    NavManager.NavigateTo("/nfts");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alertMessage", "Some error during minting: " + res.Item2);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            processingMinting = false;
            StateHasChanged();
        }
    }
}
