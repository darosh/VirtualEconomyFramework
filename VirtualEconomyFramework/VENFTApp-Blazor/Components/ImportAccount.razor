@using VEDriversLite
@using VEDriversLite.NeblioAPI
@using VEDriversLite.Security
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AppData AppData
@inject NavigationManager NavManager

<Modal Title="Import Account"
       Visible="@importAccountVisible"
       OnOk="@importAccountConfirm"
       OnCancel="@importAccountCancel">
    <div class="row">
        <div class="col">
            <Spin spinning="@creatingAddressSpinner" tip="Importing Address...">
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Please Input Neblio Address</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Leave empty if you do not have any and app will create new one automatically.</small>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Input Placeholder="Input address" @bind-Value="@importAccountAddress" style="font-size:12px;min-width:150px; max-width:250px;" />
                        <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="@QRTextReaded" />-->
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <InputPassword Placeholder="Input encrypted private key" @bind-Value="@importAccountKey" style="font-size:12px; min-width:150px; max-width:250px;" />
                        <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="@QRTextReaded" />-->
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Please Input Doge Address</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex justify-content-center align-items-center">
                        <small>Leave empty if you do not have any and app will create new one automatically.</small>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Input Placeholder="Input address" @bind-Value="@importDogeAccountAddress" style="font-size:12px;min-width:150px; max-width:250px;" />
                        <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="@QRTextReaded" />-->
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <InputPassword Placeholder="Input encrypted private key" @bind-Value="@importDogeAccountKey" style="font-size:12px; min-width:150px; max-width:250px;" />
                        <!--<VENFTApp_Blazor.Components.LoadQRData MarginLeft="10" ReadedTextChanged="@QRTextReaded" />-->
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Is your key already encrypted with the password or not?</span>
                    </div>
                </div>
                <div class="row" style="margin-top:5px;">
                    <div class="col d-flex justify-content-center align-items-center text-center">
                        <small>If this is checked private keys (both if you input doge too) must be encrypted with AES with provided password.</small>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <Checkbox Checked="@importKeyAlreadyEncrypted" CheckedChange="@ToggleChecked">
                            @($"{(importKeyAlreadyEncrypted ? "Already Encrypted Key" : "Not Encrypted Key")}")
                        </Checkbox>
                    </div>
                </div>

                <div class="row" style="margin-top:10px;">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <InputPassword Placeholder="Input password" @bind-Value="@importAccountPass" style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <span>Confirm Password:</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                        <InputPassword Placeholder="Input password" @bind-Value="@passwordConfirm" style="font-size:12px; min-width:150px; max-width:250px;" />
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(importAccountPass))
                {
                    if (importAccountPass.Length > 4)
                    {
                        if (!string.IsNullOrEmpty(passwordConfirm))
                        {
                            if (passwordConfirm != importAccountPass)
                            {
                                <Alert Type="@AlertType.Warning"
                                       Message="Warrning"
                                       Description="Passwords not match!"
                                       ShowIcon="true" />
                            }
                            else
                            {
                                <Alert Type="@AlertType.Success"
                                       Message="Success"
                                       Description="Passwords Match. Please confirm to create address!"
                                       ShowIcon="true" />
                            }
                        }
                    }
                    else
                    {
                        <Alert Type="@AlertType.Warning"
                               Message="Warrning"
                               Description="Passwords minimal lenght is 8 characters!"
                               ShowIcon="true" />
                    }
                }

                @if (accountImportError)
                {
                    <Alert Type="@AlertType.Error"
                           Message="Error"
                           Description="Wrong Password or private key"
                           ShowIcon="true" />
                }
            </Spin>
        </div>
    </div>
</Modal>


@code {
    bool importAccountVisible = false;
    [Parameter]
    public bool Visible
    {
        get => importAccountVisible;
        set => importAccountVisible = value;
    }

    [Parameter]
    public EventCallback<string> AccountImported { get; set; }

    string key = string.Empty;
    string address = string.Empty;

    bool creatingAddressSpinner = false;

    bool accountImportError = false;
    string importDogeAccountAddress = string.Empty;
    string importDogeAccountKey = string.Empty;
    string importAccountAddress = string.Empty;
    string importAccountKey = string.Empty;
    string importAccountPass = string.Empty;
    private string passwordConfirm = string.Empty;
    bool passwordsMatch = false;
    bool readingQROfKey = false;

    bool importKeyAlreadyEncrypted = true;
    void ToggleChecked(bool value)
    {
        importKeyAlreadyEncrypted = !importKeyAlreadyEncrypted;
    }

    private async Task QRTextReaded(string text)
    {
        if (!readingQROfKey)
            importAccountAddress = text;
        else
            importAccountKey = text;
        StateHasChanged();
    }
    private async Task QRReadAddressClick(MouseEventArgs e)
    {
        readingQROfKey = false;
        StateHasChanged();
    }
    private async Task QRReadKeyClick(MouseEventArgs e)
    {
        readingQROfKey = true;
        StateHasChanged();
    }

    private async Task importAccountConfirm(MouseEventArgs e)
    {
        if (passwordConfirm != importAccountPass)
            return;

        if (string.IsNullOrEmpty(importAccountPass))
        {
            accountImportError = true;
            return;
        }
        if (importAccountPass.Length < 8)
            return;

        try
        {
            creatingAddressSpinner = true;
            StateHasChanged();

            var res = await LoadNeblioAccount();

            if (res)
            {
                await LoadDogeAccount();

                accountImportError = false;
                importAccountVisible = false;
                creatingAddressSpinner = true;

                StateHasChanged();
                await AccountImported.InvokeAsync("OK");
            }
            else
            {
                accountImportError = true;
            }
        }
        catch (Exception ex)
        {
            accountImportError = true;
            // todo
        }
    }

    public async Task<bool> LoadNeblioAccount()
    {
        if (string.IsNullOrEmpty(importAccountAddress) || string.IsNullOrEmpty(importAccountKey))
        {
            await AppData.Account.CreateNewAccount(importAccountPass, false);
            // save neblio address and key
            address = AppData.Account.Address;
            key = await AppData.Account.AccountKey.GetEncryptedKey(returnEncrypted: true);
            await localStorage.SetItemAsync("address", address);
            await localStorage.SetItemAsync("key", key);
            return true;
        }
        else
        {
            key = importAccountKey;
            address = importAccountAddress;

            if (!importKeyAlreadyEncrypted)
                key = await SymetricProvider.EncryptString(importAccountPass, key);

            await AppData.Account.LoadAccount(importAccountPass, key, address); // put here your password

            var kt = await AppData.Account.AccountKey.GetEncryptedKey();
            if (!string.IsNullOrEmpty(kt))
            {
                await localStorage.SetItemAsync("address", address);
                await localStorage.SetItemAsync("key", key);
                return true;
            }
        }
        return false;
    }

    public async Task LoadDogeAccount()
    {
        if (string.IsNullOrEmpty(importDogeAccountAddress) || string.IsNullOrEmpty(importDogeAccountKey))
        {
            // create and save doge address and key
            await AppData.DogeAccount.CreateNewAccount(importAccountPass, false);
            var addr = AppData.DogeAccount.Address;
            var k = await AppData.DogeAccount.AccountKey.GetEncryptedKey(returnEncrypted: true);
            await localStorage.SetItemAsync("dogeaddress", addr);
            await localStorage.SetItemAsync("dogekey", k);
        }
        else
        {
            var addr = importDogeAccountAddress;
            var k = importDogeAccountKey;
            if (!importKeyAlreadyEncrypted)
                k = await SymetricProvider.EncryptString(importAccountPass, k);
            await AppData.DogeAccount.LoadAccount(importAccountPass, k, addr); // put here your password
            var kt = await AppData.DogeAccount.AccountKey.GetEncryptedKey();
            if (!string.IsNullOrEmpty(kt))
            {
                await Task.Delay(50);
                StateHasChanged();
                await localStorage.SetItemAsync("dogeaddress", addr);
                await localStorage.SetItemAsync("dogekey", k);
            }
        }
    }

    private async Task importAccountCancel(MouseEventArgs e)
    {
        importAccountVisible = false;
    }
}
