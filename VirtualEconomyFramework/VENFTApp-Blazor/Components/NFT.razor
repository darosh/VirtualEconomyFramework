@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NFT.Coruzant
@inject AppData AppData
@inject IJSRuntime jsRuntime

@if (nft != null)
{
    @if (!string.IsNullOrEmpty(nft.Utxo))
    {
    <div class="card" style="margin-left:10px; margin-top:10px;min-width:250px; width:250px; max-width:250px; min-height:400px; max-height:600px;">
        <div class="card-header" style="padding: 0px;">
            <div class="row" style="max-width: 250px;height:200px;margin: 0px;">
                <div class="col d-flex justify-content-center align-items-center" style="padding: 0px;">
                    @if (DisplayCheckField)
                    {
                        <input type="checkbox" style="position : absolute; right: 220px; top: 20px;" @onchange="eventArgs => { checkNFTChanged(eventArgs.Value); }" />
                    }
                    @switch (nft.Type)
                    {
                        case NFTTypes.Image:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                                </Spin>
                            }
                            break;
                        case NFTTypes.Profile:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                                </Spin>
                            }
                            break;
                        case NFTTypes.Ticket:
                            var tnft = nft as TicketNFT;
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                @if (tnft.MusicInLink)
                                {
                                    <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                        <source src="@nft.ImageLink" type="audio/mpeg" autostart="false">
                                    </video>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(nft.ImageLink))
                                    {
                                        <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                    }
                                }
                            }
                            else
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                                </Spin>
                            }
                            break;
                        case NFTTypes.Event:
                            var enft = nft as EventNFT;
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                @if (enft.MusicInLink)
                                {
                                    <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                        <source src="@nft.ImageLink" type="audio/mpeg" autostart="false">
                                    </video>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(nft.ImageLink))
                                    {
                                        <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                                    }
                                }
                            }
                            else
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <img src="@nft.ImageLink" style="max-height:200px;  max-width:250px;" />
                                </Spin>
                            }
                            break;
                        case NFTTypes.Post:
                            @if (!string.IsNullOrEmpty(nft.ImageLink))
                            {
                                <img src="@nft.ImageLink" @onclick="async () => await OpenModalWithImage(nft.ImageLink)" style="max-height:200px; max-width:250px;" />
                            }
                            else
                            {
                                <Spin Tip="Loading..." Style="min-width:50px;">
                                    <img src="@nft.ImageLink" style="min-width:100px; max-height:200px;  max-width:250px;" />
                                </Spin>
                            }
                            break;
                        case NFTTypes.Music:
                            @if (!string.IsNullOrEmpty(nft.Link))
                            {
                                <video name="media" style="max-width:250px; width:250px; max-height:200px; margin-bottom:70px;" controls>
                                    <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            else if (!string.IsNullOrEmpty(nft.ImageLink) && string.IsNullOrEmpty(nft.Link))
                            {
                                <video name="media" style="max-width:250px; width:250px; margin-bottom:70px;" controls>
                                    <source src="@nft.Link" type="audio/mpeg" autostart="false">
                                </video>
                            }
                            break;
                    }
                </div>
            </div>
        </div>
    
        <div class="card-body d-flex justify-content-center align-items-end @NFTCheckedBgColor">

            @if (nft.TokenId == NFTHelpers.TokenId)
            {
                <span class="badge badge-warning" style="position: absolute;right: 200px;top: 207px;">VENFT</span>
            }
            else if (nft.TokenId == CoruzantNFTHelpers.CoruzantTokenId)
            {
                <span class="badge badge-primary" style="position: absolute;right: 190px;top: 207px;">Coruzant</span>
            }
        <div style="position: absolute;right: 7px;top: 207px; padding:0px; margin:0px;">
            @if (nft.Type == NFTTypes.Ticket)
            {
                var tnft = nft as TicketNFT;
                @switch (tnft.TicketDuration)
                {
                    case DurationOfNFTTicket.Day:
                        <span class="badge badge-secondary">1 Day</span>
                        break;
                    case DurationOfNFTTicket.TwoDays:
                        <span class="badge badge-primary">2 Days</span>
                        break;
                    case DurationOfNFTTicket.ThreeDays:
                        <span class="badge badge-success">3 Days</span>
                        break;
                    case DurationOfNFTTicket.FourDays:
                        <span class="badge badge-info">4 Days</span>
                        break;
                    case DurationOfNFTTicket.FiveDays:
                        <span class="badge badge-warning">5 Days</span>
                        break;
                }
                @switch (tnft.TicketClass)
                {
                    case ClassOfNFTTicket.Economy:
                        <span class="badge badge-secondary">Economy</span>
                        break;
                    case ClassOfNFTTicket.Standard:
                        <span class="badge badge-primary">Standard</span>
                        break;
                    case ClassOfNFTTicket.VIP:
                        <span class="badge badge-success">VIP</span>
                        break;
                    case ClassOfNFTTicket.VIPPlus:
                        <span class="badge badge-info">VIP+</span>
                        break;
                    case ClassOfNFTTicket.General:
                        <span class="badge badge-primary">General</span>
                        break;
                    case ClassOfNFTTicket.Family:
                        <span class="badge badge-warning">Family</span>
                        break;
                    case ClassOfNFTTicket.Children:
                        <span class="badge badge-warning">Children</span>
                        break;
                }
            }
            else if (nft.Type == NFTTypes.Event)
            {
                var enft = nft as EventNFT;
                @switch (enft.EventClass)
                {
                    case ClassOfNFTEvent.PersonalEvent:
                        <span class="badge badge-secondary">Personal</span>
                        break;
                    case ClassOfNFTEvent.Birthday:
                        <span class="badge badge-primary">Birthday</span>
                        break;
                    case ClassOfNFTEvent.Concert:
                        <span class="badge badge-success">Concert</span>
                        break;
                    case ClassOfNFTEvent.Festival:
                        <span class="badge badge-info">Festival</span>
                        break;
                    case ClassOfNFTEvent.PlaneFlight:
                        <span class="badge badge-warning">Plane Flight</span>
                        break;
                    case ClassOfNFTEvent.OnlineMeeting:
                        <span class="badge badge-light">e-Meeting</span>
                        break;
                }
            }
            @switch (nft.Type)
            {
                case NFTTypes.Image:
                    <span class="badge badge-primary">Image</span>
                    break;
                case NFTTypes.Ticket:
                    <span class="badge badge-secondary">Ticket</span>
                    break;
                case NFTTypes.Event:
                    <span class="badge badge-success">Event</span>
                    break;
                case NFTTypes.Post:
                    <span class="badge badge-info">Post</span>
                    break;
                case NFTTypes.Profile:
                    <span class="badge badge-light">Profile</span>
                    break;
                case NFTTypes.Music:
                    <span class="badge badge-warning">Music</span>
                    break;
            }
        </div>

            <button class="btn btn-light" @onclick="async () => ShowShareNFT(nft.Utxo)"
                    style="position:absolute; right: 7px;top: 230px; width: 30px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                <i class="oi oi-share" style="font-size:12px;"></i>
            </button>
            <div class="row" style="margin: 0px;">
                <div class="col" style="padding: 0px;">
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Name))
                            {
                                @if (nft.Name.Length > 20)
                                {
                                    <h6 class="text-center">@nft.Name.Substring(0, 19) ...</h6>
                                }
                                else
                                {
                                    <h6 class="text-center">@nft.Name</h6>
                                }
                            }
                        </div>
                    </div>
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Author))
                            {
                                @if (nft.Author.Length > 30)
                                {
                                    <small class="text-center">@nft.Author.Substring(0, 29) ...</small>
                                }
                                else
                                {
                                    <small class="text-center">@nft.Author</small>
                                }
                            }
                        </div>
                    </div>
                    <div class="row text-center" style="margin: 0px;">
                        <div class="col text-center" style="padding: 0px;">
                            @if (!string.IsNullOrEmpty(nft.Description))
                            {
                                @if (nft.Description.Length > 80)
                                {
                                    <small class="text-center">@nft.Description.Substring(0, 79) ...</small>
                                }
                                else
                                {
                                    <small class="text-center">@nft.Description</small>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
            <!--
        <div class="row">
            <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                <VENFTApp_Blazor.Components.NFTThumbnail Name="nft.Name" Type="nft.Type" Author="nft.Author" Description="nft.Description" />
            </div>
        </div>
        -->
        </div>
        @if (!HideButtons)
        {
            <div class="card-footer d-flex justify-content-center align-items-center">
                <small class="text-muted">
                    <div class="row d-flex justify-content-center align-items-center">
                        <div class="col d-flex w-auto">
                            <button class="btn btn-primary" @onclick="async () => ShowNFTDetails(nft.Utxo)" style="width: 40px;height: 25px;padding-left: 0px;padding-right: 0px;padding-top: 0px;padding-bottom: 0px;font-size: 12px;">
                                <i class="oi oi-info" style="font-size:12px;"></i>
                            </button>
                        </div>

                        @if (!IsInThePayments(nft.Utxo) && !OwnNFT && nft.PriceActive && nft.Type != NFTTypes.Payment && !string.IsNullOrEmpty(_address))
                        {
                            <div class="col d-flex w-auto" style="margin-left:15px;">
                                <SendNFTPayment Utxo="@nft.Utxo" UtxoIndex="@nft.UtxoIndex" OwnNFT="false" Receiver="@_address" Price="@nft.Price" NFTSent="@NFTSent" />
                            </div>
                        }
                    </div>
                    <div class="row d-flex justify-content-center align-items-center">
                        @if (!IsInThePayments(nft.Utxo))
                        {
                            @if (OwnNFT && nft.PriceActive)
                            {
                                <div class="col">
                                    <small class="text-muted">Setted Price: @nft.Price NEBL</small>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col">
                                <small class="text-muted">Sold. Waiting for processing.</small>
                            </div>
                        }
                    </div>
                </small>
            </div>
        }
    </div>

    <Modal Title="NFT Details"
           Visible="@nftDetailsVisible"
           OnOk="@CloseNFTDetails"
           OnCancel="@CloseNFTDetails">
        <VENFTApp_Blazor.Components.NFTDetails UtxoIndex="@nft.UtxoIndex" 
                                               Utxo="@nftDetailsUtxo"
                                               NFTSent="@NFTSentHandler" 
                                               OwnNFT="@OwnNFT"
                                               Address="@_address"
                                               SubAccount="@SubAccount"/>
    </Modal>

    <Modal Title="NFT Image"
           Style="min-height:200px; min-width:200px;"
           Visible="@modalWithImageVisible"
           OnOk="@modalWithImageClose"
           OnCancel="@modalWithImageClose">
        <div class="row">
            <div class="col d-flex justify-content-center align-items-center">
                <img class="card-img-top" src="@modalWithImageLink" style="min-height:100px; height:auto; min-width:200px; width:auto;" />
            </div>
        </div>
    </Modal>

    <Modal Title="Share NFT"
           Visible="@shareNFTVisible"
           OnOk="@CloseShareNFT"
           OnCancel="@CloseShareNFT">
        <div class="row">
            <div class="col">
                <a href="@shareNFTUtxo" target="_blank">@shareNFTUtxo</a>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <CopyButton TextToCopy="@shareNFTUtxo" />
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col">
                <span>Transaction Id</span>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <a href="https://explorer.nebl.io/tx/@nft.Utxo" target="_blank">@nft.Utxo</a>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <CopyButton TextToCopy="@nft.Utxo" />
            </div>
        </div>
    </Modal>
    }
}
@code {

        bool shareNFTVisible = false;
        string shareNFTUtxo = string.Empty;

        string nftDetailsUtxo = string.Empty;
        bool nftDetailsVisible = false;

        string modalWithImageLink = string.Empty;
        bool modalWithImageVisible = false;

        [Parameter]
        public bool HideButtons { get; set; } = false;

        [Parameter]
        public bool SubAccount { get; set; } = false;

        [Parameter]
        public EventCallback<string> NFTSent { get; set; }

        [Parameter]
        public bool DisplayCheckField { get; set; } = false;

        bool NFTChecked { get; set; } = false;
        string NFTCheckedBgColor { get; set; } = string.Empty;

        [Parameter]
        public EventCallback<(INFT,bool)> NFTCheckedChanged { get; set; }

    private INFT nft = new ImageNFT("");
    [Parameter]
    public INFT InputNFT
    {
        get => nft;
        set
        {
            if (value != null && value.Utxo != nft.Utxo)
            {
                nft = value;
                setBgColor();
                StateHasChanged();
            }
        }
    }

    string _address = string.Empty;
    [Parameter]
    public string Address
    {
        get => _address;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                _address = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public bool OwnNFT { get; set; } = false;

    void NFTSentHandler(string nfttx)
    {
        nftDetailsVisible = false;
        StateHasChanged();
        NFTSent.InvokeAsync(nfttx);
    }

    private async Task checkNFTChanged(object e)
    {
        NFTChecked = (bool)e;
        await setBgColor();
        await NFTCheckedChanged.InvokeAsync((nft, NFTChecked));
        StateHasChanged();
    }

    private async Task setBgColor()
    {
        if (NFTChecked)
            NFTCheckedBgColor = "bg-info";
        else
            NFTCheckedBgColor = string.Empty;
        StateHasChanged();
    }

    private bool IsInThePayments(string utxo)
    {
        if (nft.Type == NFTTypes.Image || nft.Type == NFTTypes.Music || nft.Type == NFTTypes.Post || nft.Type == NFTTypes.Ticket)
        {
            if (OwnNFT)
            {
                if (AppData.Account.ReceivedPayments.TryGetValue(utxo, out var mnft))
                    if ((mnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                        return true;

            }
            else
            {
                if (!string.IsNullOrEmpty(_address))
                {
                    var tab = AppData.Account.Tabs.Find(t => t.Address == _address);
                    if (tab != null && tab.ReceivedPayments.TryGetValue(utxo, out var nnft))
                        if ((nnft as PaymentNFT).NFTUtxoIndex == nft.UtxoIndex)
                            return true;
                }
            }
        }
        return false;
    }

    private async Task CloseNFTDetails(MouseEventArgs e)
    {
        await nft.StopRefreshingData();
        nftDetailsVisible = false;
    }

    private async Task ShowShareNFT(string utxo)
    {
        shareNFTUtxo = "https://nft.ve-nft.com/?txid=" + utxo;
        shareNFTVisible = true;
    }

    private async Task CloseShareNFT(MouseEventArgs e)
    {
        shareNFTVisible = false;
    }

    private async Task ShowNFTDetails(string utxo)
    {
        nftDetailsUtxo = utxo;
        StateHasChanged();
        nftDetailsVisible = true;
        StateHasChanged();
    }

    public async Task OpenModalWithImage(string url)
    {
        modalWithImageVisible = true;
        modalWithImageLink = url;
        StateHasChanged();
    }

    public async Task modalWithImageClose(MouseEventArgs e)
    {
        modalWithImageVisible = false;
        StateHasChanged();
    }
}
