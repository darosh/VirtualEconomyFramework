@using System.IO;
@using VEDriversLite
@using VEDriversLite.NFT
@using VEDriversLite.NeblioAPI
@using System.Threading
@using System.Threading.Tasks
@inject AppData AppData
@inject HttpClient _client

<Spin spinning="@loadingProfile" tip="Loading Profile...">
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <h3>Profile</h3>
                </div>
            </div>
            <div class="row bg-light">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <img src="@AppData.Account.Profile.ImageLink" style="min-height:50px; max-height:100px; width:auto;" />
                        </div>
                    </div>
                    <div class="row" style="margin-left:20px;">
                        <div class="col">
                            <div class="row">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <span>Name: @AppData.Account.Profile.Name @AppData.Account.Profile.Surname</span>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    Nick: @AppData.Account.Profile.Nickname
                                </div>
                            </div>
                            <div class="row">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    Bio: @AppData.Account.Profile.Description
                                </div>
                            </div>
                            <div class="row">
                                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                                    <a href="@AppData.Account.Profile.Link" target="_blank">Webpage</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (!ReadOnlyProfile)
            {
                @if (createNewProfile)
                {
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <button class="btn btn-secondary" @onclick="showNewProfileDialog" style="margin-top:20px;">Create New Profile</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                            <button class="btn btn-secondary" @onclick="showNewProfileDialog" style="margin-top:20px;">Edit Profile</button>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</Spin>


<Modal Title="Create new profile NFT"
       Visible="@createNewProfileVisible"
       OnOk="@createNewProfileConfirm"
       OnCancel="@createNewProfileCancel">
    <div class="row">
        <div class="col">

            <div class="row" style="margin-top:10px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Name:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Your Name" @bind-Value=@newProfileNFT.Name Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Surname:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Your Surname" @bind-Value=@newProfileNFT.Surname Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Nickname:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Your Nickname" @bind-Value=@newProfileNFT.Nickname Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Bio:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Your Bio" @bind-Value=@newProfileNFT.Description Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Link:</p>
                </div>
            </div>
            <div class="row">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <Input Placeholder="Add Your Webpage link" @bind-Value=@newProfileNFT.Link Style="font-size:12px; min-width:250px; max-width:350px;" />
                </div>
            </div>

            <VENFTApp_Blazor.Components.UploadImage ImageLink="@newProfileNFT.ImageLink" ImageLinkChanged="ImageLinkChanged" />

            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Status: @tokentxid</p>
                </div>
            </div>
            <div class="row" style="margin-top:20px;">
                <div class="col d-flex d-xl-flex justify-content-center justify-content-xl-center align-items-xl-center">
                    <p>Origin TxId: @newProfileNFT.NFTOriginTxId</p>
                </div>
            </div>
        </div>
    </div>
</Modal>

@if (AppData.Account.IsLocked())
{
    <Alert Type="@AlertType.Error"
           Message="Error"
           Description="Account Is Locked. Please unlock account first."
           ShowIcon="true" />
}

@if (errorDuringSend)
{
    <Alert Type="@AlertType.Error"
           Message="Error"
           Style="max-width:100px;"
           Description=@errorMessage
           ShowIcon="true" />
}


@code {
    bool loadingProfile = true;
    bool createNewProfileVisible = false;
    bool createNewProfile = false;

    bool processingMinting = false;
    bool errorDuringSend = false;
    string errorMessage = string.Empty;

    [Parameter]
    public bool ReadOnlyProfile { get; set; } = true;

    ProfileNFT newProfileNFT = new ProfileNFT("");

    string tokentxid = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }


    void ImageLinkChanged(string newLink)
    {
        newProfileNFT.ImageLink = newLink;
    }

    private async Task LoadProfile()
    {
        try
        {
            if (AppData.Account.Profile == null)
                AppData.Account.Profile = new ProfileNFT("");

            if (string.IsNullOrEmpty(AppData.Account.Profile.Utxo))
            {
                if (AppData.Account.NFTs.Count > 0)
                {
                    var profile = await NFTHelpers.FindProfileNFT(AppData.Account);

                    if (!string.IsNullOrEmpty(profile.Utxo))
                    {
                        loadingProfile = false;
                        await profile.GetLastData();
                        AppData.Account.Profile = profile;
                    }
                    else
                    {
                        AppData.Account.Profile = new ProfileNFT("");
                        createNewProfile = true;
                    }
                }
                else
                {
                    await AppData.Account.ReLoadNFTs();
                    if (AppData.Account.NFTs.Count > 0)
                    {
                        var profile = await NFTHelpers.FindProfileNFT(AppData.Account);

                        if (!string.IsNullOrEmpty(profile.Utxo))
                        {
                            loadingProfile = false;
                            await profile.GetLastData();
                            AppData.Account.Profile = profile;
                        }
                        else
                        {
                            createNewProfile = true;
                        }
                    }
                    else
                    {
                        AppData.Account.Profile = new ProfileNFT("");
                        createNewProfile = true;
                    }
                }
            }
            else
            {
                loadingProfile = false;
                await AppData.Account.Profile.GetLastData();
                createNewProfile = false;
            }
        }
        catch(Exception ex)
        {
            // todo
        }

        loadingProfile = false;
        StateHasChanged();
    }

    private async Task showNewProfileDialog(MouseEventArgs e)
    {
        if (AppData.Account.Profile == null)
            AppData.Account.Profile = new ProfileNFT("");

        if (!string.IsNullOrEmpty(AppData.Account.Profile.Utxo))
        {
            newProfileNFT = AppData.Account.Profile;
            newProfileNFT.Nickname = AppData.Account.Profile.Nickname;
            await Task.Delay(100);
            StateHasChanged();
        }

        createNewProfileVisible = true;
    }

    private async Task createNewProfileConfirm(MouseEventArgs e)
    {
        createNewProfileVisible = false;
        await MintNewProfileNFT();
    }


    private async Task createNewProfileCancel(MouseEventArgs e)
    {
        createNewProfileVisible = false;
    }

    private async Task MintNewProfileNFT()
    {
        errorDuringSend = false;

        if (ReadOnlyProfile)
        {
            processingMinting = false;
            StateHasChanged();
            return;
        }
        if (AppData.Account.IsLocked())
        {
            processingMinting = false;
            StateHasChanged();
            return;
        }

        var change = false;

        if (!string.IsNullOrEmpty(AppData.Account.Profile.Utxo))
            change = true;

        var nutxos = await NeblioTransactionHelpers.GetAddressNeblUtxo(AppData.Account.Address, 0.0001, 0.0002);
        if (nutxos.Count == 0)
        {
            processingMinting = false;
            errorDuringSend = true;
            errorMessage = "You dont have Neblio on the address. Probably waiting for more than 1 confirmation.";
            StateHasChanged();
            return;
        }

        if (!change)
        {
            var tutxos = await NeblioTransactionHelpers.FindUtxoForMintNFT(AppData.Account.Address, NFTHelpers.TokenId, 1);
            if (tutxos.Count == 0)
            {
                processingMinting = false;
                errorDuringSend = true;
                errorMessage = "You dont have VENFT tokens for minting on the address. Probably waiting for more than 1 confirmation.";
                StateHasChanged();
                return;
            }
        }
        else
        {
            var utxo = await NeblioTransactionHelpers.ValidateOneTokenNFTUtxo(AppData.Account.Address, newProfileNFT.Utxo);
            if (!utxo.Item1)
            {
                processingMinting = false;
                errorDuringSend = true;
                errorMessage = "Provided source tx transaction is not spendable. Probably waiting for more than 1 confirmation.";
                StateHasChanged();
                return;
            }
        }

        if (AppData.Account.Profile == null)
            AppData.Account.Profile = new ProfileNFT("");

        loadingProfile = true;
        processingMinting = true;
        StateHasChanged();

        try
        {
            string rtxid = string.Empty;

            if (!change)
                rtxid = await NFTHelpers.MintProfileNFT(AppData.Account, newProfileNFT);
            else
                rtxid = await NFTHelpers.ChangeProfileNFT(AppData.Account, newProfileNFT);

            if (!string.IsNullOrEmpty(rtxid))
            {
                tokentxid = rtxid;

                await Task.Delay(1000);
                processingMinting = false;

                // new one
                if (string.IsNullOrEmpty(AppData.Account.Profile.Utxo))
                {
                    var nfts = await NFTHelpers.LoadAddressNFTs(AppData.Account.Address);
                    AppData.Account.NFTs = nfts;
                    var profile = await NFTHelpers.FindProfileNFT(AppData.Account);
                    await profile.GetLastData();
                    AppData.Account.Profile = profile;
                }
                else //change of existing
                {
                    await AppData.Account.Profile.GetLastData();
                }

            }

            if (rtxid != null)
                tokentxid = rtxid;

            loadingProfile = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loadingProfile = false;
            tokentxid = ex.Message;
            errorDuringSend = true;
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }

}
